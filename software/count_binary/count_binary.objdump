
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002ef4 memsz 0x00002ef4 flags r-x
    LOAD off    0x00003f14 vaddr 0x0000af14 paddr 0x0000b1f4 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000044d4 vaddr 0x0000b4d4 paddr 0x0000b4d4 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002c04  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000158  0000adbc  0000adbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000af14  0000b1f4  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0000b4d4  0000b4d4  000044d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000041f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000708  00000000  00000000  00004218  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000090bc  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000035be  00000000  00000000  0000d9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003515  00000000  00000000  00010f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a68  00000000  00000000  000144b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001988  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002a7c  00000000  00000000  000168a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0001931c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00019370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001b28c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0001b28f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001b292  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001b293  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0001b294  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0001b298  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001b29c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0001b2a0  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0001b2a9  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0001b2b2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000f  00000000  00000000  0001b2bb  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000040  00000000  00000000  0001b2ca  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003690c  00000000  00000000  0001b30a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000adbc l    d  .rodata	00000000 .rodata
0000af14 l    d  .rwdata	00000000 .rwdata
0000b4d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
0000b4d4 l     O .bss	00000002 in
000081f4 l     F .text	0000007c load_buffer
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000af14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009354 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000094ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00009630 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009770 l     F .text	00000038 alt_dev_reg
0000aff4 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009a74 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009cc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009dfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009e28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a210 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a368 l     F .text	00000050 alt_get_errno
0000a3b8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00009598 g     F .text	00000068 alt_main
000089bc g     F .text	00000044 __ashldi3
0000b4f8 g     O .bss	00000100 alt_irq
0000b1f4 g       *ABS*	00000000 __flash_rwdata_start
00008a3c g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b4dc g     O .bss	00000004 errno
0000847c g     F .text	00000038 __make_dp
0000b4e4 g     O .bss	00000004 alt_argv
000131c8 g       *ABS*	00000000 _gp
00009600 g     F .text	00000030 usleep
0000b048 g     O .rwdata	00000180 alt_fd_list
0000a83c g     F .text	00000090 alt_find_dev
0000a2f0 g     F .text	00000078 alt_io_redirect
00008270 g     F .text	0000004c swap
000098e8 g     F .text	000000f4 altera_avalon_jtag_uart_read
00008a00 g     F .text	0000003c _printf_r
00009474 g     F .text	00000008 __udivsi3
0000aab4 g     F .text	0000008c alt_icache_flush
0000b1e0 g     O .rwdata	00000004 alt_max_fd
00008364 g     F .text	00000044 __extendsfdf2
0000b1c8 g     O .rwdata	00000004 _global_impure_ptr
0000b5f8 g       *ABS*	00000000 __bss_end
0000a120 g     F .text	000000f0 alt_iic_isr_register
0000a718 g     F .text	00000104 alt_tick
0000a0d4 g     F .text	0000004c alt_ic_irq_enabled
0000a680 g     F .text	00000098 alt_alarm_stop
0000b4ec g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000cc alt_irq_handler
0000b020 g     O .rwdata	00000028 alt_dev_null
0000868c g     F .text	000000c8 __unpack_f
00009de0 g     F .text	0000001c alt_dcache_flush_all
0000b1f4 g       *ABS*	00000000 __ram_rwdata_end
0000b1d8 g     O .rwdata	00000008 alt_dev_list
00009680 g     F .text	000000f0 write
0000af14 g       *ABS*	00000000 __ram_rodata_end
00008978 g     F .text	00000044 __lshrdi3
0000947c g     F .text	00000008 __umodsi3
0000b5f8 g       *ABS*	00000000 end
00008560 g     F .text	0000012c __pack_f
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009ae8 g     F .text	00000088 alt_avalon_timer_sc_init
000084b4 g     F .text	000000ac __clzsi2
000099dc g     F .text	00000098 altera_avalon_jtag_uart_write
00008a88 g     F .text	00000734 ___vfprintf_internal_r
0000aba8 g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000b4f0 g     O .bss	00000004 _alt_tick_rate
0000b4f4 g     O .bss	00000004 _alt_nticks
000097dc g     F .text	0000004c alt_sys_init
0000b4d8 g     O .bss	00000004 buffer
00009484 g     F .text	00000028 __mulsi3
0000af14 g       *ABS*	00000000 __ram_rwdata_start
0000adbc g       *ABS*	00000000 __ram_rodata_start
00009828 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a9e0 g     F .text	000000d4 alt_get_fd
00009b70 g     F .text	00000154 alt_busy_sleep
0000ab60 g     F .text	00000048 memcmp
0000b5f8 g       *ABS*	00000000 __alt_stack_base
0000a8cc g     F .text	00000114 alt_find_file
00009e78 g     F .text	000000a0 alt_dev_llist_insert
000091e0 g     F .text	000000e0 __sfvwrite_small_dev
0000b4d4 g       *ABS*	00000000 __bss_start
000082e0 g     F .text	00000084 main
0000b4e8 g     O .bss	00000004 alt_envp
00009888 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b1e4 g     O .rwdata	00000004 alt_errno
000093c8 g     F .text	00000050 __divsi3
0000adbc g       *ABS*	00000000 __flash_rodata_start
000097a8 g     F .text	00000034 alt_irq_init
0000a600 g     F .text	00000080 alt_release_fd
0000ade8 g     O .rodata	00000100 __clz_tab
000092e8 g     F .text	0000006c _write_r
0000b1cc g     O .rwdata	00000004 _impure_ptr
0000b4e0 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
000082bc g     F .text	00000024 fft
0000b1d0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009f48 g     F .text	00000050 alt_ic_isr_register
0000b1f4 g       *ABS*	00000000 _edata
0000b5f8 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000a034 g     F .text	000000a0 alt_ic_irq_disable
0000a81c g     F .text	00000020 altera_nios2_qsys_irq_init
0000ab40 g     F .text	00000020 exit
000083a8 g     F .text	000000d4 __floatunsisf
00009418 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000ad80 g     F .text	0000003c _exit
000092c0 g     F .text	00000028 strlen
0000a4a8 g     F .text	00000158 open
00009f18 g     F .text	00000030 alt_icache_flush_all
0000b1e8 g     O .rwdata	00000004 alt_priority_mask
00009f98 g     F .text	0000009c alt_ic_irq_enable
000091bc g     F .text	00000024 __vfprintf_internal
0000b1ec g     O .rwdata	00000008 alt_alarm_list
00009d14 g     F .text	000000cc close
00009518 g     F .text	00000080 alt_load
00008754 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18ed3e04 	addi	r3,r3,-19208
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	212d3e04 	addi	r4,r4,-19208
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d68c7214 	ori	gp,gp,12744
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10ad3514 	ori	r2,r2,46292

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18ed7e14 	ori	r3,r3,46584

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	00095180 	call	9518 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	00095980 	call	9598 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <load_buffer>:
/* A "loop counter" variable. */
static alt_u16 in;
float buffer [BUFF_SIZE];

static void load_buffer()
{
    81f4:	defffd04 	addi	sp,sp,-12
    81f8:	dfc00215 	stw	ra,8(sp)
    81fc:	df000115 	stw	fp,4(sp)
    8200:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < BUFF_SIZE; i++)
    8204:	e03fff15 	stw	zero,-4(fp)
    8208:	00001206 	br	8254 <load_buffer+0x60>
	{
		in = IORD_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE);
    820c:	00800074 	movhi	r2,1
    8210:	10840804 	addi	r2,r2,4128
    8214:	10800037 	ldwio	r2,0(r2)
    8218:	d0a0c30d 	sth	r2,-31988(gp)
		buffer[i] = in;
    821c:	d0a0c30b 	ldhu	r2,-31988(gp)
    8220:	10bfffcc 	andi	r2,r2,65535
    8224:	1009883a 	mov	r4,r2
    8228:	00083a80 	call	83a8 <__floatunsisf>
    822c:	1007883a 	mov	r3,r2
    8230:	e0bfff17 	ldw	r2,-4(fp)
    8234:	1085883a 	add	r2,r2,r2
    8238:	1089883a 	add	r4,r2,r2
    823c:	d0a0c404 	addi	r2,gp,-31984
    8240:	2085883a 	add	r2,r4,r2
    8244:	10c00015 	stw	r3,0(r2)
float buffer [BUFF_SIZE];

static void load_buffer()
{
	int i;
	for (i = 0; i < BUFF_SIZE; i++)
    8248:	e0bfff17 	ldw	r2,-4(fp)
    824c:	10800044 	addi	r2,r2,1
    8250:	e0bfff15 	stw	r2,-4(fp)
    8254:	e0bfff17 	ldw	r2,-4(fp)
    8258:	00bfec0e 	bge	zero,r2,820c <load_buffer+0x18>
	{
		in = IORD_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE);
		buffer[i] = in;
		//IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, in);
	}
}
    825c:	e037883a 	mov	sp,fp
    8260:	dfc00117 	ldw	ra,4(sp)
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00204 	addi	sp,sp,8
    826c:	f800283a 	ret

00008270 <swap>:

void swap(float *a, float *b)
{
    8270:	defffc04 	addi	sp,sp,-16
    8274:	df000315 	stw	fp,12(sp)
    8278:	df000304 	addi	fp,sp,12
    827c:	e13ffe15 	stw	r4,-8(fp)
    8280:	e17fff15 	stw	r5,-4(fp)
   float tmp;
   tmp = *b;
    8284:	e0bfff17 	ldw	r2,-4(fp)
    8288:	10800017 	ldw	r2,0(r2)
    828c:	e0bffd15 	stw	r2,-12(fp)
   *b = *a;
    8290:	e0bffe17 	ldw	r2,-8(fp)
    8294:	10c00017 	ldw	r3,0(r2)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	10c00015 	stw	r3,0(r2)
   *a = tmp;
    82a0:	e0bffe17 	ldw	r2,-8(fp)
    82a4:	e0fffd17 	ldw	r3,-12(fp)
    82a8:	10c00015 	stw	r3,0(r2)
}
    82ac:	e037883a 	mov	sp,fp
    82b0:	df000017 	ldw	fp,0(sp)
    82b4:	dec00104 	addi	sp,sp,4
    82b8:	f800283a 	ret

000082bc <fft>:

//FFT implementation from http://www.drdobbs.com/cpp/a-simple-and-efficient-fft-implementatio/199500857
void fft(float* data, unsigned long nn)
{
    82bc:	defffd04 	addi	sp,sp,-12
    82c0:	df000215 	stw	fp,8(sp)
    82c4:	df000204 	addi	fp,sp,8
    82c8:	e13ffe15 	stw	r4,-8(fp)
    82cc:	e17fff15 	stw	r5,-4(fp)
            wr += wr*wpr - wi*wpi;
            wi += wi*wpr + wtemp*wpi;
        }
        mmax=istep;
    }*/
}
    82d0:	e037883a 	mov	sp,fp
    82d4:	df000017 	ldw	fp,0(sp)
    82d8:	dec00104 	addi	sp,sp,4
    82dc:	f800283a 	ret

000082e0 <main>:

int main(void)
{
    82e0:	defffd04 	addi	sp,sp,-12
    82e4:	dfc00215 	stw	ra,8(sp)
    82e8:	df000115 	stw	fp,4(sp)
    82ec:	df000104 	addi	fp,sp,4
    int i;

    while( 1 ) 
    {
        usleep(10000);
    82f0:	0109c404 	movi	r4,10000
    82f4:	00096000 	call	9600 <usleep>
        printf("loading buffer with values....");
    82f8:	01000074 	movhi	r4,1
    82fc:	212b6f04 	addi	r4,r4,-21060
    8300:	0008a3c0 	call	8a3c <printf>
        load_buffer();
    8304:	00081f40 	call	81f4 <load_buffer>
        //fft(buffer, BUFF_SIZE);
        for (i = 0; i < BUFF_SIZE; i++)
    8308:	e03fff15 	stw	zero,-4(fp)
    830c:	00001206 	br	8358 <main+0x78>
        {
        	printf("value: %f\n", buffer[i]);
    8310:	e0bfff17 	ldw	r2,-4(fp)
    8314:	1085883a 	add	r2,r2,r2
    8318:	1087883a 	add	r3,r2,r2
    831c:	d0a0c404 	addi	r2,gp,-31984
    8320:	1887883a 	add	r3,r3,r2
    8324:	18800017 	ldw	r2,0(r3)
    8328:	1009883a 	mov	r4,r2
    832c:	00083640 	call	8364 <__extendsfdf2>
    8330:	100d883a 	mov	r6,r2
    8334:	180f883a 	mov	r7,r3
    8338:	01000074 	movhi	r4,1
    833c:	212b7704 	addi	r4,r4,-21028
    8340:	300b883a 	mov	r5,r6
    8344:	380d883a 	mov	r6,r7
    8348:	0008a3c0 	call	8a3c <printf>
    {
        usleep(10000);
        printf("loading buffer with values....");
        load_buffer();
        //fft(buffer, BUFF_SIZE);
        for (i = 0; i < BUFF_SIZE; i++)
    834c:	e0bfff17 	ldw	r2,-4(fp)
    8350:	10800044 	addi	r2,r2,1
    8354:	e0bfff15 	stw	r2,-4(fp)
    8358:	e0bfff17 	ldw	r2,-4(fp)
    835c:	00bfec0e 	bge	zero,r2,8310 <main+0x30>
        {
        	printf("value: %f\n", buffer[i]);
        }


    }
    8360:	003fe306 	br	82f0 <main+0x10>

00008364 <__extendsfdf2>:
    8364:	defff904 	addi	sp,sp,-28
    8368:	d9000515 	stw	r4,20(sp)
    836c:	d9400104 	addi	r5,sp,4
    8370:	d9000504 	addi	r4,sp,20
    8374:	dfc00615 	stw	ra,24(sp)
    8378:	000868c0 	call	868c <__unpack_f>
    837c:	d9c00417 	ldw	r7,16(sp)
    8380:	d9000117 	ldw	r4,4(sp)
    8384:	d9400217 	ldw	r5,8(sp)
    8388:	3804d0ba 	srli	r2,r7,2
    838c:	d9800317 	ldw	r6,12(sp)
    8390:	380e97ba 	slli	r7,r7,30
    8394:	d8800015 	stw	r2,0(sp)
    8398:	000847c0 	call	847c <__make_dp>
    839c:	dfc00617 	ldw	ra,24(sp)
    83a0:	dec00704 	addi	sp,sp,28
    83a4:	f800283a 	ret

000083a8 <__floatunsisf>:
    83a8:	defffa04 	addi	sp,sp,-24
    83ac:	dc000415 	stw	r16,16(sp)
    83b0:	dfc00515 	stw	ra,20(sp)
    83b4:	d8000115 	stw	zero,4(sp)
    83b8:	2021883a 	mov	r16,r4
    83bc:	20001326 	beq	r4,zero,840c <__floatunsisf+0x64>
    83c0:	008000c4 	movi	r2,3
    83c4:	d8800015 	stw	r2,0(sp)
    83c8:	00800784 	movi	r2,30
    83cc:	d8800215 	stw	r2,8(sp)
    83d0:	00084b40 	call	84b4 <__clzsi2>
    83d4:	10ffffc4 	addi	r3,r2,-1
    83d8:	18001416 	blt	r3,zero,842c <__floatunsisf+0x84>
    83dc:	18002526 	beq	r3,zero,8474 <__floatunsisf+0xcc>
    83e0:	80e0983a 	sll	r16,r16,r3
    83e4:	00c007c4 	movi	r3,31
    83e8:	1885c83a 	sub	r2,r3,r2
    83ec:	dc000315 	stw	r16,12(sp)
    83f0:	d8800215 	stw	r2,8(sp)
    83f4:	d809883a 	mov	r4,sp
    83f8:	00085600 	call	8560 <__pack_f>
    83fc:	dfc00517 	ldw	ra,20(sp)
    8400:	dc000417 	ldw	r16,16(sp)
    8404:	dec00604 	addi	sp,sp,24
    8408:	f800283a 	ret
    840c:	00800084 	movi	r2,2
    8410:	d809883a 	mov	r4,sp
    8414:	d8800015 	stw	r2,0(sp)
    8418:	00085600 	call	8560 <__pack_f>
    841c:	dfc00517 	ldw	ra,20(sp)
    8420:	dc000417 	ldw	r16,16(sp)
    8424:	dec00604 	addi	sp,sp,24
    8428:	f800283a 	ret
    842c:	00c7c83a 	sub	r3,zero,r3
    8430:	01000044 	movi	r4,1
    8434:	20c8983a 	sll	r4,r4,r3
    8438:	80c6d83a 	srl	r3,r16,r3
    843c:	213fffc4 	addi	r4,r4,-1
    8440:	2420703a 	and	r16,r4,r16
    8444:	8020c03a 	cmpne	r16,r16,zero
    8448:	010007c4 	movi	r4,31
    844c:	80c6b03a 	or	r3,r16,r3
    8450:	2085c83a 	sub	r2,r4,r2
    8454:	d809883a 	mov	r4,sp
    8458:	d8c00315 	stw	r3,12(sp)
    845c:	d8800215 	stw	r2,8(sp)
    8460:	00085600 	call	8560 <__pack_f>
    8464:	dfc00517 	ldw	ra,20(sp)
    8468:	dc000417 	ldw	r16,16(sp)
    846c:	dec00604 	addi	sp,sp,24
    8470:	f800283a 	ret
    8474:	dc000315 	stw	r16,12(sp)
    8478:	003fde06 	br	83f4 <__floatunsisf+0x4c>

0000847c <__make_dp>:
    847c:	defff904 	addi	sp,sp,-28
    8480:	d8800717 	ldw	r2,28(sp)
    8484:	d9000015 	stw	r4,0(sp)
    8488:	d809883a 	mov	r4,sp
    848c:	dfc00515 	stw	ra,20(sp)
    8490:	d9c00615 	stw	r7,24(sp)
    8494:	d9400115 	stw	r5,4(sp)
    8498:	d9800215 	stw	r6,8(sp)
    849c:	d9c00315 	stw	r7,12(sp)
    84a0:	d8800415 	stw	r2,16(sp)
    84a4:	00087540 	call	8754 <__pack_d>
    84a8:	dfc00517 	ldw	ra,20(sp)
    84ac:	dec00704 	addi	sp,sp,28
    84b0:	f800283a 	ret

000084b4 <__clzsi2>:
    84b4:	00bfffd4 	movui	r2,65535
    84b8:	11000b36 	bltu	r2,r4,84e8 <__clzsi2+0x34>
    84bc:	00803fc4 	movi	r2,255
    84c0:	11001e2e 	bgeu	r2,r4,853c <__clzsi2+0x88>
    84c4:	00c00204 	movi	r3,8
    84c8:	20c8d83a 	srl	r4,r4,r3
    84cc:	00c00074 	movhi	r3,1
    84d0:	18eb7a04 	addi	r3,r3,-21016
    84d4:	00800604 	movi	r2,24
    84d8:	1909883a 	add	r4,r3,r4
    84dc:	20c00003 	ldbu	r3,0(r4)
    84e0:	10c5c83a 	sub	r2,r2,r3
    84e4:	f800283a 	ret
    84e8:	00804034 	movhi	r2,256
    84ec:	10bfffc4 	addi	r2,r2,-1
    84f0:	11000936 	bltu	r2,r4,8518 <__clzsi2+0x64>
    84f4:	00800404 	movi	r2,16
    84f8:	1007883a 	mov	r3,r2
    84fc:	20c8d83a 	srl	r4,r4,r3
    8500:	00c00074 	movhi	r3,1
    8504:	18eb7a04 	addi	r3,r3,-21016
    8508:	1909883a 	add	r4,r3,r4
    850c:	20c00003 	ldbu	r3,0(r4)
    8510:	10c5c83a 	sub	r2,r2,r3
    8514:	f800283a 	ret
    8518:	00c00604 	movi	r3,24
    851c:	20c8d83a 	srl	r4,r4,r3
    8520:	00c00074 	movhi	r3,1
    8524:	18eb7a04 	addi	r3,r3,-21016
    8528:	00800204 	movi	r2,8
    852c:	1909883a 	add	r4,r3,r4
    8530:	20c00003 	ldbu	r3,0(r4)
    8534:	10c5c83a 	sub	r2,r2,r3
    8538:	f800283a 	ret
    853c:	0007883a 	mov	r3,zero
    8540:	20c8d83a 	srl	r4,r4,r3
    8544:	00c00074 	movhi	r3,1
    8548:	18eb7a04 	addi	r3,r3,-21016
    854c:	00800804 	movi	r2,32
    8550:	1909883a 	add	r4,r3,r4
    8554:	20c00003 	ldbu	r3,0(r4)
    8558:	10c5c83a 	sub	r2,r2,r3
    855c:	f800283a 	ret

00008560 <__pack_f>:
    8560:	21400017 	ldw	r5,0(r4)
    8564:	01800044 	movi	r6,1
    8568:	20c00317 	ldw	r3,12(r4)
    856c:	21c00117 	ldw	r7,4(r4)
    8570:	3140282e 	bgeu	r6,r5,8614 <__pack_f+0xb4>
    8574:	00800104 	movi	r2,4
    8578:	28802326 	beq	r5,r2,8608 <__pack_f+0xa8>
    857c:	00800084 	movi	r2,2
    8580:	28800f26 	beq	r5,r2,85c0 <__pack_f+0x60>
    8584:	18000e26 	beq	r3,zero,85c0 <__pack_f+0x60>
    8588:	21000217 	ldw	r4,8(r4)
    858c:	00bfe084 	movi	r2,-126
    8590:	20802616 	blt	r4,r2,862c <__pack_f+0xcc>
    8594:	00801fc4 	movi	r2,127
    8598:	11001b16 	blt	r2,r4,8608 <__pack_f+0xa8>
    859c:	188a703a 	and	r5,r3,r2
    85a0:	00801004 	movi	r2,64
    85a4:	28801126 	beq	r5,r2,85ec <__pack_f+0x8c>
    85a8:	18c00fc4 	addi	r3,r3,63
    85ac:	18001316 	blt	r3,zero,85fc <__pack_f+0x9c>
    85b0:	21001fc4 	addi	r4,r4,127
    85b4:	180690ba 	slli	r3,r3,2
    85b8:	1806d27a 	srli	r3,r3,9
    85bc:	00000206 	br	85c8 <__pack_f+0x68>
    85c0:	0009883a 	mov	r4,zero
    85c4:	0007883a 	mov	r3,zero
    85c8:	21003fcc 	andi	r4,r4,255
    85cc:	200895fa 	slli	r4,r4,23
    85d0:	380a97fa 	slli	r5,r7,31
    85d4:	00802034 	movhi	r2,128
    85d8:	10bfffc4 	addi	r2,r2,-1
    85dc:	1886703a 	and	r3,r3,r2
    85e0:	1904b03a 	or	r2,r3,r4
    85e4:	1144b03a 	or	r2,r2,r5
    85e8:	f800283a 	ret
    85ec:	1880200c 	andi	r2,r3,128
    85f0:	103fee26 	beq	r2,zero,85ac <__pack_f+0x4c>
    85f4:	18c01004 	addi	r3,r3,64
    85f8:	183fed0e 	bge	r3,zero,85b0 <__pack_f+0x50>
    85fc:	1806d07a 	srli	r3,r3,1
    8600:	21002004 	addi	r4,r4,128
    8604:	003feb06 	br	85b4 <__pack_f+0x54>
    8608:	013fffc4 	movi	r4,-1
    860c:	0007883a 	mov	r3,zero
    8610:	003fed06 	br	85c8 <__pack_f+0x68>
    8614:	18c00434 	orhi	r3,r3,16
    8618:	00802034 	movhi	r2,128
    861c:	10bfffc4 	addi	r2,r2,-1
    8620:	1886703a 	and	r3,r3,r2
    8624:	013fffc4 	movi	r4,-1
    8628:	003fe706 	br	85c8 <__pack_f+0x68>
    862c:	1105c83a 	sub	r2,r2,r4
    8630:	01000644 	movi	r4,25
    8634:	20801216 	blt	r4,r2,8680 <__pack_f+0x120>
    8638:	3088983a 	sll	r4,r6,r2
    863c:	1884d83a 	srl	r2,r3,r2
    8640:	213fffc4 	addi	r4,r4,-1
    8644:	20c6703a 	and	r3,r4,r3
    8648:	1806c03a 	cmpne	r3,r3,zero
    864c:	1884b03a 	or	r2,r3,r2
    8650:	11001fcc 	andi	r4,r2,127
    8654:	00c01004 	movi	r3,64
    8658:	20c00a1e 	bne	r4,r3,8684 <__pack_f+0x124>
    865c:	10c0200c 	andi	r3,r2,128
    8660:	18000126 	beq	r3,zero,8668 <__pack_f+0x108>
    8664:	10801004 	addi	r2,r2,64
    8668:	100690ba 	slli	r3,r2,2
    866c:	01100034 	movhi	r4,16384
    8670:	1105403a 	cmpgeu	r2,r2,r4
    8674:	1806d27a 	srli	r3,r3,9
    8678:	1009883a 	mov	r4,r2
    867c:	003fd206 	br	85c8 <__pack_f+0x68>
    8680:	0005883a 	mov	r2,zero
    8684:	10800fc4 	addi	r2,r2,63
    8688:	003ff706 	br	8668 <__pack_f+0x108>

0000868c <__unpack_f>:
    868c:	20c00017 	ldw	r3,0(r4)
    8690:	00802034 	movhi	r2,128
    8694:	10bfffc4 	addi	r2,r2,-1
    8698:	1808d5fa 	srli	r4,r3,23
    869c:	180cd7fa 	srli	r6,r3,31
    86a0:	1884703a 	and	r2,r3,r2
    86a4:	21003fcc 	andi	r4,r4,255
    86a8:	29800115 	stw	r6,4(r5)
    86ac:	2000111e 	bne	r4,zero,86f4 <__unpack_f+0x68>
    86b0:	10001a26 	beq	r2,zero,871c <__unpack_f+0x90>
    86b4:	00ffe084 	movi	r3,-126
    86b8:	100491fa 	slli	r2,r2,7
    86bc:	28c00215 	stw	r3,8(r5)
    86c0:	00c000c4 	movi	r3,3
    86c4:	28c00015 	stw	r3,0(r5)
    86c8:	01900034 	movhi	r6,16384
    86cc:	31bfffc4 	addi	r6,r6,-1
    86d0:	30801036 	bltu	r6,r2,8714 <__unpack_f+0x88>
    86d4:	00ffe044 	movi	r3,-127
    86d8:	1085883a 	add	r2,r2,r2
    86dc:	1809883a 	mov	r4,r3
    86e0:	18ffffc4 	addi	r3,r3,-1
    86e4:	30bffc2e 	bgeu	r6,r2,86d8 <__unpack_f+0x4c>
    86e8:	29000215 	stw	r4,8(r5)
    86ec:	28800315 	stw	r2,12(r5)
    86f0:	f800283a 	ret
    86f4:	01803fc4 	movi	r6,255
    86f8:	21800b26 	beq	r4,r6,8728 <__unpack_f+0x9c>
    86fc:	100491fa 	slli	r2,r2,7
    8700:	213fe044 	addi	r4,r4,-127
    8704:	00c000c4 	movi	r3,3
    8708:	10900034 	orhi	r2,r2,16384
    870c:	29000215 	stw	r4,8(r5)
    8710:	28c00015 	stw	r3,0(r5)
    8714:	28800315 	stw	r2,12(r5)
    8718:	f800283a 	ret
    871c:	00800084 	movi	r2,2
    8720:	28800015 	stw	r2,0(r5)
    8724:	f800283a 	ret
    8728:	10000526 	beq	r2,zero,8740 <__unpack_f+0xb4>
    872c:	18c0042c 	andhi	r3,r3,16
    8730:	18000626 	beq	r3,zero,874c <__unpack_f+0xc0>
    8734:	00c00044 	movi	r3,1
    8738:	28c00015 	stw	r3,0(r5)
    873c:	003ff506 	br	8714 <__unpack_f+0x88>
    8740:	00800104 	movi	r2,4
    8744:	28800015 	stw	r2,0(r5)
    8748:	f800283a 	ret
    874c:	28000015 	stw	zero,0(r5)
    8750:	003ff006 	br	8714 <__unpack_f+0x88>

00008754 <__pack_d>:
    8754:	20800017 	ldw	r2,0(r4)
    8758:	defff804 	addi	sp,sp,-32
    875c:	dcc00315 	stw	r19,12(sp)
    8760:	dc800215 	stw	r18,8(sp)
    8764:	dfc00715 	stw	ra,28(sp)
    8768:	dd800615 	stw	r22,24(sp)
    876c:	dd400515 	stw	r21,20(sp)
    8770:	dd000415 	stw	r20,16(sp)
    8774:	dc400115 	stw	r17,4(sp)
    8778:	dc000015 	stw	r16,0(sp)
    877c:	04800044 	movi	r18,1
    8780:	24400317 	ldw	r17,12(r4)
    8784:	24000417 	ldw	r16,16(r4)
    8788:	24c00117 	ldw	r19,4(r4)
    878c:	9080422e 	bgeu	r18,r2,8898 <__pack_d+0x144>
    8790:	00c00104 	movi	r3,4
    8794:	10c03c26 	beq	r2,r3,8888 <__pack_d+0x134>
    8798:	00c00084 	movi	r3,2
    879c:	10c01926 	beq	r2,r3,8804 <__pack_d+0xb0>
    87a0:	8c04b03a 	or	r2,r17,r16
    87a4:	10001726 	beq	r2,zero,8804 <__pack_d+0xb0>
    87a8:	21000217 	ldw	r4,8(r4)
    87ac:	00bf0084 	movi	r2,-1022
    87b0:	20804016 	blt	r4,r2,88b4 <__pack_d+0x160>
    87b4:	0080ffc4 	movi	r2,1023
    87b8:	11003316 	blt	r2,r4,8888 <__pack_d+0x134>
    87bc:	88803fcc 	andi	r2,r17,255
    87c0:	00c02004 	movi	r3,128
    87c4:	10c02926 	beq	r2,r3,886c <__pack_d+0x118>
    87c8:	88801fc4 	addi	r2,r17,127
    87cc:	1463803a 	cmpltu	r17,r2,r17
    87d0:	8c21883a 	add	r16,r17,r16
    87d4:	1023883a 	mov	r17,r2
    87d8:	00880034 	movhi	r2,8192
    87dc:	10bfffc4 	addi	r2,r2,-1
    87e0:	14001c36 	bltu	r2,r16,8854 <__pack_d+0x100>
    87e4:	2100ffc4 	addi	r4,r4,1023
    87e8:	8006963a 	slli	r3,r16,24
    87ec:	8804d23a 	srli	r2,r17,8
    87f0:	8020913a 	slli	r16,r16,4
    87f4:	2101ffcc 	andi	r4,r4,2047
    87f8:	1884b03a 	or	r2,r3,r2
    87fc:	8020d33a 	srli	r16,r16,12
    8800:	00000306 	br	8810 <__pack_d+0xbc>
    8804:	0009883a 	mov	r4,zero
    8808:	0005883a 	mov	r2,zero
    880c:	0021883a 	mov	r16,zero
    8810:	2008953a 	slli	r4,r4,20
    8814:	982697fa 	slli	r19,r19,31
    8818:	00c00434 	movhi	r3,16
    881c:	18ffffc4 	addi	r3,r3,-1
    8820:	80e0703a 	and	r16,r16,r3
    8824:	8106b03a 	or	r3,r16,r4
    8828:	1cc6b03a 	or	r3,r3,r19
    882c:	dfc00717 	ldw	ra,28(sp)
    8830:	dd800617 	ldw	r22,24(sp)
    8834:	dd400517 	ldw	r21,20(sp)
    8838:	dd000417 	ldw	r20,16(sp)
    883c:	dcc00317 	ldw	r19,12(sp)
    8840:	dc800217 	ldw	r18,8(sp)
    8844:	dc400117 	ldw	r17,4(sp)
    8848:	dc000017 	ldw	r16,0(sp)
    884c:	dec00804 	addi	sp,sp,32
    8850:	f800283a 	ret
    8854:	800697fa 	slli	r3,r16,31
    8858:	8804d07a 	srli	r2,r17,1
    885c:	21010004 	addi	r4,r4,1024
    8860:	8020d07a 	srli	r16,r16,1
    8864:	18a2b03a 	or	r17,r3,r2
    8868:	003fdf06 	br	87e8 <__pack_d+0x94>
    886c:	88c0400c 	andi	r3,r17,256
    8870:	183fd926 	beq	r3,zero,87d8 <__pack_d+0x84>
    8874:	8885883a 	add	r2,r17,r2
    8878:	1463803a 	cmpltu	r17,r2,r17
    887c:	8c21883a 	add	r16,r17,r16
    8880:	1023883a 	mov	r17,r2
    8884:	003fd406 	br	87d8 <__pack_d+0x84>
    8888:	0101ffc4 	movi	r4,2047
    888c:	0005883a 	mov	r2,zero
    8890:	0021883a 	mov	r16,zero
    8894:	003fde06 	br	8810 <__pack_d+0xbc>
    8898:	84000234 	orhi	r16,r16,8
    889c:	00c00434 	movhi	r3,16
    88a0:	18ffffc4 	addi	r3,r3,-1
    88a4:	8805883a 	mov	r2,r17
    88a8:	80e0703a 	and	r16,r16,r3
    88ac:	0101ffc4 	movi	r4,2047
    88b0:	003fd706 	br	8810 <__pack_d+0xbc>
    88b4:	1129c83a 	sub	r20,r2,r4
    88b8:	00800e04 	movi	r2,56
    88bc:	15002716 	blt	r2,r20,895c <__pack_d+0x208>
    88c0:	800b883a 	mov	r5,r16
    88c4:	a00d883a 	mov	r6,r20
    88c8:	8809883a 	mov	r4,r17
    88cc:	00089780 	call	8978 <__lshrdi3>
    88d0:	9009883a 	mov	r4,r18
    88d4:	000b883a 	mov	r5,zero
    88d8:	a00d883a 	mov	r6,r20
    88dc:	102d883a 	mov	r22,r2
    88e0:	182b883a 	mov	r21,r3
    88e4:	00089bc0 	call	89bc <__ashldi3>
    88e8:	1009003a 	cmpeq	r4,r2,zero
    88ec:	1907c83a 	sub	r3,r3,r4
    88f0:	10bfffc4 	addi	r2,r2,-1
    88f4:	1c20703a 	and	r16,r3,r16
    88f8:	1444703a 	and	r2,r2,r17
    88fc:	1404b03a 	or	r2,r2,r16
    8900:	1004c03a 	cmpne	r2,r2,zero
    8904:	1584b03a 	or	r2,r2,r22
    8908:	11003fcc 	andi	r4,r2,255
    890c:	01402004 	movi	r5,128
    8910:	a807883a 	mov	r3,r21
    8914:	2140131e 	bne	r4,r5,8964 <__pack_d+0x210>
    8918:	1140400c 	andi	r5,r2,256
    891c:	28000426 	beq	r5,zero,8930 <__pack_d+0x1dc>
    8920:	1109883a 	add	r4,r2,r4
    8924:	2085803a 	cmpltu	r2,r4,r2
    8928:	1547883a 	add	r3,r2,r21
    892c:	2005883a 	mov	r2,r4
    8930:	1808963a 	slli	r4,r3,24
    8934:	1004d23a 	srli	r2,r2,8
    8938:	1820913a 	slli	r16,r3,4
    893c:	01440034 	movhi	r5,4096
    8940:	297fffc4 	addi	r5,r5,-1
    8944:	2084b03a 	or	r2,r4,r2
    8948:	8020d33a 	srli	r16,r16,12
    894c:	01000044 	movi	r4,1
    8950:	28ffaf36 	bltu	r5,r3,8810 <__pack_d+0xbc>
    8954:	0009883a 	mov	r4,zero
    8958:	003fad06 	br	8810 <__pack_d+0xbc>
    895c:	0005883a 	mov	r2,zero
    8960:	0007883a 	mov	r3,zero
    8964:	11001fc4 	addi	r4,r2,127
    8968:	2085803a 	cmpltu	r2,r4,r2
    896c:	10c7883a 	add	r3,r2,r3
    8970:	2005883a 	mov	r2,r4
    8974:	003fee06 	br	8930 <__pack_d+0x1dc>

00008978 <__lshrdi3>:
    8978:	2005883a 	mov	r2,r4
    897c:	2807883a 	mov	r3,r5
    8980:	30000826 	beq	r6,zero,89a4 <__lshrdi3+0x2c>
    8984:	01000804 	movi	r4,32
    8988:	2189c83a 	sub	r4,r4,r6
    898c:	0100060e 	bge	zero,r4,89a8 <__lshrdi3+0x30>
    8990:	1184d83a 	srl	r2,r2,r6
    8994:	2908983a 	sll	r4,r5,r4
    8998:	298cd83a 	srl	r6,r5,r6
    899c:	2084b03a 	or	r2,r4,r2
    89a0:	3007883a 	mov	r3,r6
    89a4:	f800283a 	ret
    89a8:	0105c83a 	sub	r2,zero,r4
    89ac:	000d883a 	mov	r6,zero
    89b0:	2884d83a 	srl	r2,r5,r2
    89b4:	3007883a 	mov	r3,r6
    89b8:	003ffa06 	br	89a4 <__lshrdi3+0x2c>

000089bc <__ashldi3>:
    89bc:	2005883a 	mov	r2,r4
    89c0:	2807883a 	mov	r3,r5
    89c4:	30000826 	beq	r6,zero,89e8 <__ashldi3+0x2c>
    89c8:	01000804 	movi	r4,32
    89cc:	2189c83a 	sub	r4,r4,r6
    89d0:	0100060e 	bge	zero,r4,89ec <__ashldi3+0x30>
    89d4:	1108d83a 	srl	r4,r2,r4
    89d8:	2986983a 	sll	r3,r5,r6
    89dc:	118c983a 	sll	r6,r2,r6
    89e0:	20c6b03a 	or	r3,r4,r3
    89e4:	3005883a 	mov	r2,r6
    89e8:	f800283a 	ret
    89ec:	0107c83a 	sub	r3,zero,r4
    89f0:	000d883a 	mov	r6,zero
    89f4:	10c6983a 	sll	r3,r2,r3
    89f8:	3005883a 	mov	r2,r6
    89fc:	003ffa06 	br	89e8 <__ashldi3+0x2c>

00008a00 <_printf_r>:
    8a00:	defffd04 	addi	sp,sp,-12
    8a04:	dfc00015 	stw	ra,0(sp)
    8a08:	d9800115 	stw	r6,4(sp)
    8a0c:	d9c00215 	stw	r7,8(sp)
    8a10:	20800217 	ldw	r2,8(r4)
    8a14:	00c00074 	movhi	r3,1
    8a18:	18e47804 	addi	r3,r3,-28192
    8a1c:	280d883a 	mov	r6,r5
    8a20:	10c00115 	stw	r3,4(r2)
    8a24:	100b883a 	mov	r5,r2
    8a28:	d9c00104 	addi	r7,sp,4
    8a2c:	0008a880 	call	8a88 <___vfprintf_internal_r>
    8a30:	dfc00017 	ldw	ra,0(sp)
    8a34:	dec00304 	addi	sp,sp,12
    8a38:	f800283a 	ret

00008a3c <printf>:
    8a3c:	defffc04 	addi	sp,sp,-16
    8a40:	dfc00015 	stw	ra,0(sp)
    8a44:	d9400115 	stw	r5,4(sp)
    8a48:	d9800215 	stw	r6,8(sp)
    8a4c:	d9c00315 	stw	r7,12(sp)
    8a50:	00800074 	movhi	r2,1
    8a54:	10ac7304 	addi	r2,r2,-20020
    8a58:	10800017 	ldw	r2,0(r2)
    8a5c:	00c00074 	movhi	r3,1
    8a60:	18e47804 	addi	r3,r3,-28192
    8a64:	200b883a 	mov	r5,r4
    8a68:	10800217 	ldw	r2,8(r2)
    8a6c:	d9800104 	addi	r6,sp,4
    8a70:	10c00115 	stw	r3,4(r2)
    8a74:	1009883a 	mov	r4,r2
    8a78:	00091bc0 	call	91bc <__vfprintf_internal>
    8a7c:	dfc00017 	ldw	ra,0(sp)
    8a80:	dec00404 	addi	sp,sp,16
    8a84:	f800283a 	ret

00008a88 <___vfprintf_internal_r>:
    8a88:	deffe004 	addi	sp,sp,-128
    8a8c:	d8c00804 	addi	r3,sp,32
    8a90:	ddc01d15 	stw	r23,116(sp)
    8a94:	dd401b15 	stw	r21,108(sp)
    8a98:	dd001a15 	stw	r20,104(sp)
    8a9c:	dcc01915 	stw	r19,100(sp)
    8aa0:	dc801815 	stw	r18,96(sp)
    8aa4:	dc001615 	stw	r16,88(sp)
    8aa8:	dfc01f15 	stw	ra,124(sp)
    8aac:	df001e15 	stw	fp,120(sp)
    8ab0:	dd801c15 	stw	r22,112(sp)
    8ab4:	dc401715 	stw	r17,92(sp)
    8ab8:	d9000f15 	stw	r4,60(sp)
    8abc:	d9c00e15 	stw	r7,56(sp)
    8ac0:	3021883a 	mov	r16,r6
    8ac4:	0025883a 	mov	r18,zero
    8ac8:	d8001415 	stw	zero,80(sp)
    8acc:	d8000d15 	stw	zero,52(sp)
    8ad0:	0029883a 	mov	r20,zero
    8ad4:	d8000b15 	stw	zero,44(sp)
    8ad8:	d8000c15 	stw	zero,48(sp)
    8adc:	d8001315 	stw	zero,76(sp)
    8ae0:	d8001015 	stw	zero,64(sp)
    8ae4:	002b883a 	mov	r21,zero
    8ae8:	04c00044 	movi	r19,1
    8aec:	d8c00a15 	stw	r3,40(sp)
    8af0:	282f883a 	mov	r23,r5
    8af4:	80c00003 	ldbu	r3,0(r16)
    8af8:	84000044 	addi	r16,r16,1
    8afc:	18803fcc 	andi	r2,r3,255
    8b00:	1080201c 	xori	r2,r2,128
    8b04:	10bfe004 	addi	r2,r2,-128
    8b08:	10001426 	beq	r2,zero,8b5c <___vfprintf_internal_r+0xd4>
    8b0c:	acc03026 	beq	r21,r19,8bd0 <___vfprintf_internal_r+0x148>
    8b10:	9d401f16 	blt	r19,r21,8b90 <___vfprintf_internal_r+0x108>
    8b14:	a83ff71e 	bne	r21,zero,8af4 <___vfprintf_internal_r+0x6c>
    8b18:	01000944 	movi	r4,37
    8b1c:	1100d926 	beq	r2,r4,8e84 <___vfprintf_internal_r+0x3fc>
    8b20:	b8800117 	ldw	r2,4(r23)
    8b24:	d9000f17 	ldw	r4,60(sp)
    8b28:	d8c00905 	stb	r3,36(sp)
    8b2c:	b80b883a 	mov	r5,r23
    8b30:	d9800904 	addi	r6,sp,36
    8b34:	01c00044 	movi	r7,1
    8b38:	103ee83a 	callr	r2
    8b3c:	1000a31e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    8b40:	80c00003 	ldbu	r3,0(r16)
    8b44:	94800044 	addi	r18,r18,1
    8b48:	84000044 	addi	r16,r16,1
    8b4c:	18803fcc 	andi	r2,r3,255
    8b50:	1080201c 	xori	r2,r2,128
    8b54:	10bfe004 	addi	r2,r2,-128
    8b58:	103fec1e 	bne	r2,zero,8b0c <___vfprintf_internal_r+0x84>
    8b5c:	9005883a 	mov	r2,r18
    8b60:	dfc01f17 	ldw	ra,124(sp)
    8b64:	df001e17 	ldw	fp,120(sp)
    8b68:	ddc01d17 	ldw	r23,116(sp)
    8b6c:	dd801c17 	ldw	r22,112(sp)
    8b70:	dd401b17 	ldw	r21,108(sp)
    8b74:	dd001a17 	ldw	r20,104(sp)
    8b78:	dcc01917 	ldw	r19,100(sp)
    8b7c:	dc801817 	ldw	r18,96(sp)
    8b80:	dc401717 	ldw	r17,92(sp)
    8b84:	dc001617 	ldw	r16,88(sp)
    8b88:	dec02004 	addi	sp,sp,128
    8b8c:	f800283a 	ret
    8b90:	01000084 	movi	r4,2
    8b94:	a9001226 	beq	r21,r4,8be0 <___vfprintf_internal_r+0x158>
    8b98:	010000c4 	movi	r4,3
    8b9c:	a93fd51e 	bne	r21,r4,8af4 <___vfprintf_internal_r+0x6c>
    8ba0:	1c7ff404 	addi	r17,r3,-48
    8ba4:	8c403fcc 	andi	r17,r17,255
    8ba8:	01000244 	movi	r4,9
    8bac:	24401b36 	bltu	r4,r17,8c1c <___vfprintf_internal_r+0x194>
    8bb0:	d9000b17 	ldw	r4,44(sp)
    8bb4:	00bfffc4 	movi	r2,-1
    8bb8:	2080ea26 	beq	r4,r2,8f64 <___vfprintf_internal_r+0x4dc>
    8bbc:	01400284 	movi	r5,10
    8bc0:	00094840 	call	9484 <__mulsi3>
    8bc4:	88a3883a 	add	r17,r17,r2
    8bc8:	dc400b15 	stw	r17,44(sp)
    8bcc:	003fc906 	br	8af4 <___vfprintf_internal_r+0x6c>
    8bd0:	01000c04 	movi	r4,48
    8bd4:	1100de26 	beq	r2,r4,8f50 <___vfprintf_internal_r+0x4c8>
    8bd8:	01000944 	movi	r4,37
    8bdc:	1100fd26 	beq	r2,r4,8fd4 <___vfprintf_internal_r+0x54c>
    8be0:	1c7ff404 	addi	r17,r3,-48
    8be4:	8c403fcc 	andi	r17,r17,255
    8be8:	01000244 	movi	r4,9
    8bec:	24400936 	bltu	r4,r17,8c14 <___vfprintf_internal_r+0x18c>
    8bf0:	d9000c17 	ldw	r4,48(sp)
    8bf4:	00bfffc4 	movi	r2,-1
    8bf8:	2080d826 	beq	r4,r2,8f5c <___vfprintf_internal_r+0x4d4>
    8bfc:	01400284 	movi	r5,10
    8c00:	00094840 	call	9484 <__mulsi3>
    8c04:	88a3883a 	add	r17,r17,r2
    8c08:	dc400c15 	stw	r17,48(sp)
    8c0c:	05400084 	movi	r21,2
    8c10:	003fb806 	br	8af4 <___vfprintf_internal_r+0x6c>
    8c14:	01000b84 	movi	r4,46
    8c18:	1100a726 	beq	r2,r4,8eb8 <___vfprintf_internal_r+0x430>
    8c1c:	01401b04 	movi	r5,108
    8c20:	1140a326 	beq	r2,r5,8eb0 <___vfprintf_internal_r+0x428>
    8c24:	d9000b17 	ldw	r4,44(sp)
    8c28:	00bfffc4 	movi	r2,-1
    8c2c:	2080e626 	beq	r4,r2,8fc8 <___vfprintf_internal_r+0x540>
    8c30:	d8001015 	stw	zero,64(sp)
    8c34:	18ffea04 	addi	r3,r3,-88
    8c38:	18c03fcc 	andi	r3,r3,255
    8c3c:	00800804 	movi	r2,32
    8c40:	10c0022e 	bgeu	r2,r3,8c4c <___vfprintf_internal_r+0x1c4>
    8c44:	002b883a 	mov	r21,zero
    8c48:	003faa06 	br	8af4 <___vfprintf_internal_r+0x6c>
    8c4c:	18c7883a 	add	r3,r3,r3
    8c50:	18c7883a 	add	r3,r3,r3
    8c54:	01400074 	movhi	r5,1
    8c58:	29631a04 	addi	r5,r5,-29592
    8c5c:	1947883a 	add	r3,r3,r5
    8c60:	18800017 	ldw	r2,0(r3)
    8c64:	1000683a 	jmp	r2
    8c68:	00009000 	call	900 <__alt_mem_onchip_mem-0x7700>
    8c6c:	00008c44 	movi	zero,561
    8c70:	00008c44 	movi	zero,561
    8c74:	00008c44 	movi	zero,561
    8c78:	00008c44 	movi	zero,561
    8c7c:	00008c44 	movi	zero,561
    8c80:	00008c44 	movi	zero,561
    8c84:	00008c44 	movi	zero,561
    8c88:	00008c44 	movi	zero,561
    8c8c:	00008c44 	movi	zero,561
    8c90:	00008c44 	movi	zero,561
    8c94:	00009010 	cmplti	zero,zero,576
    8c98:	00008cec 	andhi	zero,zero,563
    8c9c:	00008c44 	movi	zero,561
    8ca0:	00008c44 	movi	zero,561
    8ca4:	00008c44 	movi	zero,561
    8ca8:	00008c44 	movi	zero,561
    8cac:	00008cec 	andhi	zero,zero,563
    8cb0:	00008c44 	movi	zero,561
    8cb4:	00008c44 	movi	zero,561
    8cb8:	00008c44 	movi	zero,561
    8cbc:	00008c44 	movi	zero,561
    8cc0:	00008c44 	movi	zero,561
    8cc4:	00008dd4 	movui	zero,567
    8cc8:	00008c44 	movi	zero,561
    8ccc:	00008c44 	movi	zero,561
    8cd0:	00008c44 	movi	zero,561
    8cd4:	0000905c 	xori	zero,zero,577
    8cd8:	00008c44 	movi	zero,561
    8cdc:	00008dd8 	cmpnei	zero,zero,567
    8ce0:	00008c44 	movi	zero,561
    8ce4:	00008c44 	movi	zero,561
    8ce8:	00009008 	cmpgei	zero,zero,576
    8cec:	d8c00d17 	ldw	r3,52(sp)
    8cf0:	18003926 	beq	r3,zero,8dd8 <___vfprintf_internal_r+0x350>
    8cf4:	d9000e17 	ldw	r4,56(sp)
    8cf8:	00c00044 	movi	r3,1
    8cfc:	25400017 	ldw	r21,0(r4)
    8d00:	21000104 	addi	r4,r4,4
    8d04:	d9000e15 	stw	r4,56(sp)
    8d08:	d8c00d15 	stw	r3,52(sp)
    8d0c:	a8012116 	blt	r21,zero,9194 <___vfprintf_internal_r+0x70c>
    8d10:	d8001215 	stw	zero,72(sp)
    8d14:	d823883a 	mov	r17,sp
    8d18:	a800371e 	bne	r21,zero,8df8 <___vfprintf_internal_r+0x370>
    8d1c:	d9400b17 	ldw	r5,44(sp)
    8d20:	d809883a 	mov	r4,sp
    8d24:	01400b0e 	bge	zero,r5,8d54 <___vfprintf_internal_r+0x2cc>
    8d28:	d8800b17 	ldw	r2,44(sp)
    8d2c:	d823883a 	mov	r17,sp
    8d30:	00c00c04 	movi	r3,48
    8d34:	00000206 	br	8d40 <___vfprintf_internal_r+0x2b8>
    8d38:	d9400a17 	ldw	r5,40(sp)
    8d3c:	89400426 	beq	r17,r5,8d50 <___vfprintf_internal_r+0x2c8>
    8d40:	88c00005 	stb	r3,0(r17)
    8d44:	10bfffc4 	addi	r2,r2,-1
    8d48:	8c400044 	addi	r17,r17,1
    8d4c:	103ffa1e 	bne	r2,zero,8d38 <___vfprintf_internal_r+0x2b0>
    8d50:	892bc83a 	sub	r21,r17,r4
    8d54:	d8c01217 	ldw	r3,72(sp)
    8d58:	d9000c17 	ldw	r4,48(sp)
    8d5c:	a8c5883a 	add	r2,r21,r3
    8d60:	d8c01017 	ldw	r3,64(sp)
    8d64:	2085c83a 	sub	r2,r4,r2
    8d68:	d8801115 	stw	r2,68(sp)
    8d6c:	18007f26 	beq	r3,zero,8f6c <___vfprintf_internal_r+0x4e4>
    8d70:	d8c01217 	ldw	r3,72(sp)
    8d74:	1800fa1e 	bne	r3,zero,9160 <___vfprintf_internal_r+0x6d8>
    8d78:	d8c01117 	ldw	r3,68(sp)
    8d7c:	00c0620e 	bge	zero,r3,8f08 <___vfprintf_internal_r+0x480>
    8d80:	00800c04 	movi	r2,48
    8d84:	d88008c5 	stb	r2,35(sp)
    8d88:	b805883a 	mov	r2,r23
    8d8c:	dc001215 	stw	r16,72(sp)
    8d90:	882f883a 	mov	r23,r17
    8d94:	1f3fffc4 	addi	fp,r3,-1
    8d98:	05bfffc4 	movi	r22,-1
    8d9c:	dc000f17 	ldw	r16,60(sp)
    8da0:	1023883a 	mov	r17,r2
    8da4:	00000206 	br	8db0 <___vfprintf_internal_r+0x328>
    8da8:	e73fffc4 	addi	fp,fp,-1
    8dac:	e580fc26 	beq	fp,r22,91a0 <___vfprintf_internal_r+0x718>
    8db0:	88800117 	ldw	r2,4(r17)
    8db4:	8009883a 	mov	r4,r16
    8db8:	880b883a 	mov	r5,r17
    8dbc:	d98008c4 	addi	r6,sp,35
    8dc0:	01c00044 	movi	r7,1
    8dc4:	103ee83a 	callr	r2
    8dc8:	103ff726 	beq	r2,zero,8da8 <___vfprintf_internal_r+0x320>
    8dcc:	04bfffc4 	movi	r18,-1
    8dd0:	003f6206 	br	8b5c <___vfprintf_internal_r+0xd4>
    8dd4:	05000204 	movi	r20,8
    8dd8:	d9400e17 	ldw	r5,56(sp)
    8ddc:	2d400017 	ldw	r21,0(r5)
    8de0:	29400104 	addi	r5,r5,4
    8de4:	d9400e15 	stw	r5,56(sp)
    8de8:	d8000d15 	stw	zero,52(sp)
    8dec:	d8001215 	stw	zero,72(sp)
    8df0:	d823883a 	mov	r17,sp
    8df4:	a83fc926 	beq	r21,zero,8d1c <___vfprintf_internal_r+0x294>
    8df8:	05800244 	movi	r22,9
    8dfc:	dc001115 	stw	r16,68(sp)
    8e00:	df001417 	ldw	fp,80(sp)
    8e04:	00000506 	br	8e1c <___vfprintf_internal_r+0x394>
    8e08:	15400c04 	addi	r21,r2,48
    8e0c:	8d400005 	stb	r21,0(r17)
    8e10:	802b883a 	mov	r21,r16
    8e14:	8c400044 	addi	r17,r17,1
    8e18:	80000f26 	beq	r16,zero,8e58 <___vfprintf_internal_r+0x3d0>
    8e1c:	a809883a 	mov	r4,r21
    8e20:	a00b883a 	mov	r5,r20
    8e24:	00094740 	call	9474 <__udivsi3>
    8e28:	a009883a 	mov	r4,r20
    8e2c:	100b883a 	mov	r5,r2
    8e30:	1021883a 	mov	r16,r2
    8e34:	00094840 	call	9484 <__mulsi3>
    8e38:	a885c83a 	sub	r2,r21,r2
    8e3c:	b0bff20e 	bge	r22,r2,8e08 <___vfprintf_internal_r+0x380>
    8e40:	e0000e26 	beq	fp,zero,8e7c <___vfprintf_internal_r+0x3f4>
    8e44:	15400dc4 	addi	r21,r2,55
    8e48:	8d400005 	stb	r21,0(r17)
    8e4c:	802b883a 	mov	r21,r16
    8e50:	8c400044 	addi	r17,r17,1
    8e54:	803ff11e 	bne	r16,zero,8e1c <___vfprintf_internal_r+0x394>
    8e58:	d9000b17 	ldw	r4,44(sp)
    8e5c:	8eebc83a 	sub	r21,r17,sp
    8e60:	dc001117 	ldw	r16,68(sp)
    8e64:	2545c83a 	sub	r2,r4,r21
    8e68:	d809883a 	mov	r4,sp
    8e6c:	00bfb90e 	bge	zero,r2,8d54 <___vfprintf_internal_r+0x2cc>
    8e70:	d8c00a17 	ldw	r3,40(sp)
    8e74:	88ffae36 	bltu	r17,r3,8d30 <___vfprintf_internal_r+0x2a8>
    8e78:	003fb606 	br	8d54 <___vfprintf_internal_r+0x2cc>
    8e7c:	154015c4 	addi	r21,r2,87
    8e80:	003fe206 	br	8e0c <___vfprintf_internal_r+0x384>
    8e84:	00c00044 	movi	r3,1
    8e88:	013fffc4 	movi	r4,-1
    8e8c:	d8c00d15 	stw	r3,52(sp)
    8e90:	d9000b15 	stw	r4,44(sp)
    8e94:	d8001415 	stw	zero,80(sp)
    8e98:	05000284 	movi	r20,10
    8e9c:	d9000c15 	stw	r4,48(sp)
    8ea0:	d8001315 	stw	zero,76(sp)
    8ea4:	d8001015 	stw	zero,64(sp)
    8ea8:	182b883a 	mov	r21,r3
    8eac:	003f1106 	br	8af4 <___vfprintf_internal_r+0x6c>
    8eb0:	00c00044 	movi	r3,1
    8eb4:	d8c01315 	stw	r3,76(sp)
    8eb8:	054000c4 	movi	r21,3
    8ebc:	003f0d06 	br	8af4 <___vfprintf_internal_r+0x6c>
    8ec0:	d8c01117 	ldw	r3,68(sp)
    8ec4:	dc001517 	ldw	r16,84(sp)
    8ec8:	8805883a 	mov	r2,r17
    8ecc:	90e5883a 	add	r18,r18,r3
    8ed0:	b823883a 	mov	r17,r23
    8ed4:	102f883a 	mov	r23,r2
    8ed8:	d8c01217 	ldw	r3,72(sp)
    8edc:	18000a26 	beq	r3,zero,8f08 <___vfprintf_internal_r+0x480>
    8ee0:	b8800117 	ldw	r2,4(r23)
    8ee4:	d9000f17 	ldw	r4,60(sp)
    8ee8:	00c00b44 	movi	r3,45
    8eec:	d8c00905 	stb	r3,36(sp)
    8ef0:	b80b883a 	mov	r5,r23
    8ef4:	d9800904 	addi	r6,sp,36
    8ef8:	01c00044 	movi	r7,1
    8efc:	103ee83a 	callr	r2
    8f00:	103fb21e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    8f04:	94800044 	addi	r18,r18,1
    8f08:	8d6dc83a 	sub	r22,r17,r21
    8f0c:	057f4d0e 	bge	zero,r21,8c44 <___vfprintf_internal_r+0x1bc>
    8f10:	dd400f17 	ldw	r21,60(sp)
    8f14:	00000206 	br	8f20 <___vfprintf_internal_r+0x498>
    8f18:	94800044 	addi	r18,r18,1
    8f1c:	8dbf4926 	beq	r17,r22,8c44 <___vfprintf_internal_r+0x1bc>
    8f20:	8c7fffc4 	addi	r17,r17,-1
    8f24:	88c00003 	ldbu	r3,0(r17)
    8f28:	b8800117 	ldw	r2,4(r23)
    8f2c:	a809883a 	mov	r4,r21
    8f30:	d8c00905 	stb	r3,36(sp)
    8f34:	b80b883a 	mov	r5,r23
    8f38:	d9800904 	addi	r6,sp,36
    8f3c:	01c00044 	movi	r7,1
    8f40:	103ee83a 	callr	r2
    8f44:	103ff426 	beq	r2,zero,8f18 <___vfprintf_internal_r+0x490>
    8f48:	04bfffc4 	movi	r18,-1
    8f4c:	003f0306 	br	8b5c <___vfprintf_internal_r+0xd4>
    8f50:	dd401015 	stw	r21,64(sp)
    8f54:	05400084 	movi	r21,2
    8f58:	003ee606 	br	8af4 <___vfprintf_internal_r+0x6c>
    8f5c:	0005883a 	mov	r2,zero
    8f60:	003f2806 	br	8c04 <___vfprintf_internal_r+0x17c>
    8f64:	0005883a 	mov	r2,zero
    8f68:	003f1606 	br	8bc4 <___vfprintf_internal_r+0x13c>
    8f6c:	d8c01117 	ldw	r3,68(sp)
    8f70:	00ffd90e 	bge	zero,r3,8ed8 <___vfprintf_internal_r+0x450>
    8f74:	00800804 	movi	r2,32
    8f78:	d8800885 	stb	r2,34(sp)
    8f7c:	b805883a 	mov	r2,r23
    8f80:	dc001515 	stw	r16,84(sp)
    8f84:	882f883a 	mov	r23,r17
    8f88:	1f3fffc4 	addi	fp,r3,-1
    8f8c:	05bfffc4 	movi	r22,-1
    8f90:	dc000f17 	ldw	r16,60(sp)
    8f94:	1023883a 	mov	r17,r2
    8f98:	00000206 	br	8fa4 <___vfprintf_internal_r+0x51c>
    8f9c:	e73fffc4 	addi	fp,fp,-1
    8fa0:	e5bfc726 	beq	fp,r22,8ec0 <___vfprintf_internal_r+0x438>
    8fa4:	88800117 	ldw	r2,4(r17)
    8fa8:	8009883a 	mov	r4,r16
    8fac:	880b883a 	mov	r5,r17
    8fb0:	d9800884 	addi	r6,sp,34
    8fb4:	01c00044 	movi	r7,1
    8fb8:	103ee83a 	callr	r2
    8fbc:	103ff726 	beq	r2,zero,8f9c <___vfprintf_internal_r+0x514>
    8fc0:	04bfffc4 	movi	r18,-1
    8fc4:	003ee506 	br	8b5c <___vfprintf_internal_r+0xd4>
    8fc8:	01000044 	movi	r4,1
    8fcc:	d9000b15 	stw	r4,44(sp)
    8fd0:	003f1806 	br	8c34 <___vfprintf_internal_r+0x1ac>
    8fd4:	b8c00117 	ldw	r3,4(r23)
    8fd8:	d9000f17 	ldw	r4,60(sp)
    8fdc:	d8800905 	stb	r2,36(sp)
    8fe0:	b80b883a 	mov	r5,r23
    8fe4:	d9800904 	addi	r6,sp,36
    8fe8:	a80f883a 	mov	r7,r21
    8fec:	183ee83a 	callr	r3
    8ff0:	103f761e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    8ff4:	94800044 	addi	r18,r18,1
    8ff8:	002b883a 	mov	r21,zero
    8ffc:	003ebd06 	br	8af4 <___vfprintf_internal_r+0x6c>
    9000:	00c00044 	movi	r3,1
    9004:	d8c01415 	stw	r3,80(sp)
    9008:	05000404 	movi	r20,16
    900c:	003f7206 	br	8dd8 <___vfprintf_internal_r+0x350>
    9010:	d9000c17 	ldw	r4,48(sp)
    9014:	9900420e 	bge	r19,r4,9120 <___vfprintf_internal_r+0x698>
    9018:	df000f17 	ldw	fp,60(sp)
    901c:	25bfffc4 	addi	r22,r4,-1
    9020:	00800804 	movi	r2,32
    9024:	d8800845 	stb	r2,33(sp)
    9028:	b023883a 	mov	r17,r22
    902c:	057fffc4 	movi	r21,-1
    9030:	8c7fffc4 	addi	r17,r17,-1
    9034:	8d403926 	beq	r17,r21,911c <___vfprintf_internal_r+0x694>
    9038:	b8800117 	ldw	r2,4(r23)
    903c:	e009883a 	mov	r4,fp
    9040:	b80b883a 	mov	r5,r23
    9044:	d9800844 	addi	r6,sp,33
    9048:	01c00044 	movi	r7,1
    904c:	103ee83a 	callr	r2
    9050:	103ff726 	beq	r2,zero,9030 <___vfprintf_internal_r+0x5a8>
    9054:	04bfffc4 	movi	r18,-1
    9058:	003ec006 	br	8b5c <___vfprintf_internal_r+0xd4>
    905c:	d9000e17 	ldw	r4,56(sp)
    9060:	d8c00e17 	ldw	r3,56(sp)
    9064:	21000017 	ldw	r4,0(r4)
    9068:	18c00104 	addi	r3,r3,4
    906c:	d8c00e15 	stw	r3,56(sp)
    9070:	d9001215 	stw	r4,72(sp)
    9074:	00092c00 	call	92c0 <strlen>
    9078:	d9000c17 	ldw	r4,48(sp)
    907c:	102d883a 	mov	r22,r2
    9080:	20b9c83a 	sub	fp,r4,r2
    9084:	07001b0e 	bge	zero,fp,90f4 <___vfprintf_internal_r+0x66c>
    9088:	00800804 	movi	r2,32
    908c:	d8800805 	stb	r2,32(sp)
    9090:	b805883a 	mov	r2,r23
    9094:	dc001115 	stw	r16,68(sp)
    9098:	b02f883a 	mov	r23,r22
    909c:	e47fffc4 	addi	r17,fp,-1
    90a0:	902d883a 	mov	r22,r18
    90a4:	057fffc4 	movi	r21,-1
    90a8:	dc000f17 	ldw	r16,60(sp)
    90ac:	1025883a 	mov	r18,r2
    90b0:	00000206 	br	90bc <___vfprintf_internal_r+0x634>
    90b4:	8c7fffc4 	addi	r17,r17,-1
    90b8:	8d400826 	beq	r17,r21,90dc <___vfprintf_internal_r+0x654>
    90bc:	90800117 	ldw	r2,4(r18)
    90c0:	8009883a 	mov	r4,r16
    90c4:	900b883a 	mov	r5,r18
    90c8:	d9800804 	addi	r6,sp,32
    90cc:	01c00044 	movi	r7,1
    90d0:	103ee83a 	callr	r2
    90d4:	103ff726 	beq	r2,zero,90b4 <___vfprintf_internal_r+0x62c>
    90d8:	003f3c06 	br	8dcc <___vfprintf_internal_r+0x344>
    90dc:	dc001117 	ldw	r16,68(sp)
    90e0:	9005883a 	mov	r2,r18
    90e4:	b025883a 	mov	r18,r22
    90e8:	9725883a 	add	r18,r18,fp
    90ec:	b82d883a 	mov	r22,r23
    90f0:	102f883a 	mov	r23,r2
    90f4:	b8800117 	ldw	r2,4(r23)
    90f8:	d9000f17 	ldw	r4,60(sp)
    90fc:	d9801217 	ldw	r6,72(sp)
    9100:	b80b883a 	mov	r5,r23
    9104:	b00f883a 	mov	r7,r22
    9108:	103ee83a 	callr	r2
    910c:	103f2f1e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    9110:	95a5883a 	add	r18,r18,r22
    9114:	002b883a 	mov	r21,zero
    9118:	003e7606 	br	8af4 <___vfprintf_internal_r+0x6c>
    911c:	95a5883a 	add	r18,r18,r22
    9120:	d9400e17 	ldw	r5,56(sp)
    9124:	b8800117 	ldw	r2,4(r23)
    9128:	d9000f17 	ldw	r4,60(sp)
    912c:	28c00017 	ldw	r3,0(r5)
    9130:	d9800904 	addi	r6,sp,36
    9134:	b80b883a 	mov	r5,r23
    9138:	d8c00905 	stb	r3,36(sp)
    913c:	d8c00e17 	ldw	r3,56(sp)
    9140:	01c00044 	movi	r7,1
    9144:	1c400104 	addi	r17,r3,4
    9148:	103ee83a 	callr	r2
    914c:	103f1f1e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    9150:	94800044 	addi	r18,r18,1
    9154:	dc400e15 	stw	r17,56(sp)
    9158:	002b883a 	mov	r21,zero
    915c:	003e6506 	br	8af4 <___vfprintf_internal_r+0x6c>
    9160:	b8800117 	ldw	r2,4(r23)
    9164:	d9000f17 	ldw	r4,60(sp)
    9168:	00c00b44 	movi	r3,45
    916c:	d8c00905 	stb	r3,36(sp)
    9170:	b80b883a 	mov	r5,r23
    9174:	d9800904 	addi	r6,sp,36
    9178:	01c00044 	movi	r7,1
    917c:	103ee83a 	callr	r2
    9180:	103f121e 	bne	r2,zero,8dcc <___vfprintf_internal_r+0x344>
    9184:	d8c01117 	ldw	r3,68(sp)
    9188:	94800044 	addi	r18,r18,1
    918c:	00fefc16 	blt	zero,r3,8d80 <___vfprintf_internal_r+0x2f8>
    9190:	003f5d06 	br	8f08 <___vfprintf_internal_r+0x480>
    9194:	056bc83a 	sub	r21,zero,r21
    9198:	d8c01215 	stw	r3,72(sp)
    919c:	003f1406 	br	8df0 <___vfprintf_internal_r+0x368>
    91a0:	d8c01117 	ldw	r3,68(sp)
    91a4:	8805883a 	mov	r2,r17
    91a8:	dc001217 	ldw	r16,72(sp)
    91ac:	b823883a 	mov	r17,r23
    91b0:	90e5883a 	add	r18,r18,r3
    91b4:	102f883a 	mov	r23,r2
    91b8:	003f5306 	br	8f08 <___vfprintf_internal_r+0x480>

000091bc <__vfprintf_internal>:
    91bc:	00800074 	movhi	r2,1
    91c0:	10ac7304 	addi	r2,r2,-20020
    91c4:	2007883a 	mov	r3,r4
    91c8:	11000017 	ldw	r4,0(r2)
    91cc:	2805883a 	mov	r2,r5
    91d0:	300f883a 	mov	r7,r6
    91d4:	180b883a 	mov	r5,r3
    91d8:	100d883a 	mov	r6,r2
    91dc:	0008a881 	jmpi	8a88 <___vfprintf_internal_r>

000091e0 <__sfvwrite_small_dev>:
    91e0:	2880000b 	ldhu	r2,0(r5)
    91e4:	defffa04 	addi	sp,sp,-24
    91e8:	dcc00315 	stw	r19,12(sp)
    91ec:	10c0020c 	andi	r3,r2,8
    91f0:	18ffffcc 	andi	r3,r3,65535
    91f4:	18e0001c 	xori	r3,r3,32768
    91f8:	dc800215 	stw	r18,8(sp)
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	dfc00515 	stw	ra,20(sp)
    9204:	dd000415 	stw	r20,16(sp)
    9208:	dc000015 	stw	r16,0(sp)
    920c:	18e00004 	addi	r3,r3,-32768
    9210:	2825883a 	mov	r18,r5
    9214:	2027883a 	mov	r19,r4
    9218:	3023883a 	mov	r17,r6
    921c:	18002626 	beq	r3,zero,92b8 <__sfvwrite_small_dev+0xd8>
    9220:	2940008f 	ldh	r5,2(r5)
    9224:	28001016 	blt	r5,zero,9268 <__sfvwrite_small_dev+0x88>
    9228:	01c01a0e 	bge	zero,r7,9294 <__sfvwrite_small_dev+0xb4>
    922c:	3821883a 	mov	r16,r7
    9230:	05010004 	movi	r20,1024
    9234:	00000306 	br	9244 <__sfvwrite_small_dev+0x64>
    9238:	88a3883a 	add	r17,r17,r2
    923c:	0400150e 	bge	zero,r16,9294 <__sfvwrite_small_dev+0xb4>
    9240:	9140008f 	ldh	r5,2(r18)
    9244:	880d883a 	mov	r6,r17
    9248:	9809883a 	mov	r4,r19
    924c:	800f883a 	mov	r7,r16
    9250:	a400010e 	bge	r20,r16,9258 <__sfvwrite_small_dev+0x78>
    9254:	01c10004 	movi	r7,1024
    9258:	00092e80 	call	92e8 <_write_r>
    925c:	80a1c83a 	sub	r16,r16,r2
    9260:	00bff516 	blt	zero,r2,9238 <__sfvwrite_small_dev+0x58>
    9264:	9080000b 	ldhu	r2,0(r18)
    9268:	10801014 	ori	r2,r2,64
    926c:	9080000d 	sth	r2,0(r18)
    9270:	00bfffc4 	movi	r2,-1
    9274:	dfc00517 	ldw	ra,20(sp)
    9278:	dd000417 	ldw	r20,16(sp)
    927c:	dcc00317 	ldw	r19,12(sp)
    9280:	dc800217 	ldw	r18,8(sp)
    9284:	dc400117 	ldw	r17,4(sp)
    9288:	dc000017 	ldw	r16,0(sp)
    928c:	dec00604 	addi	sp,sp,24
    9290:	f800283a 	ret
    9294:	0005883a 	mov	r2,zero
    9298:	dfc00517 	ldw	ra,20(sp)
    929c:	dd000417 	ldw	r20,16(sp)
    92a0:	dcc00317 	ldw	r19,12(sp)
    92a4:	dc800217 	ldw	r18,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00604 	addi	sp,sp,24
    92b4:	f800283a 	ret
    92b8:	00bfffc4 	movi	r2,-1
    92bc:	003fed06 	br	9274 <__sfvwrite_small_dev+0x94>

000092c0 <strlen>:
    92c0:	20800007 	ldb	r2,0(r4)
    92c4:	10000626 	beq	r2,zero,92e0 <strlen+0x20>
    92c8:	2005883a 	mov	r2,r4
    92cc:	10800044 	addi	r2,r2,1
    92d0:	10c00007 	ldb	r3,0(r2)
    92d4:	183ffd1e 	bne	r3,zero,92cc <strlen+0xc>
    92d8:	1105c83a 	sub	r2,r2,r4
    92dc:	f800283a 	ret
    92e0:	0005883a 	mov	r2,zero
    92e4:	f800283a 	ret

000092e8 <_write_r>:
    92e8:	defffd04 	addi	sp,sp,-12
    92ec:	dc400115 	stw	r17,4(sp)
    92f0:	dc000015 	stw	r16,0(sp)
    92f4:	2023883a 	mov	r17,r4
    92f8:	04000074 	movhi	r16,1
    92fc:	842d3704 	addi	r16,r16,-19236
    9300:	2809883a 	mov	r4,r5
    9304:	300b883a 	mov	r5,r6
    9308:	380d883a 	mov	r6,r7
    930c:	dfc00215 	stw	ra,8(sp)
    9310:	80000015 	stw	zero,0(r16)
    9314:	00096800 	call	9680 <write>
    9318:	00ffffc4 	movi	r3,-1
    931c:	10c00526 	beq	r2,r3,9334 <_write_r+0x4c>
    9320:	dfc00217 	ldw	ra,8(sp)
    9324:	dc400117 	ldw	r17,4(sp)
    9328:	dc000017 	ldw	r16,0(sp)
    932c:	dec00304 	addi	sp,sp,12
    9330:	f800283a 	ret
    9334:	80c00017 	ldw	r3,0(r16)
    9338:	183ff926 	beq	r3,zero,9320 <_write_r+0x38>
    933c:	88c00015 	stw	r3,0(r17)
    9340:	dfc00217 	ldw	ra,8(sp)
    9344:	dc400117 	ldw	r17,4(sp)
    9348:	dc000017 	ldw	r16,0(sp)
    934c:	dec00304 	addi	sp,sp,12
    9350:	f800283a 	ret

00009354 <udivmodsi4>:
    9354:	2005883a 	mov	r2,r4
    9358:	2900182e 	bgeu	r5,r4,93bc <udivmodsi4+0x68>
    935c:	28001716 	blt	r5,zero,93bc <udivmodsi4+0x68>
    9360:	01000804 	movi	r4,32
    9364:	00c00044 	movi	r3,1
    9368:	00000206 	br	9374 <udivmodsi4+0x20>
    936c:	20001126 	beq	r4,zero,93b4 <udivmodsi4+0x60>
    9370:	28000516 	blt	r5,zero,9388 <udivmodsi4+0x34>
    9374:	294b883a 	add	r5,r5,r5
    9378:	213fffc4 	addi	r4,r4,-1
    937c:	18c7883a 	add	r3,r3,r3
    9380:	28bffa36 	bltu	r5,r2,936c <udivmodsi4+0x18>
    9384:	18000b26 	beq	r3,zero,93b4 <udivmodsi4+0x60>
    9388:	0009883a 	mov	r4,zero
    938c:	11400236 	bltu	r2,r5,9398 <udivmodsi4+0x44>
    9390:	1145c83a 	sub	r2,r2,r5
    9394:	20c8b03a 	or	r4,r4,r3
    9398:	1806d07a 	srli	r3,r3,1
    939c:	280ad07a 	srli	r5,r5,1
    93a0:	183ffa1e 	bne	r3,zero,938c <udivmodsi4+0x38>
    93a4:	3000021e 	bne	r6,zero,93b0 <udivmodsi4+0x5c>
    93a8:	2005883a 	mov	r2,r4
    93ac:	f800283a 	ret
    93b0:	f800283a 	ret
    93b4:	0009883a 	mov	r4,zero
    93b8:	003ffa06 	br	93a4 <udivmodsi4+0x50>
    93bc:	00c00044 	movi	r3,1
    93c0:	0009883a 	mov	r4,zero
    93c4:	003ff106 	br	938c <udivmodsi4+0x38>

000093c8 <__divsi3>:
    93c8:	defffe04 	addi	sp,sp,-8
    93cc:	dfc00115 	stw	ra,4(sp)
    93d0:	dc000015 	stw	r16,0(sp)
    93d4:	20000a16 	blt	r4,zero,9400 <__divsi3+0x38>
    93d8:	0021883a 	mov	r16,zero
    93dc:	28000b16 	blt	r5,zero,940c <__divsi3+0x44>
    93e0:	000d883a 	mov	r6,zero
    93e4:	00093540 	call	9354 <udivmodsi4>
    93e8:	80000126 	beq	r16,zero,93f0 <__divsi3+0x28>
    93ec:	0085c83a 	sub	r2,zero,r2
    93f0:	dfc00117 	ldw	ra,4(sp)
    93f4:	dc000017 	ldw	r16,0(sp)
    93f8:	dec00204 	addi	sp,sp,8
    93fc:	f800283a 	ret
    9400:	0109c83a 	sub	r4,zero,r4
    9404:	04000044 	movi	r16,1
    9408:	283ff50e 	bge	r5,zero,93e0 <__divsi3+0x18>
    940c:	014bc83a 	sub	r5,zero,r5
    9410:	8400005c 	xori	r16,r16,1
    9414:	003ff206 	br	93e0 <__divsi3+0x18>

00009418 <__modsi3>:
    9418:	deffff04 	addi	sp,sp,-4
    941c:	dfc00015 	stw	ra,0(sp)
    9420:	20000516 	blt	r4,zero,9438 <__modsi3+0x20>
    9424:	28000c16 	blt	r5,zero,9458 <__modsi3+0x40>
    9428:	01800044 	movi	r6,1
    942c:	dfc00017 	ldw	ra,0(sp)
    9430:	dec00104 	addi	sp,sp,4
    9434:	00093541 	jmpi	9354 <udivmodsi4>
    9438:	0109c83a 	sub	r4,zero,r4
    943c:	28000b16 	blt	r5,zero,946c <__modsi3+0x54>
    9440:	01800044 	movi	r6,1
    9444:	00093540 	call	9354 <udivmodsi4>
    9448:	0085c83a 	sub	r2,zero,r2
    944c:	dfc00017 	ldw	ra,0(sp)
    9450:	dec00104 	addi	sp,sp,4
    9454:	f800283a 	ret
    9458:	014bc83a 	sub	r5,zero,r5
    945c:	01800044 	movi	r6,1
    9460:	dfc00017 	ldw	ra,0(sp)
    9464:	dec00104 	addi	sp,sp,4
    9468:	00093541 	jmpi	9354 <udivmodsi4>
    946c:	014bc83a 	sub	r5,zero,r5
    9470:	003ff306 	br	9440 <__modsi3+0x28>

00009474 <__udivsi3>:
    9474:	000d883a 	mov	r6,zero
    9478:	00093541 	jmpi	9354 <udivmodsi4>

0000947c <__umodsi3>:
    947c:	01800044 	movi	r6,1
    9480:	00093541 	jmpi	9354 <udivmodsi4>

00009484 <__mulsi3>:
    9484:	0005883a 	mov	r2,zero
    9488:	20000726 	beq	r4,zero,94a8 <__mulsi3+0x24>
    948c:	20c0004c 	andi	r3,r4,1
    9490:	2008d07a 	srli	r4,r4,1
    9494:	18000126 	beq	r3,zero,949c <__mulsi3+0x18>
    9498:	1145883a 	add	r2,r2,r5
    949c:	294b883a 	add	r5,r5,r5
    94a0:	203ffa1e 	bne	r4,zero,948c <__mulsi3+0x8>
    94a4:	f800283a 	ret
    94a8:	f800283a 	ret

000094ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    94ac:	defffc04 	addi	sp,sp,-16
    94b0:	df000315 	stw	fp,12(sp)
    94b4:	df000304 	addi	fp,sp,12
    94b8:	e13ffd15 	stw	r4,-12(fp)
    94bc:	e17ffe15 	stw	r5,-8(fp)
    94c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    94c4:	e0fffe17 	ldw	r3,-8(fp)
    94c8:	e0bffd17 	ldw	r2,-12(fp)
    94cc:	18800e26 	beq	r3,r2,9508 <alt_load_section+0x5c>
  {
    while( to != end )
    94d0:	00000a06 	br	94fc <alt_load_section+0x50>
    {
      *to++ = *from++;
    94d4:	e0bffd17 	ldw	r2,-12(fp)
    94d8:	10c00017 	ldw	r3,0(r2)
    94dc:	e0bffe17 	ldw	r2,-8(fp)
    94e0:	10c00015 	stw	r3,0(r2)
    94e4:	e0bffe17 	ldw	r2,-8(fp)
    94e8:	10800104 	addi	r2,r2,4
    94ec:	e0bffe15 	stw	r2,-8(fp)
    94f0:	e0bffd17 	ldw	r2,-12(fp)
    94f4:	10800104 	addi	r2,r2,4
    94f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    94fc:	e0fffe17 	ldw	r3,-8(fp)
    9500:	e0bfff17 	ldw	r2,-4(fp)
    9504:	18bff31e 	bne	r3,r2,94d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9508:	e037883a 	mov	sp,fp
    950c:	df000017 	ldw	fp,0(sp)
    9510:	dec00104 	addi	sp,sp,4
    9514:	f800283a 	ret

00009518 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9518:	defffe04 	addi	sp,sp,-8
    951c:	dfc00115 	stw	ra,4(sp)
    9520:	df000015 	stw	fp,0(sp)
    9524:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9528:	01000074 	movhi	r4,1
    952c:	212c7d04 	addi	r4,r4,-19980
    9530:	01400074 	movhi	r5,1
    9534:	296bc504 	addi	r5,r5,-20716
    9538:	01800074 	movhi	r6,1
    953c:	31ac7d04 	addi	r6,r6,-19980
    9540:	00094ac0 	call	94ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9544:	01000074 	movhi	r4,1
    9548:	21200804 	addi	r4,r4,-32736
    954c:	01400074 	movhi	r5,1
    9550:	29600804 	addi	r5,r5,-32736
    9554:	01800074 	movhi	r6,1
    9558:	31a06e04 	addi	r6,r6,-32328
    955c:	00094ac0 	call	94ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9560:	01000074 	movhi	r4,1
    9564:	212b6f04 	addi	r4,r4,-21060
    9568:	01400074 	movhi	r5,1
    956c:	296b6f04 	addi	r5,r5,-21060
    9570:	01800074 	movhi	r6,1
    9574:	31abc504 	addi	r6,r6,-20716
    9578:	00094ac0 	call	94ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    957c:	0009de00 	call	9de0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9580:	0009f180 	call	9f18 <alt_icache_flush_all>
}
    9584:	e037883a 	mov	sp,fp
    9588:	dfc00117 	ldw	ra,4(sp)
    958c:	df000017 	ldw	fp,0(sp)
    9590:	dec00204 	addi	sp,sp,8
    9594:	f800283a 	ret

00009598 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9598:	defffd04 	addi	sp,sp,-12
    959c:	dfc00215 	stw	ra,8(sp)
    95a0:	df000115 	stw	fp,4(sp)
    95a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    95a8:	0009883a 	mov	r4,zero
    95ac:	00097a80 	call	97a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    95b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    95b4:	00097dc0 	call	97dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    95b8:	01000074 	movhi	r4,1
    95bc:	212bba04 	addi	r4,r4,-20760
    95c0:	01400074 	movhi	r5,1
    95c4:	296bba04 	addi	r5,r5,-20760
    95c8:	01800074 	movhi	r6,1
    95cc:	31abba04 	addi	r6,r6,-20760
    95d0:	000a2f00 	call	a2f0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    95d4:	d120c617 	ldw	r4,-31976(gp)
    95d8:	d0e0c717 	ldw	r3,-31972(gp)
    95dc:	d0a0c817 	ldw	r2,-31968(gp)
    95e0:	180b883a 	mov	r5,r3
    95e4:	100d883a 	mov	r6,r2
    95e8:	00082e00 	call	82e0 <main>
    95ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    95f0:	01000044 	movi	r4,1
    95f4:	0009d140 	call	9d14 <close>
  exit (result);
    95f8:	e13fff17 	ldw	r4,-4(fp)
    95fc:	000ab400 	call	ab40 <exit>

00009600 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9600:	defffd04 	addi	sp,sp,-12
    9604:	dfc00215 	stw	ra,8(sp)
    9608:	df000115 	stw	fp,4(sp)
    960c:	df000104 	addi	fp,sp,4
    9610:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9614:	e13fff17 	ldw	r4,-4(fp)
    9618:	0009b700 	call	9b70 <alt_busy_sleep>
}
    961c:	e037883a 	mov	sp,fp
    9620:	dfc00117 	ldw	ra,4(sp)
    9624:	df000017 	ldw	fp,0(sp)
    9628:	dec00204 	addi	sp,sp,8
    962c:	f800283a 	ret

00009630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9630:	defffe04 	addi	sp,sp,-8
    9634:	dfc00115 	stw	ra,4(sp)
    9638:	df000015 	stw	fp,0(sp)
    963c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9640:	00800074 	movhi	r2,1
    9644:	10ac7904 	addi	r2,r2,-19996
    9648:	10800017 	ldw	r2,0(r2)
    964c:	10000526 	beq	r2,zero,9664 <alt_get_errno+0x34>
    9650:	00800074 	movhi	r2,1
    9654:	10ac7904 	addi	r2,r2,-19996
    9658:	10800017 	ldw	r2,0(r2)
    965c:	103ee83a 	callr	r2
    9660:	00000206 	br	966c <alt_get_errno+0x3c>
    9664:	00800074 	movhi	r2,1
    9668:	10ad3704 	addi	r2,r2,-19236
}
    966c:	e037883a 	mov	sp,fp
    9670:	dfc00117 	ldw	ra,4(sp)
    9674:	df000017 	ldw	fp,0(sp)
    9678:	dec00204 	addi	sp,sp,8
    967c:	f800283a 	ret

00009680 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9680:	defff904 	addi	sp,sp,-28
    9684:	dfc00615 	stw	ra,24(sp)
    9688:	df000515 	stw	fp,20(sp)
    968c:	df000504 	addi	fp,sp,20
    9690:	e13ffd15 	stw	r4,-12(fp)
    9694:	e17ffe15 	stw	r5,-8(fp)
    9698:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    969c:	e0bffd17 	ldw	r2,-12(fp)
    96a0:	10000716 	blt	r2,zero,96c0 <write+0x40>
    96a4:	e13ffd17 	ldw	r4,-12(fp)
    96a8:	01400304 	movi	r5,12
    96ac:	00094840 	call	9484 <__mulsi3>
    96b0:	00c00074 	movhi	r3,1
    96b4:	18ec1204 	addi	r3,r3,-20408
    96b8:	10c5883a 	add	r2,r2,r3
    96bc:	00000106 	br	96c4 <write+0x44>
    96c0:	0005883a 	mov	r2,zero
    96c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    96c8:	e0bffb17 	ldw	r2,-20(fp)
    96cc:	10001f26 	beq	r2,zero,974c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    96d0:	e0bffb17 	ldw	r2,-20(fp)
    96d4:	10800217 	ldw	r2,8(r2)
    96d8:	108000cc 	andi	r2,r2,3
    96dc:	10001726 	beq	r2,zero,973c <write+0xbc>
    96e0:	e0bffb17 	ldw	r2,-20(fp)
    96e4:	10800017 	ldw	r2,0(r2)
    96e8:	10800617 	ldw	r2,24(r2)
    96ec:	10001326 	beq	r2,zero,973c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    96f0:	e0bffb17 	ldw	r2,-20(fp)
    96f4:	10800017 	ldw	r2,0(r2)
    96f8:	10c00617 	ldw	r3,24(r2)
    96fc:	e0bfff17 	ldw	r2,-4(fp)
    9700:	e13ffb17 	ldw	r4,-20(fp)
    9704:	e17ffe17 	ldw	r5,-8(fp)
    9708:	100d883a 	mov	r6,r2
    970c:	183ee83a 	callr	r3
    9710:	e0bffc15 	stw	r2,-16(fp)
    9714:	e0bffc17 	ldw	r2,-16(fp)
    9718:	1000060e 	bge	r2,zero,9734 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    971c:	00096300 	call	9630 <alt_get_errno>
    9720:	e0fffc17 	ldw	r3,-16(fp)
    9724:	00c7c83a 	sub	r3,zero,r3
    9728:	10c00015 	stw	r3,0(r2)
        return -1;
    972c:	00bfffc4 	movi	r2,-1
    9730:	00000a06 	br	975c <write+0xdc>
      }
      return rval;
    9734:	e0bffc17 	ldw	r2,-16(fp)
    9738:	00000806 	br	975c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    973c:	00096300 	call	9630 <alt_get_errno>
    9740:	00c00344 	movi	r3,13
    9744:	10c00015 	stw	r3,0(r2)
    9748:	00000306 	br	9758 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    974c:	00096300 	call	9630 <alt_get_errno>
    9750:	00c01444 	movi	r3,81
    9754:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    9758:	00bfffc4 	movi	r2,-1
}
    975c:	e037883a 	mov	sp,fp
    9760:	dfc00117 	ldw	ra,4(sp)
    9764:	df000017 	ldw	fp,0(sp)
    9768:	dec00204 	addi	sp,sp,8
    976c:	f800283a 	ret

00009770 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9770:	defffd04 	addi	sp,sp,-12
    9774:	dfc00215 	stw	ra,8(sp)
    9778:	df000115 	stw	fp,4(sp)
    977c:	df000104 	addi	fp,sp,4
    9780:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9784:	e13fff17 	ldw	r4,-4(fp)
    9788:	01400074 	movhi	r5,1
    978c:	296c7604 	addi	r5,r5,-20008
    9790:	0009e780 	call	9e78 <alt_dev_llist_insert>
}
    9794:	e037883a 	mov	sp,fp
    9798:	dfc00117 	ldw	ra,4(sp)
    979c:	df000017 	ldw	fp,0(sp)
    97a0:	dec00204 	addi	sp,sp,8
    97a4:	f800283a 	ret

000097a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    97a8:	defffd04 	addi	sp,sp,-12
    97ac:	dfc00215 	stw	ra,8(sp)
    97b0:	df000115 	stw	fp,4(sp)
    97b4:	df000104 	addi	fp,sp,4
    97b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    97bc:	000a81c0 	call	a81c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    97c0:	00800044 	movi	r2,1
    97c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    97c8:	e037883a 	mov	sp,fp
    97cc:	dfc00117 	ldw	ra,4(sp)
    97d0:	df000017 	ldw	fp,0(sp)
    97d4:	dec00204 	addi	sp,sp,8
    97d8:	f800283a 	ret

000097dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    97dc:	defffe04 	addi	sp,sp,-8
    97e0:	dfc00115 	stw	ra,4(sp)
    97e4:	df000015 	stw	fp,0(sp)
    97e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    97ec:	01000074 	movhi	r4,1
    97f0:	21040004 	addi	r4,r4,4096
    97f4:	000b883a 	mov	r5,zero
    97f8:	01800044 	movi	r6,1
    97fc:	01c0fa04 	movi	r7,1000
    9800:	0009ae80 	call	9ae8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    9804:	01000074 	movhi	r4,1
    9808:	212bfd04 	addi	r4,r4,-20492
    980c:	00097700 	call	9770 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    9810:	0001883a 	nop
}
    9814:	e037883a 	mov	sp,fp
    9818:	dfc00117 	ldw	ra,4(sp)
    981c:	df000017 	ldw	fp,0(sp)
    9820:	dec00204 	addi	sp,sp,8
    9824:	f800283a 	ret

00009828 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9828:	defffa04 	addi	sp,sp,-24
    982c:	dfc00515 	stw	ra,20(sp)
    9830:	df000415 	stw	fp,16(sp)
    9834:	df000404 	addi	fp,sp,16
    9838:	e13ffd15 	stw	r4,-12(fp)
    983c:	e17ffe15 	stw	r5,-8(fp)
    9840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9844:	e0bffd17 	ldw	r2,-12(fp)
    9848:	10800017 	ldw	r2,0(r2)
    984c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9850:	e0bffc17 	ldw	r2,-16(fp)
    9854:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9858:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    985c:	10800217 	ldw	r2,8(r2)
    9860:	1809883a 	mov	r4,r3
    9864:	e17ffe17 	ldw	r5,-8(fp)
    9868:	e1bfff17 	ldw	r6,-4(fp)
    986c:	100f883a 	mov	r7,r2
    9870:	00098e80 	call	98e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9874:	e037883a 	mov	sp,fp
    9878:	dfc00117 	ldw	ra,4(sp)
    987c:	df000017 	ldw	fp,0(sp)
    9880:	dec00204 	addi	sp,sp,8
    9884:	f800283a 	ret

00009888 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9888:	defffa04 	addi	sp,sp,-24
    988c:	dfc00515 	stw	ra,20(sp)
    9890:	df000415 	stw	fp,16(sp)
    9894:	df000404 	addi	fp,sp,16
    9898:	e13ffd15 	stw	r4,-12(fp)
    989c:	e17ffe15 	stw	r5,-8(fp)
    98a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    98a4:	e0bffd17 	ldw	r2,-12(fp)
    98a8:	10800017 	ldw	r2,0(r2)
    98ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    98b0:	e0bffc17 	ldw	r2,-16(fp)
    98b4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    98b8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    98bc:	10800217 	ldw	r2,8(r2)
    98c0:	1809883a 	mov	r4,r3
    98c4:	e17ffe17 	ldw	r5,-8(fp)
    98c8:	e1bfff17 	ldw	r6,-4(fp)
    98cc:	100f883a 	mov	r7,r2
    98d0:	00099dc0 	call	99dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    98d4:	e037883a 	mov	sp,fp
    98d8:	dfc00117 	ldw	ra,4(sp)
    98dc:	df000017 	ldw	fp,0(sp)
    98e0:	dec00204 	addi	sp,sp,8
    98e4:	f800283a 	ret

000098e8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    98e8:	defff704 	addi	sp,sp,-36
    98ec:	df000815 	stw	fp,32(sp)
    98f0:	df000804 	addi	fp,sp,32
    98f4:	e13ffc15 	stw	r4,-16(fp)
    98f8:	e17ffd15 	stw	r5,-12(fp)
    98fc:	e1bffe15 	stw	r6,-8(fp)
    9900:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9904:	e0bffc17 	ldw	r2,-16(fp)
    9908:	10800017 	ldw	r2,0(r2)
    990c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9910:	e0bffd17 	ldw	r2,-12(fp)
    9914:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9918:	e0bffe17 	ldw	r2,-8(fp)
    991c:	e0fffd17 	ldw	r3,-12(fp)
    9920:	1885883a 	add	r2,r3,r2
    9924:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9928:	00001406 	br	997c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    992c:	e0bff917 	ldw	r2,-28(fp)
    9930:	10800037 	ldwio	r2,0(r2)
    9934:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9938:	e0bffb17 	ldw	r2,-20(fp)
    993c:	10a0000c 	andi	r2,r2,32768
    9940:	10000826 	beq	r2,zero,9964 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9944:	e0bffb17 	ldw	r2,-20(fp)
    9948:	1007883a 	mov	r3,r2
    994c:	e0bff817 	ldw	r2,-32(fp)
    9950:	10c00005 	stb	r3,0(r2)
    9954:	e0bff817 	ldw	r2,-32(fp)
    9958:	10800044 	addi	r2,r2,1
    995c:	e0bff815 	stw	r2,-32(fp)
    9960:	00000606 	br	997c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    9964:	e0fff817 	ldw	r3,-32(fp)
    9968:	e0bffd17 	ldw	r2,-12(fp)
    996c:	1880071e 	bne	r3,r2,998c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    9970:	e0bfff17 	ldw	r2,-4(fp)
    9974:	1090000c 	andi	r2,r2,16384
    9978:	1000061e 	bne	r2,zero,9994 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    997c:	e0fff817 	ldw	r3,-32(fp)
    9980:	e0bffa17 	ldw	r2,-24(fp)
    9984:	18bfe936 	bltu	r3,r2,992c <altera_avalon_jtag_uart_read+0x44>
    9988:	00000306 	br	9998 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    998c:	0001883a 	nop
    9990:	00000106 	br	9998 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    9994:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9998:	e0fff817 	ldw	r3,-32(fp)
    999c:	e0bffd17 	ldw	r2,-12(fp)
    99a0:	18800426 	beq	r3,r2,99b4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    99a4:	e0fff817 	ldw	r3,-32(fp)
    99a8:	e0bffd17 	ldw	r2,-12(fp)
    99ac:	1885c83a 	sub	r2,r3,r2
    99b0:	00000606 	br	99cc <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    99b4:	e0bfff17 	ldw	r2,-4(fp)
    99b8:	1090000c 	andi	r2,r2,16384
    99bc:	10000226 	beq	r2,zero,99c8 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    99c0:	00bffd44 	movi	r2,-11
    99c4:	00000106 	br	99cc <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    99c8:	00bffec4 	movi	r2,-5
}
    99cc:	e037883a 	mov	sp,fp
    99d0:	df000017 	ldw	fp,0(sp)
    99d4:	dec00104 	addi	sp,sp,4
    99d8:	f800283a 	ret

000099dc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    99dc:	defff904 	addi	sp,sp,-28
    99e0:	df000615 	stw	fp,24(sp)
    99e4:	df000604 	addi	fp,sp,24
    99e8:	e13ffc15 	stw	r4,-16(fp)
    99ec:	e17ffd15 	stw	r5,-12(fp)
    99f0:	e1bffe15 	stw	r6,-8(fp)
    99f4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    99f8:	e0bffc17 	ldw	r2,-16(fp)
    99fc:	10800017 	ldw	r2,0(r2)
    9a00:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9a04:	e0bffe17 	ldw	r2,-8(fp)
    9a08:	e0fffd17 	ldw	r3,-12(fp)
    9a0c:	1885883a 	add	r2,r3,r2
    9a10:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9a14:	00000f06 	br	9a54 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9a18:	e0bffa17 	ldw	r2,-24(fp)
    9a1c:	10800104 	addi	r2,r2,4
    9a20:	10800037 	ldwio	r2,0(r2)
    9a24:	10bfffec 	andhi	r2,r2,65535
    9a28:	10000a26 	beq	r2,zero,9a54 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9a2c:	e0bffa17 	ldw	r2,-24(fp)
    9a30:	e0fffd17 	ldw	r3,-12(fp)
    9a34:	18c00003 	ldbu	r3,0(r3)
    9a38:	18c03fcc 	andi	r3,r3,255
    9a3c:	18c0201c 	xori	r3,r3,128
    9a40:	18ffe004 	addi	r3,r3,-128
    9a44:	e13ffd17 	ldw	r4,-12(fp)
    9a48:	21000044 	addi	r4,r4,1
    9a4c:	e13ffd15 	stw	r4,-12(fp)
    9a50:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9a54:	e0fffd17 	ldw	r3,-12(fp)
    9a58:	e0bffb17 	ldw	r2,-20(fp)
    9a5c:	18bfee36 	bltu	r3,r2,9a18 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9a60:	e0bffe17 	ldw	r2,-8(fp)
}
    9a64:	e037883a 	mov	sp,fp
    9a68:	df000017 	ldw	fp,0(sp)
    9a6c:	dec00104 	addi	sp,sp,4
    9a70:	f800283a 	ret

00009a74 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9a74:	defffa04 	addi	sp,sp,-24
    9a78:	dfc00515 	stw	ra,20(sp)
    9a7c:	df000415 	stw	fp,16(sp)
    9a80:	df000404 	addi	fp,sp,16
    9a84:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9a88:	0007883a 	mov	r3,zero
    9a8c:	e0bfff17 	ldw	r2,-4(fp)
    9a90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9a94:	e0bfff17 	ldw	r2,-4(fp)
    9a98:	10800104 	addi	r2,r2,4
    9a9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9aa0:	0005303a 	rdctl	r2,status
    9aa4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9aa8:	e0fffd17 	ldw	r3,-12(fp)
    9aac:	00bfff84 	movi	r2,-2
    9ab0:	1884703a 	and	r2,r3,r2
    9ab4:	1001703a 	wrctl	status,r2
  
  return context;
    9ab8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9abc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9ac0:	000a7180 	call	a718 <alt_tick>
    9ac4:	e0bffc17 	ldw	r2,-16(fp)
    9ac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9acc:	e0bffe17 	ldw	r2,-8(fp)
    9ad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9ad4:	e037883a 	mov	sp,fp
    9ad8:	dfc00117 	ldw	ra,4(sp)
    9adc:	df000017 	ldw	fp,0(sp)
    9ae0:	dec00204 	addi	sp,sp,8
    9ae4:	f800283a 	ret

00009ae8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9ae8:	defff804 	addi	sp,sp,-32
    9aec:	dfc00715 	stw	ra,28(sp)
    9af0:	df000615 	stw	fp,24(sp)
    9af4:	df000604 	addi	fp,sp,24
    9af8:	e13ffc15 	stw	r4,-16(fp)
    9afc:	e17ffd15 	stw	r5,-12(fp)
    9b00:	e1bffe15 	stw	r6,-8(fp)
    9b04:	e1ffff15 	stw	r7,-4(fp)
    9b08:	e0bfff17 	ldw	r2,-4(fp)
    9b0c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9b10:	00800074 	movhi	r2,1
    9b14:	10ad3c04 	addi	r2,r2,-19216
    9b18:	10800017 	ldw	r2,0(r2)
    9b1c:	1000041e 	bne	r2,zero,9b30 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    9b20:	00800074 	movhi	r2,1
    9b24:	10ad3c04 	addi	r2,r2,-19216
    9b28:	e0fffb17 	ldw	r3,-20(fp)
    9b2c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9b30:	e0bffc17 	ldw	r2,-16(fp)
    9b34:	10800104 	addi	r2,r2,4
    9b38:	00c001c4 	movi	r3,7
    9b3c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9b40:	d8000015 	stw	zero,0(sp)
    9b44:	e13ffd17 	ldw	r4,-12(fp)
    9b48:	e17ffe17 	ldw	r5,-8(fp)
    9b4c:	01800074 	movhi	r6,1
    9b50:	31a69d04 	addi	r6,r6,-25996
    9b54:	e1fffc17 	ldw	r7,-16(fp)
    9b58:	0009f480 	call	9f48 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9b5c:	e037883a 	mov	sp,fp
    9b60:	dfc00117 	ldw	ra,4(sp)
    9b64:	df000017 	ldw	fp,0(sp)
    9b68:	dec00204 	addi	sp,sp,8
    9b6c:	f800283a 	ret

00009b70 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9b70:	defffa04 	addi	sp,sp,-24
    9b74:	dfc00515 	stw	ra,20(sp)
    9b78:	df000415 	stw	fp,16(sp)
    9b7c:	df000404 	addi	fp,sp,16
    9b80:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    9b84:	008000c4 	movi	r2,3
    9b88:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9b8c:	e13ffd17 	ldw	r4,-12(fp)
    9b90:	014003f4 	movhi	r5,15
    9b94:	29509004 	addi	r5,r5,16960
    9b98:	00094840 	call	9484 <__mulsi3>
    9b9c:	010179f4 	movhi	r4,1511
    9ba0:	2127b004 	addi	r4,r4,-24896
    9ba4:	100b883a 	mov	r5,r2
    9ba8:	00094740 	call	9474 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9bac:	01200034 	movhi	r4,32768
    9bb0:	213fffc4 	addi	r4,r4,-1
    9bb4:	100b883a 	mov	r5,r2
    9bb8:	00094740 	call	9474 <__udivsi3>
    9bbc:	e13fff17 	ldw	r4,-4(fp)
    9bc0:	100b883a 	mov	r5,r2
    9bc4:	00094740 	call	9474 <__udivsi3>
    9bc8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9bcc:	e0bffe17 	ldw	r2,-8(fp)
    9bd0:	10002926 	beq	r2,zero,9c78 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    9bd4:	e03ffc15 	stw	zero,-16(fp)
    9bd8:	00001606 	br	9c34 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9bdc:	00a00034 	movhi	r2,32768
    9be0:	10bfffc4 	addi	r2,r2,-1
    9be4:	10bfffc4 	addi	r2,r2,-1
    9be8:	103ffe1e 	bne	r2,zero,9be4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9bec:	e13ffd17 	ldw	r4,-12(fp)
    9bf0:	014003f4 	movhi	r5,15
    9bf4:	29509004 	addi	r5,r5,16960
    9bf8:	00094840 	call	9484 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9bfc:	010179f4 	movhi	r4,1511
    9c00:	2127b004 	addi	r4,r4,-24896
    9c04:	100b883a 	mov	r5,r2
    9c08:	00094740 	call	9474 <__udivsi3>
    9c0c:	01200034 	movhi	r4,32768
    9c10:	213fffc4 	addi	r4,r4,-1
    9c14:	100b883a 	mov	r5,r2
    9c18:	00094740 	call	9474 <__udivsi3>
    9c1c:	e0ffff17 	ldw	r3,-4(fp)
    9c20:	1885c83a 	sub	r2,r3,r2
    9c24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9c28:	e0bffc17 	ldw	r2,-16(fp)
    9c2c:	10800044 	addi	r2,r2,1
    9c30:	e0bffc15 	stw	r2,-16(fp)
    9c34:	e0fffc17 	ldw	r3,-16(fp)
    9c38:	e0bffe17 	ldw	r2,-8(fp)
    9c3c:	18bfe716 	blt	r3,r2,9bdc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9c40:	e13ffd17 	ldw	r4,-12(fp)
    9c44:	014003f4 	movhi	r5,15
    9c48:	29509004 	addi	r5,r5,16960
    9c4c:	00094840 	call	9484 <__mulsi3>
    9c50:	010179f4 	movhi	r4,1511
    9c54:	2127b004 	addi	r4,r4,-24896
    9c58:	100b883a 	mov	r5,r2
    9c5c:	00094740 	call	9474 <__udivsi3>
    9c60:	1009883a 	mov	r4,r2
    9c64:	e17fff17 	ldw	r5,-4(fp)
    9c68:	00094840 	call	9484 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9c6c:	10bfffc4 	addi	r2,r2,-1
    9c70:	103ffe1e 	bne	r2,zero,9c6c <alt_busy_sleep+0xfc>
    9c74:	00000d06 	br	9cac <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9c78:	e13ffd17 	ldw	r4,-12(fp)
    9c7c:	014003f4 	movhi	r5,15
    9c80:	29509004 	addi	r5,r5,16960
    9c84:	00094840 	call	9484 <__mulsi3>
    9c88:	010179f4 	movhi	r4,1511
    9c8c:	2127b004 	addi	r4,r4,-24896
    9c90:	100b883a 	mov	r5,r2
    9c94:	00094740 	call	9474 <__udivsi3>
    9c98:	1009883a 	mov	r4,r2
    9c9c:	e17fff17 	ldw	r5,-4(fp)
    9ca0:	00094840 	call	9484 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9ca4:	10bfffc4 	addi	r2,r2,-1
    9ca8:	00bffe16 	blt	zero,r2,9ca4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9cac:	0005883a 	mov	r2,zero
}
    9cb0:	e037883a 	mov	sp,fp
    9cb4:	dfc00117 	ldw	ra,4(sp)
    9cb8:	df000017 	ldw	fp,0(sp)
    9cbc:	dec00204 	addi	sp,sp,8
    9cc0:	f800283a 	ret

00009cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cc4:	defffe04 	addi	sp,sp,-8
    9cc8:	dfc00115 	stw	ra,4(sp)
    9ccc:	df000015 	stw	fp,0(sp)
    9cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9cd4:	00800074 	movhi	r2,1
    9cd8:	10ac7904 	addi	r2,r2,-19996
    9cdc:	10800017 	ldw	r2,0(r2)
    9ce0:	10000526 	beq	r2,zero,9cf8 <alt_get_errno+0x34>
    9ce4:	00800074 	movhi	r2,1
    9ce8:	10ac7904 	addi	r2,r2,-19996
    9cec:	10800017 	ldw	r2,0(r2)
    9cf0:	103ee83a 	callr	r2
    9cf4:	00000206 	br	9d00 <alt_get_errno+0x3c>
    9cf8:	00800074 	movhi	r2,1
    9cfc:	10ad3704 	addi	r2,r2,-19236
}
    9d00:	e037883a 	mov	sp,fp
    9d04:	dfc00117 	ldw	ra,4(sp)
    9d08:	df000017 	ldw	fp,0(sp)
    9d0c:	dec00204 	addi	sp,sp,8
    9d10:	f800283a 	ret

00009d14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d14:	defffb04 	addi	sp,sp,-20
    9d18:	dfc00415 	stw	ra,16(sp)
    9d1c:	df000315 	stw	fp,12(sp)
    9d20:	df000304 	addi	fp,sp,12
    9d24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d28:	e0bfff17 	ldw	r2,-4(fp)
    9d2c:	10000716 	blt	r2,zero,9d4c <close+0x38>
    9d30:	e13fff17 	ldw	r4,-4(fp)
    9d34:	01400304 	movi	r5,12
    9d38:	00094840 	call	9484 <__mulsi3>
    9d3c:	00c00074 	movhi	r3,1
    9d40:	18ec1204 	addi	r3,r3,-20408
    9d44:	10c5883a 	add	r2,r2,r3
    9d48:	00000106 	br	9d50 <close+0x3c>
    9d4c:	0005883a 	mov	r2,zero
    9d50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9d54:	e0bffd17 	ldw	r2,-12(fp)
    9d58:	10001826 	beq	r2,zero,9dbc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9d5c:	e0bffd17 	ldw	r2,-12(fp)
    9d60:	10800017 	ldw	r2,0(r2)
    9d64:	10800417 	ldw	r2,16(r2)
    9d68:	10000626 	beq	r2,zero,9d84 <close+0x70>
    9d6c:	e0bffd17 	ldw	r2,-12(fp)
    9d70:	10800017 	ldw	r2,0(r2)
    9d74:	10800417 	ldw	r2,16(r2)
    9d78:	e13ffd17 	ldw	r4,-12(fp)
    9d7c:	103ee83a 	callr	r2
    9d80:	00000106 	br	9d88 <close+0x74>
    9d84:	0005883a 	mov	r2,zero
    9d88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9d8c:	e13fff17 	ldw	r4,-4(fp)
    9d90:	000a6000 	call	a600 <alt_release_fd>
    if (rval < 0)
    9d94:	e0bffe17 	ldw	r2,-8(fp)
    9d98:	1000060e 	bge	r2,zero,9db4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9d9c:	0009cc40 	call	9cc4 <alt_get_errno>
    9da0:	e0fffe17 	ldw	r3,-8(fp)
    9da4:	00c7c83a 	sub	r3,zero,r3
    9da8:	10c00015 	stw	r3,0(r2)
      return -1;
    9dac:	00bfffc4 	movi	r2,-1
    9db0:	00000606 	br	9dcc <close+0xb8>
    }
    return 0;
    9db4:	0005883a 	mov	r2,zero
    9db8:	00000406 	br	9dcc <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9dbc:	0009cc40 	call	9cc4 <alt_get_errno>
    9dc0:	00c01444 	movi	r3,81
    9dc4:	10c00015 	stw	r3,0(r2)
    return -1;
    9dc8:	00bfffc4 	movi	r2,-1
  }
}
    9dcc:	e037883a 	mov	sp,fp
    9dd0:	dfc00117 	ldw	ra,4(sp)
    9dd4:	df000017 	ldw	fp,0(sp)
    9dd8:	dec00204 	addi	sp,sp,8
    9ddc:	f800283a 	ret

00009de0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9de0:	deffff04 	addi	sp,sp,-4
    9de4:	df000015 	stw	fp,0(sp)
    9de8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9dec:	e037883a 	mov	sp,fp
    9df0:	df000017 	ldw	fp,0(sp)
    9df4:	dec00104 	addi	sp,sp,4
    9df8:	f800283a 	ret

00009dfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9dfc:	defffc04 	addi	sp,sp,-16
    9e00:	df000315 	stw	fp,12(sp)
    9e04:	df000304 	addi	fp,sp,12
    9e08:	e13ffd15 	stw	r4,-12(fp)
    9e0c:	e17ffe15 	stw	r5,-8(fp)
    9e10:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9e14:	e0bfff17 	ldw	r2,-4(fp)
}
    9e18:	e037883a 	mov	sp,fp
    9e1c:	df000017 	ldw	fp,0(sp)
    9e20:	dec00104 	addi	sp,sp,4
    9e24:	f800283a 	ret

00009e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e28:	defffe04 	addi	sp,sp,-8
    9e2c:	dfc00115 	stw	ra,4(sp)
    9e30:	df000015 	stw	fp,0(sp)
    9e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9e38:	00800074 	movhi	r2,1
    9e3c:	10ac7904 	addi	r2,r2,-19996
    9e40:	10800017 	ldw	r2,0(r2)
    9e44:	10000526 	beq	r2,zero,9e5c <alt_get_errno+0x34>
    9e48:	00800074 	movhi	r2,1
    9e4c:	10ac7904 	addi	r2,r2,-19996
    9e50:	10800017 	ldw	r2,0(r2)
    9e54:	103ee83a 	callr	r2
    9e58:	00000206 	br	9e64 <alt_get_errno+0x3c>
    9e5c:	00800074 	movhi	r2,1
    9e60:	10ad3704 	addi	r2,r2,-19236
}
    9e64:	e037883a 	mov	sp,fp
    9e68:	dfc00117 	ldw	ra,4(sp)
    9e6c:	df000017 	ldw	fp,0(sp)
    9e70:	dec00204 	addi	sp,sp,8
    9e74:	f800283a 	ret

00009e78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9e78:	defffa04 	addi	sp,sp,-24
    9e7c:	dfc00515 	stw	ra,20(sp)
    9e80:	df000415 	stw	fp,16(sp)
    9e84:	df000404 	addi	fp,sp,16
    9e88:	e13ffe15 	stw	r4,-8(fp)
    9e8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9e90:	e0bffe17 	ldw	r2,-8(fp)
    9e94:	10000326 	beq	r2,zero,9ea4 <alt_dev_llist_insert+0x2c>
    9e98:	e0bffe17 	ldw	r2,-8(fp)
    9e9c:	10800217 	ldw	r2,8(r2)
    9ea0:	1000051e 	bne	r2,zero,9eb8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9ea4:	0009e280 	call	9e28 <alt_get_errno>
    9ea8:	00c00584 	movi	r3,22
    9eac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9eb0:	00bffa84 	movi	r2,-22
    9eb4:	00001306 	br	9f04 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9eb8:	e0bffe17 	ldw	r2,-8(fp)
    9ebc:	e0ffff17 	ldw	r3,-4(fp)
    9ec0:	e0fffc15 	stw	r3,-16(fp)
    9ec4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9ec8:	e0bffd17 	ldw	r2,-12(fp)
    9ecc:	e0fffc17 	ldw	r3,-16(fp)
    9ed0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9ed4:	e0bffc17 	ldw	r2,-16(fp)
    9ed8:	10c00017 	ldw	r3,0(r2)
    9edc:	e0bffd17 	ldw	r2,-12(fp)
    9ee0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9ee4:	e0bffc17 	ldw	r2,-16(fp)
    9ee8:	10800017 	ldw	r2,0(r2)
    9eec:	e0fffd17 	ldw	r3,-12(fp)
    9ef0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9ef4:	e0bffc17 	ldw	r2,-16(fp)
    9ef8:	e0fffd17 	ldw	r3,-12(fp)
    9efc:	10c00015 	stw	r3,0(r2)

  return 0;  
    9f00:	0005883a 	mov	r2,zero
}
    9f04:	e037883a 	mov	sp,fp
    9f08:	dfc00117 	ldw	ra,4(sp)
    9f0c:	df000017 	ldw	fp,0(sp)
    9f10:	dec00204 	addi	sp,sp,8
    9f14:	f800283a 	ret

00009f18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9f18:	defffe04 	addi	sp,sp,-8
    9f1c:	dfc00115 	stw	ra,4(sp)
    9f20:	df000015 	stw	fp,0(sp)
    9f24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9f28:	0009883a 	mov	r4,zero
    9f2c:	01420004 	movi	r5,2048
    9f30:	000aab40 	call	aab4 <alt_icache_flush>
#endif
}
    9f34:	e037883a 	mov	sp,fp
    9f38:	dfc00117 	ldw	ra,4(sp)
    9f3c:	df000017 	ldw	fp,0(sp)
    9f40:	dec00204 	addi	sp,sp,8
    9f44:	f800283a 	ret

00009f48 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9f48:	defff904 	addi	sp,sp,-28
    9f4c:	dfc00615 	stw	ra,24(sp)
    9f50:	df000515 	stw	fp,20(sp)
    9f54:	df000504 	addi	fp,sp,20
    9f58:	e13ffc15 	stw	r4,-16(fp)
    9f5c:	e17ffd15 	stw	r5,-12(fp)
    9f60:	e1bffe15 	stw	r6,-8(fp)
    9f64:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9f68:	e0800217 	ldw	r2,8(fp)
    9f6c:	d8800015 	stw	r2,0(sp)
    9f70:	e13ffc17 	ldw	r4,-16(fp)
    9f74:	e17ffd17 	ldw	r5,-12(fp)
    9f78:	e1bffe17 	ldw	r6,-8(fp)
    9f7c:	e1ffff17 	ldw	r7,-4(fp)
    9f80:	000a1200 	call	a120 <alt_iic_isr_register>
}  
    9f84:	e037883a 	mov	sp,fp
    9f88:	dfc00117 	ldw	ra,4(sp)
    9f8c:	df000017 	ldw	fp,0(sp)
    9f90:	dec00204 	addi	sp,sp,8
    9f94:	f800283a 	ret

00009f98 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9f98:	defff904 	addi	sp,sp,-28
    9f9c:	df000615 	stw	fp,24(sp)
    9fa0:	df000604 	addi	fp,sp,24
    9fa4:	e13ffe15 	stw	r4,-8(fp)
    9fa8:	e17fff15 	stw	r5,-4(fp)
    9fac:	e0bfff17 	ldw	r2,-4(fp)
    9fb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9fb4:	0005303a 	rdctl	r2,status
    9fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9fbc:	e0fffb17 	ldw	r3,-20(fp)
    9fc0:	00bfff84 	movi	r2,-2
    9fc4:	1884703a 	and	r2,r3,r2
    9fc8:	1001703a 	wrctl	status,r2
  
  return context;
    9fcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9fd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9fd4:	e0bffa17 	ldw	r2,-24(fp)
    9fd8:	00c00044 	movi	r3,1
    9fdc:	1884983a 	sll	r2,r3,r2
    9fe0:	1007883a 	mov	r3,r2
    9fe4:	00800074 	movhi	r2,1
    9fe8:	10ad3b04 	addi	r2,r2,-19220
    9fec:	10800017 	ldw	r2,0(r2)
    9ff0:	1886b03a 	or	r3,r3,r2
    9ff4:	00800074 	movhi	r2,1
    9ff8:	10ad3b04 	addi	r2,r2,-19220
    9ffc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a000:	00800074 	movhi	r2,1
    a004:	10ad3b04 	addi	r2,r2,-19220
    a008:	10800017 	ldw	r2,0(r2)
    a00c:	100170fa 	wrctl	ienable,r2
    a010:	e0bffc17 	ldw	r2,-16(fp)
    a014:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a018:	e0bffd17 	ldw	r2,-12(fp)
    a01c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a020:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a024:	e037883a 	mov	sp,fp
    a028:	df000017 	ldw	fp,0(sp)
    a02c:	dec00104 	addi	sp,sp,4
    a030:	f800283a 	ret

0000a034 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a034:	defff904 	addi	sp,sp,-28
    a038:	df000615 	stw	fp,24(sp)
    a03c:	df000604 	addi	fp,sp,24
    a040:	e13ffe15 	stw	r4,-8(fp)
    a044:	e17fff15 	stw	r5,-4(fp)
    a048:	e0bfff17 	ldw	r2,-4(fp)
    a04c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a050:	0005303a 	rdctl	r2,status
    a054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a058:	e0fffb17 	ldw	r3,-20(fp)
    a05c:	00bfff84 	movi	r2,-2
    a060:	1884703a 	and	r2,r3,r2
    a064:	1001703a 	wrctl	status,r2
  
  return context;
    a068:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a06c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a070:	e0bffa17 	ldw	r2,-24(fp)
    a074:	00c00044 	movi	r3,1
    a078:	1884983a 	sll	r2,r3,r2
    a07c:	0084303a 	nor	r2,zero,r2
    a080:	1007883a 	mov	r3,r2
    a084:	00800074 	movhi	r2,1
    a088:	10ad3b04 	addi	r2,r2,-19220
    a08c:	10800017 	ldw	r2,0(r2)
    a090:	1886703a 	and	r3,r3,r2
    a094:	00800074 	movhi	r2,1
    a098:	10ad3b04 	addi	r2,r2,-19220
    a09c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a0a0:	00800074 	movhi	r2,1
    a0a4:	10ad3b04 	addi	r2,r2,-19220
    a0a8:	10800017 	ldw	r2,0(r2)
    a0ac:	100170fa 	wrctl	ienable,r2
    a0b0:	e0bffc17 	ldw	r2,-16(fp)
    a0b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0b8:	e0bffd17 	ldw	r2,-12(fp)
    a0bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a0c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a0c4:	e037883a 	mov	sp,fp
    a0c8:	df000017 	ldw	fp,0(sp)
    a0cc:	dec00104 	addi	sp,sp,4
    a0d0:	f800283a 	ret

0000a0d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a0d4:	defffc04 	addi	sp,sp,-16
    a0d8:	df000315 	stw	fp,12(sp)
    a0dc:	df000304 	addi	fp,sp,12
    a0e0:	e13ffe15 	stw	r4,-8(fp)
    a0e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a0e8:	000530fa 	rdctl	r2,ienable
    a0ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a0f0:	e0bfff17 	ldw	r2,-4(fp)
    a0f4:	00c00044 	movi	r3,1
    a0f8:	1884983a 	sll	r2,r3,r2
    a0fc:	1007883a 	mov	r3,r2
    a100:	e0bffd17 	ldw	r2,-12(fp)
    a104:	1884703a 	and	r2,r3,r2
    a108:	1004c03a 	cmpne	r2,r2,zero
    a10c:	10803fcc 	andi	r2,r2,255
}
    a110:	e037883a 	mov	sp,fp
    a114:	df000017 	ldw	fp,0(sp)
    a118:	dec00104 	addi	sp,sp,4
    a11c:	f800283a 	ret

0000a120 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a120:	defff504 	addi	sp,sp,-44
    a124:	dfc00a15 	stw	ra,40(sp)
    a128:	df000915 	stw	fp,36(sp)
    a12c:	df000904 	addi	fp,sp,36
    a130:	e13ffc15 	stw	r4,-16(fp)
    a134:	e17ffd15 	stw	r5,-12(fp)
    a138:	e1bffe15 	stw	r6,-8(fp)
    a13c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a140:	00bffa84 	movi	r2,-22
    a144:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a148:	e0bffd17 	ldw	r2,-12(fp)
    a14c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a150:	e0bff817 	ldw	r2,-32(fp)
    a154:	10800808 	cmpgei	r2,r2,32
    a158:	1000271e 	bne	r2,zero,a1f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a15c:	0005303a 	rdctl	r2,status
    a160:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a164:	e0fffa17 	ldw	r3,-24(fp)
    a168:	00bfff84 	movi	r2,-2
    a16c:	1884703a 	and	r2,r3,r2
    a170:	1001703a 	wrctl	status,r2
  
  return context;
    a174:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a178:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    a17c:	00c00074 	movhi	r3,1
    a180:	18ed3e04 	addi	r3,r3,-19208
    a184:	e0bff817 	ldw	r2,-32(fp)
    a188:	100490fa 	slli	r2,r2,3
    a18c:	1885883a 	add	r2,r3,r2
    a190:	e0fffe17 	ldw	r3,-8(fp)
    a194:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a198:	00c00074 	movhi	r3,1
    a19c:	18ed3e04 	addi	r3,r3,-19208
    a1a0:	e0bff817 	ldw	r2,-32(fp)
    a1a4:	100490fa 	slli	r2,r2,3
    a1a8:	1885883a 	add	r2,r3,r2
    a1ac:	10800104 	addi	r2,r2,4
    a1b0:	e0ffff17 	ldw	r3,-4(fp)
    a1b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a1b8:	e0bffe17 	ldw	r2,-8(fp)
    a1bc:	10000526 	beq	r2,zero,a1d4 <alt_iic_isr_register+0xb4>
    a1c0:	e0bff817 	ldw	r2,-32(fp)
    a1c4:	e13ffc17 	ldw	r4,-16(fp)
    a1c8:	100b883a 	mov	r5,r2
    a1cc:	0009f980 	call	9f98 <alt_ic_irq_enable>
    a1d0:	00000406 	br	a1e4 <alt_iic_isr_register+0xc4>
    a1d4:	e0bff817 	ldw	r2,-32(fp)
    a1d8:	e13ffc17 	ldw	r4,-16(fp)
    a1dc:	100b883a 	mov	r5,r2
    a1e0:	000a0340 	call	a034 <alt_ic_irq_disable>
    a1e4:	e0bff715 	stw	r2,-36(fp)
    a1e8:	e0bff917 	ldw	r2,-28(fp)
    a1ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1f0:	e0bffb17 	ldw	r2,-20(fp)
    a1f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a1f8:	e0bff717 	ldw	r2,-36(fp)
}
    a1fc:	e037883a 	mov	sp,fp
    a200:	dfc00117 	ldw	ra,4(sp)
    a204:	df000017 	ldw	fp,0(sp)
    a208:	dec00204 	addi	sp,sp,8
    a20c:	f800283a 	ret

0000a210 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a210:	defff804 	addi	sp,sp,-32
    a214:	dfc00715 	stw	ra,28(sp)
    a218:	df000615 	stw	fp,24(sp)
    a21c:	dc000515 	stw	r16,20(sp)
    a220:	df000504 	addi	fp,sp,20
    a224:	e13ffc15 	stw	r4,-16(fp)
    a228:	e17ffd15 	stw	r5,-12(fp)
    a22c:	e1bffe15 	stw	r6,-8(fp)
    a230:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a234:	e13ffd17 	ldw	r4,-12(fp)
    a238:	e17ffe17 	ldw	r5,-8(fp)
    a23c:	e1bfff17 	ldw	r6,-4(fp)
    a240:	000a4a80 	call	a4a8 <open>
    a244:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a248:	e0bffb17 	ldw	r2,-20(fp)
    a24c:	10002216 	blt	r2,zero,a2d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    a250:	04000074 	movhi	r16,1
    a254:	842c1204 	addi	r16,r16,-20408
    a258:	e0bffb17 	ldw	r2,-20(fp)
    a25c:	1009883a 	mov	r4,r2
    a260:	01400304 	movi	r5,12
    a264:	00094840 	call	9484 <__mulsi3>
    a268:	8085883a 	add	r2,r16,r2
    a26c:	10c00017 	ldw	r3,0(r2)
    a270:	e0bffc17 	ldw	r2,-16(fp)
    a274:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a278:	04000074 	movhi	r16,1
    a27c:	842c1204 	addi	r16,r16,-20408
    a280:	e0bffb17 	ldw	r2,-20(fp)
    a284:	1009883a 	mov	r4,r2
    a288:	01400304 	movi	r5,12
    a28c:	00094840 	call	9484 <__mulsi3>
    a290:	8085883a 	add	r2,r16,r2
    a294:	10800104 	addi	r2,r2,4
    a298:	10c00017 	ldw	r3,0(r2)
    a29c:	e0bffc17 	ldw	r2,-16(fp)
    a2a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a2a4:	04000074 	movhi	r16,1
    a2a8:	842c1204 	addi	r16,r16,-20408
    a2ac:	e0bffb17 	ldw	r2,-20(fp)
    a2b0:	1009883a 	mov	r4,r2
    a2b4:	01400304 	movi	r5,12
    a2b8:	00094840 	call	9484 <__mulsi3>
    a2bc:	8085883a 	add	r2,r16,r2
    a2c0:	10800204 	addi	r2,r2,8
    a2c4:	10c00017 	ldw	r3,0(r2)
    a2c8:	e0bffc17 	ldw	r2,-16(fp)
    a2cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a2d0:	e13ffb17 	ldw	r4,-20(fp)
    a2d4:	000a6000 	call	a600 <alt_release_fd>
  }
} 
    a2d8:	e037883a 	mov	sp,fp
    a2dc:	dfc00217 	ldw	ra,8(sp)
    a2e0:	df000117 	ldw	fp,4(sp)
    a2e4:	dc000017 	ldw	r16,0(sp)
    a2e8:	dec00304 	addi	sp,sp,12
    a2ec:	f800283a 	ret

0000a2f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a2f0:	defffb04 	addi	sp,sp,-20
    a2f4:	dfc00415 	stw	ra,16(sp)
    a2f8:	df000315 	stw	fp,12(sp)
    a2fc:	df000304 	addi	fp,sp,12
    a300:	e13ffd15 	stw	r4,-12(fp)
    a304:	e17ffe15 	stw	r5,-8(fp)
    a308:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a30c:	01000074 	movhi	r4,1
    a310:	212c1504 	addi	r4,r4,-20396
    a314:	e17ffd17 	ldw	r5,-12(fp)
    a318:	01800044 	movi	r6,1
    a31c:	01c07fc4 	movi	r7,511
    a320:	000a2100 	call	a210 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a324:	01000074 	movhi	r4,1
    a328:	212c1204 	addi	r4,r4,-20408
    a32c:	e17ffe17 	ldw	r5,-8(fp)
    a330:	000d883a 	mov	r6,zero
    a334:	01c07fc4 	movi	r7,511
    a338:	000a2100 	call	a210 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a33c:	01000074 	movhi	r4,1
    a340:	212c1804 	addi	r4,r4,-20384
    a344:	e17fff17 	ldw	r5,-4(fp)
    a348:	01800044 	movi	r6,1
    a34c:	01c07fc4 	movi	r7,511
    a350:	000a2100 	call	a210 <alt_open_fd>
}  
    a354:	e037883a 	mov	sp,fp
    a358:	dfc00117 	ldw	ra,4(sp)
    a35c:	df000017 	ldw	fp,0(sp)
    a360:	dec00204 	addi	sp,sp,8
    a364:	f800283a 	ret

0000a368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a368:	defffe04 	addi	sp,sp,-8
    a36c:	dfc00115 	stw	ra,4(sp)
    a370:	df000015 	stw	fp,0(sp)
    a374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a378:	00800074 	movhi	r2,1
    a37c:	10ac7904 	addi	r2,r2,-19996
    a380:	10800017 	ldw	r2,0(r2)
    a384:	10000526 	beq	r2,zero,a39c <alt_get_errno+0x34>
    a388:	00800074 	movhi	r2,1
    a38c:	10ac7904 	addi	r2,r2,-19996
    a390:	10800017 	ldw	r2,0(r2)
    a394:	103ee83a 	callr	r2
    a398:	00000206 	br	a3a4 <alt_get_errno+0x3c>
    a39c:	00800074 	movhi	r2,1
    a3a0:	10ad3704 	addi	r2,r2,-19236
}
    a3a4:	e037883a 	mov	sp,fp
    a3a8:	dfc00117 	ldw	ra,4(sp)
    a3ac:	df000017 	ldw	fp,0(sp)
    a3b0:	dec00204 	addi	sp,sp,8
    a3b4:	f800283a 	ret

0000a3b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a3b8:	defffb04 	addi	sp,sp,-20
    a3bc:	dfc00415 	stw	ra,16(sp)
    a3c0:	df000315 	stw	fp,12(sp)
    a3c4:	dc000215 	stw	r16,8(sp)
    a3c8:	df000204 	addi	fp,sp,8
    a3cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a3d0:	e0bfff17 	ldw	r2,-4(fp)
    a3d4:	10800217 	ldw	r2,8(r2)
    a3d8:	10d00034 	orhi	r3,r2,16384
    a3dc:	e0bfff17 	ldw	r2,-4(fp)
    a3e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a3e4:	e03ffe15 	stw	zero,-8(fp)
    a3e8:	00002206 	br	a474 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a3ec:	04000074 	movhi	r16,1
    a3f0:	842c1204 	addi	r16,r16,-20408
    a3f4:	e0bffe17 	ldw	r2,-8(fp)
    a3f8:	1009883a 	mov	r4,r2
    a3fc:	01400304 	movi	r5,12
    a400:	00094840 	call	9484 <__mulsi3>
    a404:	8085883a 	add	r2,r16,r2
    a408:	10c00017 	ldw	r3,0(r2)
    a40c:	e0bfff17 	ldw	r2,-4(fp)
    a410:	10800017 	ldw	r2,0(r2)
    a414:	1880141e 	bne	r3,r2,a468 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a418:	04000074 	movhi	r16,1
    a41c:	842c1204 	addi	r16,r16,-20408
    a420:	e0bffe17 	ldw	r2,-8(fp)
    a424:	1009883a 	mov	r4,r2
    a428:	01400304 	movi	r5,12
    a42c:	00094840 	call	9484 <__mulsi3>
    a430:	8085883a 	add	r2,r16,r2
    a434:	10800204 	addi	r2,r2,8
    a438:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a43c:	10000a0e 	bge	r2,zero,a468 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a440:	e13ffe17 	ldw	r4,-8(fp)
    a444:	01400304 	movi	r5,12
    a448:	00094840 	call	9484 <__mulsi3>
    a44c:	00c00074 	movhi	r3,1
    a450:	18ec1204 	addi	r3,r3,-20408
    a454:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a458:	e0bfff17 	ldw	r2,-4(fp)
    a45c:	18800226 	beq	r3,r2,a468 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a460:	00bffcc4 	movi	r2,-13
    a464:	00000a06 	br	a490 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a468:	e0bffe17 	ldw	r2,-8(fp)
    a46c:	10800044 	addi	r2,r2,1
    a470:	e0bffe15 	stw	r2,-8(fp)
    a474:	00800074 	movhi	r2,1
    a478:	10ac7804 	addi	r2,r2,-20000
    a47c:	10800017 	ldw	r2,0(r2)
    a480:	1007883a 	mov	r3,r2
    a484:	e0bffe17 	ldw	r2,-8(fp)
    a488:	18bfd82e 	bgeu	r3,r2,a3ec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a48c:	0005883a 	mov	r2,zero
}
    a490:	e037883a 	mov	sp,fp
    a494:	dfc00217 	ldw	ra,8(sp)
    a498:	df000117 	ldw	fp,4(sp)
    a49c:	dc000017 	ldw	r16,0(sp)
    a4a0:	dec00304 	addi	sp,sp,12
    a4a4:	f800283a 	ret

0000a4a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a4a8:	defff604 	addi	sp,sp,-40
    a4ac:	dfc00915 	stw	ra,36(sp)
    a4b0:	df000815 	stw	fp,32(sp)
    a4b4:	df000804 	addi	fp,sp,32
    a4b8:	e13ffd15 	stw	r4,-12(fp)
    a4bc:	e17ffe15 	stw	r5,-8(fp)
    a4c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a4c4:	00bfffc4 	movi	r2,-1
    a4c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a4cc:	00bffb44 	movi	r2,-19
    a4d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a4d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a4d8:	e13ffd17 	ldw	r4,-12(fp)
    a4dc:	01400074 	movhi	r5,1
    a4e0:	296c7604 	addi	r5,r5,-20008
    a4e4:	000a83c0 	call	a83c <alt_find_dev>
    a4e8:	e0bff815 	stw	r2,-32(fp)
    a4ec:	e0bff817 	ldw	r2,-32(fp)
    a4f0:	1000051e 	bne	r2,zero,a508 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a4f4:	e13ffd17 	ldw	r4,-12(fp)
    a4f8:	000a8cc0 	call	a8cc <alt_find_file>
    a4fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a500:	00800044 	movi	r2,1
    a504:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a508:	e0bff817 	ldw	r2,-32(fp)
    a50c:	10002a26 	beq	r2,zero,a5b8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a510:	e13ff817 	ldw	r4,-32(fp)
    a514:	000a9e00 	call	a9e0 <alt_get_fd>
    a518:	e0bff915 	stw	r2,-28(fp)
    a51c:	e0bff917 	ldw	r2,-28(fp)
    a520:	1000030e 	bge	r2,zero,a530 <open+0x88>
    {
      status = index;
    a524:	e0bff917 	ldw	r2,-28(fp)
    a528:	e0bffa15 	stw	r2,-24(fp)
    a52c:	00002406 	br	a5c0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a530:	e13ff917 	ldw	r4,-28(fp)
    a534:	01400304 	movi	r5,12
    a538:	00094840 	call	9484 <__mulsi3>
    a53c:	00c00074 	movhi	r3,1
    a540:	18ec1204 	addi	r3,r3,-20408
    a544:	10c5883a 	add	r2,r2,r3
    a548:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a54c:	e0fffe17 	ldw	r3,-8(fp)
    a550:	00900034 	movhi	r2,16384
    a554:	10bfffc4 	addi	r2,r2,-1
    a558:	1886703a 	and	r3,r3,r2
    a55c:	e0bffc17 	ldw	r2,-16(fp)
    a560:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a564:	e0bffb17 	ldw	r2,-20(fp)
    a568:	1000051e 	bne	r2,zero,a580 <open+0xd8>
    a56c:	e13ffc17 	ldw	r4,-16(fp)
    a570:	000a3b80 	call	a3b8 <alt_file_locked>
    a574:	e0bffa15 	stw	r2,-24(fp)
    a578:	e0bffa17 	ldw	r2,-24(fp)
    a57c:	10001016 	blt	r2,zero,a5c0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a580:	e0bff817 	ldw	r2,-32(fp)
    a584:	10800317 	ldw	r2,12(r2)
    a588:	10000826 	beq	r2,zero,a5ac <open+0x104>
    a58c:	e0bff817 	ldw	r2,-32(fp)
    a590:	10800317 	ldw	r2,12(r2)
    a594:	e13ffc17 	ldw	r4,-16(fp)
    a598:	e17ffd17 	ldw	r5,-12(fp)
    a59c:	e1bffe17 	ldw	r6,-8(fp)
    a5a0:	e1ffff17 	ldw	r7,-4(fp)
    a5a4:	103ee83a 	callr	r2
    a5a8:	00000106 	br	a5b0 <open+0x108>
    a5ac:	0005883a 	mov	r2,zero
    a5b0:	e0bffa15 	stw	r2,-24(fp)
    a5b4:	00000206 	br	a5c0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a5b8:	00bffb44 	movi	r2,-19
    a5bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a5c0:	e0bffa17 	ldw	r2,-24(fp)
    a5c4:	1000080e 	bge	r2,zero,a5e8 <open+0x140>
  {
    alt_release_fd (index);  
    a5c8:	e13ff917 	ldw	r4,-28(fp)
    a5cc:	000a6000 	call	a600 <alt_release_fd>
    ALT_ERRNO = -status;
    a5d0:	000a3680 	call	a368 <alt_get_errno>
    a5d4:	e0fffa17 	ldw	r3,-24(fp)
    a5d8:	00c7c83a 	sub	r3,zero,r3
    a5dc:	10c00015 	stw	r3,0(r2)
    return -1;
    a5e0:	00bfffc4 	movi	r2,-1
    a5e4:	00000106 	br	a5ec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    a5e8:	e0bff917 	ldw	r2,-28(fp)
}
    a5ec:	e037883a 	mov	sp,fp
    a5f0:	dfc00117 	ldw	ra,4(sp)
    a5f4:	df000017 	ldw	fp,0(sp)
    a5f8:	dec00204 	addi	sp,sp,8
    a5fc:	f800283a 	ret

0000a600 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a600:	defffc04 	addi	sp,sp,-16
    a604:	dfc00315 	stw	ra,12(sp)
    a608:	df000215 	stw	fp,8(sp)
    a60c:	dc000115 	stw	r16,4(sp)
    a610:	df000104 	addi	fp,sp,4
    a614:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a618:	e0bfff17 	ldw	r2,-4(fp)
    a61c:	108000d0 	cmplti	r2,r2,3
    a620:	1000111e 	bne	r2,zero,a668 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a624:	04000074 	movhi	r16,1
    a628:	842c1204 	addi	r16,r16,-20408
    a62c:	e0bfff17 	ldw	r2,-4(fp)
    a630:	1009883a 	mov	r4,r2
    a634:	01400304 	movi	r5,12
    a638:	00094840 	call	9484 <__mulsi3>
    a63c:	8085883a 	add	r2,r16,r2
    a640:	10800204 	addi	r2,r2,8
    a644:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a648:	04000074 	movhi	r16,1
    a64c:	842c1204 	addi	r16,r16,-20408
    a650:	e0bfff17 	ldw	r2,-4(fp)
    a654:	1009883a 	mov	r4,r2
    a658:	01400304 	movi	r5,12
    a65c:	00094840 	call	9484 <__mulsi3>
    a660:	8085883a 	add	r2,r16,r2
    a664:	10000015 	stw	zero,0(r2)
  }
}
    a668:	e037883a 	mov	sp,fp
    a66c:	dfc00217 	ldw	ra,8(sp)
    a670:	df000117 	ldw	fp,4(sp)
    a674:	dc000017 	ldw	r16,0(sp)
    a678:	dec00304 	addi	sp,sp,12
    a67c:	f800283a 	ret

0000a680 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a680:	defffa04 	addi	sp,sp,-24
    a684:	df000515 	stw	fp,20(sp)
    a688:	df000504 	addi	fp,sp,20
    a68c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a690:	0005303a 	rdctl	r2,status
    a694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a698:	e0fffc17 	ldw	r3,-16(fp)
    a69c:	00bfff84 	movi	r2,-2
    a6a0:	1884703a 	and	r2,r3,r2
    a6a4:	1001703a 	wrctl	status,r2
  
  return context;
    a6a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a6ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a6b8:	e0bffd17 	ldw	r2,-12(fp)
    a6bc:	10800017 	ldw	r2,0(r2)
    a6c0:	e0fffd17 	ldw	r3,-12(fp)
    a6c4:	18c00117 	ldw	r3,4(r3)
    a6c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a6cc:	e0bffd17 	ldw	r2,-12(fp)
    a6d0:	10800117 	ldw	r2,4(r2)
    a6d4:	e0fffd17 	ldw	r3,-12(fp)
    a6d8:	18c00017 	ldw	r3,0(r3)
    a6dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a6e0:	e0bffd17 	ldw	r2,-12(fp)
    a6e4:	e0fffd17 	ldw	r3,-12(fp)
    a6e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a6ec:	e0bffd17 	ldw	r2,-12(fp)
    a6f0:	e0fffd17 	ldw	r3,-12(fp)
    a6f4:	10c00015 	stw	r3,0(r2)
    a6f8:	e0bffb17 	ldw	r2,-20(fp)
    a6fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a700:	e0bffe17 	ldw	r2,-8(fp)
    a704:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a708:	e037883a 	mov	sp,fp
    a70c:	df000017 	ldw	fp,0(sp)
    a710:	dec00104 	addi	sp,sp,4
    a714:	f800283a 	ret

0000a718 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a718:	defffb04 	addi	sp,sp,-20
    a71c:	dfc00415 	stw	ra,16(sp)
    a720:	df000315 	stw	fp,12(sp)
    a724:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a728:	d0a00917 	ldw	r2,-32732(gp)
    a72c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a730:	d0a0cb17 	ldw	r2,-31956(gp)
    a734:	10800044 	addi	r2,r2,1
    a738:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a73c:	00002e06 	br	a7f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a740:	e0bffd17 	ldw	r2,-12(fp)
    a744:	10800017 	ldw	r2,0(r2)
    a748:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a74c:	e0bffd17 	ldw	r2,-12(fp)
    a750:	10800403 	ldbu	r2,16(r2)
    a754:	10803fcc 	andi	r2,r2,255
    a758:	10000426 	beq	r2,zero,a76c <alt_tick+0x54>
    a75c:	d0a0cb17 	ldw	r2,-31956(gp)
    a760:	1000021e 	bne	r2,zero,a76c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a764:	e0bffd17 	ldw	r2,-12(fp)
    a768:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a76c:	e0bffd17 	ldw	r2,-12(fp)
    a770:	10800217 	ldw	r2,8(r2)
    a774:	d0e0cb17 	ldw	r3,-31956(gp)
    a778:	18801d36 	bltu	r3,r2,a7f0 <alt_tick+0xd8>
    a77c:	e0bffd17 	ldw	r2,-12(fp)
    a780:	10800403 	ldbu	r2,16(r2)
    a784:	10803fcc 	andi	r2,r2,255
    a788:	1000191e 	bne	r2,zero,a7f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a78c:	e0bffd17 	ldw	r2,-12(fp)
    a790:	10c00317 	ldw	r3,12(r2)
    a794:	e0bffd17 	ldw	r2,-12(fp)
    a798:	10800517 	ldw	r2,20(r2)
    a79c:	1009883a 	mov	r4,r2
    a7a0:	183ee83a 	callr	r3
    a7a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	1000031e 	bne	r2,zero,a7bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a7b0:	e13ffd17 	ldw	r4,-12(fp)
    a7b4:	000a6800 	call	a680 <alt_alarm_stop>
    a7b8:	00000d06 	br	a7f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a7bc:	e0bffd17 	ldw	r2,-12(fp)
    a7c0:	10c00217 	ldw	r3,8(r2)
    a7c4:	e0bfff17 	ldw	r2,-4(fp)
    a7c8:	1887883a 	add	r3,r3,r2
    a7cc:	e0bffd17 	ldw	r2,-12(fp)
    a7d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a7d4:	e0bffd17 	ldw	r2,-12(fp)
    a7d8:	10c00217 	ldw	r3,8(r2)
    a7dc:	d0a0cb17 	ldw	r2,-31956(gp)
    a7e0:	1880032e 	bgeu	r3,r2,a7f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	00c00044 	movi	r3,1
    a7ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a7f0:	e0bffe17 	ldw	r2,-8(fp)
    a7f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a7f8:	e0fffd17 	ldw	r3,-12(fp)
    a7fc:	d0a00904 	addi	r2,gp,-32732
    a800:	18bfcf1e 	bne	r3,r2,a740 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a804:	0001883a 	nop
}
    a808:	e037883a 	mov	sp,fp
    a80c:	dfc00117 	ldw	ra,4(sp)
    a810:	df000017 	ldw	fp,0(sp)
    a814:	dec00204 	addi	sp,sp,8
    a818:	f800283a 	ret

0000a81c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a81c:	deffff04 	addi	sp,sp,-4
    a820:	df000015 	stw	fp,0(sp)
    a824:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a828:	000170fa 	wrctl	ienable,zero
}
    a82c:	e037883a 	mov	sp,fp
    a830:	df000017 	ldw	fp,0(sp)
    a834:	dec00104 	addi	sp,sp,4
    a838:	f800283a 	ret

0000a83c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a83c:	defffa04 	addi	sp,sp,-24
    a840:	dfc00515 	stw	ra,20(sp)
    a844:	df000415 	stw	fp,16(sp)
    a848:	df000404 	addi	fp,sp,16
    a84c:	e13ffe15 	stw	r4,-8(fp)
    a850:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a854:	e0bfff17 	ldw	r2,-4(fp)
    a858:	10800017 	ldw	r2,0(r2)
    a85c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a860:	e13ffe17 	ldw	r4,-8(fp)
    a864:	00092c00 	call	92c0 <strlen>
    a868:	10800044 	addi	r2,r2,1
    a86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a870:	00000d06 	br	a8a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a874:	e0bffc17 	ldw	r2,-16(fp)
    a878:	10c00217 	ldw	r3,8(r2)
    a87c:	e0bffd17 	ldw	r2,-12(fp)
    a880:	1809883a 	mov	r4,r3
    a884:	e17ffe17 	ldw	r5,-8(fp)
    a888:	100d883a 	mov	r6,r2
    a88c:	000ab600 	call	ab60 <memcmp>
    a890:	1000021e 	bne	r2,zero,a89c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a894:	e0bffc17 	ldw	r2,-16(fp)
    a898:	00000706 	br	a8b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a89c:	e0bffc17 	ldw	r2,-16(fp)
    a8a0:	10800017 	ldw	r2,0(r2)
    a8a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a8a8:	e0fffc17 	ldw	r3,-16(fp)
    a8ac:	e0bfff17 	ldw	r2,-4(fp)
    a8b0:	18bff01e 	bne	r3,r2,a874 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a8b4:	0005883a 	mov	r2,zero
}
    a8b8:	e037883a 	mov	sp,fp
    a8bc:	dfc00117 	ldw	ra,4(sp)
    a8c0:	df000017 	ldw	fp,0(sp)
    a8c4:	dec00204 	addi	sp,sp,8
    a8c8:	f800283a 	ret

0000a8cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a8cc:	defffb04 	addi	sp,sp,-20
    a8d0:	dfc00415 	stw	ra,16(sp)
    a8d4:	df000315 	stw	fp,12(sp)
    a8d8:	df000304 	addi	fp,sp,12
    a8dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a8e0:	00800074 	movhi	r2,1
    a8e4:	10ac7404 	addi	r2,r2,-20016
    a8e8:	10800017 	ldw	r2,0(r2)
    a8ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a8f0:	00003106 	br	a9b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a8f4:	e0bffd17 	ldw	r2,-12(fp)
    a8f8:	10800217 	ldw	r2,8(r2)
    a8fc:	1009883a 	mov	r4,r2
    a900:	00092c00 	call	92c0 <strlen>
    a904:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a908:	e0bffd17 	ldw	r2,-12(fp)
    a90c:	10c00217 	ldw	r3,8(r2)
    a910:	e0bffe17 	ldw	r2,-8(fp)
    a914:	10bfffc4 	addi	r2,r2,-1
    a918:	1885883a 	add	r2,r3,r2
    a91c:	10800003 	ldbu	r2,0(r2)
    a920:	10803fcc 	andi	r2,r2,255
    a924:	1080201c 	xori	r2,r2,128
    a928:	10bfe004 	addi	r2,r2,-128
    a92c:	10800bd8 	cmpnei	r2,r2,47
    a930:	1000031e 	bne	r2,zero,a940 <alt_find_file+0x74>
    {
      len -= 1;
    a934:	e0bffe17 	ldw	r2,-8(fp)
    a938:	10bfffc4 	addi	r2,r2,-1
    a93c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a940:	e0bffe17 	ldw	r2,-8(fp)
    a944:	e0ffff17 	ldw	r3,-4(fp)
    a948:	1885883a 	add	r2,r3,r2
    a94c:	10800003 	ldbu	r2,0(r2)
    a950:	10803fcc 	andi	r2,r2,255
    a954:	1080201c 	xori	r2,r2,128
    a958:	10bfe004 	addi	r2,r2,-128
    a95c:	10800be0 	cmpeqi	r2,r2,47
    a960:	1000081e 	bne	r2,zero,a984 <alt_find_file+0xb8>
    a964:	e0bffe17 	ldw	r2,-8(fp)
    a968:	e0ffff17 	ldw	r3,-4(fp)
    a96c:	1885883a 	add	r2,r3,r2
    a970:	10800003 	ldbu	r2,0(r2)
    a974:	10803fcc 	andi	r2,r2,255
    a978:	1080201c 	xori	r2,r2,128
    a97c:	10bfe004 	addi	r2,r2,-128
    a980:	10000a1e 	bne	r2,zero,a9ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a984:	e0bffd17 	ldw	r2,-12(fp)
    a988:	10c00217 	ldw	r3,8(r2)
    a98c:	e0bffe17 	ldw	r2,-8(fp)
    a990:	1809883a 	mov	r4,r3
    a994:	e17fff17 	ldw	r5,-4(fp)
    a998:	100d883a 	mov	r6,r2
    a99c:	000ab600 	call	ab60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a9a0:	1000021e 	bne	r2,zero,a9ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a9a4:	e0bffd17 	ldw	r2,-12(fp)
    a9a8:	00000806 	br	a9cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	10800017 	ldw	r2,0(r2)
    a9b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a9b8:	e0fffd17 	ldw	r3,-12(fp)
    a9bc:	00800074 	movhi	r2,1
    a9c0:	10ac7404 	addi	r2,r2,-20016
    a9c4:	18bfcb1e 	bne	r3,r2,a8f4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a9c8:	0005883a 	mov	r2,zero
}
    a9cc:	e037883a 	mov	sp,fp
    a9d0:	dfc00117 	ldw	ra,4(sp)
    a9d4:	df000017 	ldw	fp,0(sp)
    a9d8:	dec00204 	addi	sp,sp,8
    a9dc:	f800283a 	ret

0000a9e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a9e0:	defffa04 	addi	sp,sp,-24
    a9e4:	dfc00515 	stw	ra,20(sp)
    a9e8:	df000415 	stw	fp,16(sp)
    a9ec:	dc000315 	stw	r16,12(sp)
    a9f0:	df000304 	addi	fp,sp,12
    a9f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a9f8:	00bffa04 	movi	r2,-24
    a9fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    aa00:	e03ffd15 	stw	zero,-12(fp)
    aa04:	00002106 	br	aa8c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    aa08:	04000074 	movhi	r16,1
    aa0c:	842c1204 	addi	r16,r16,-20408
    aa10:	e0bffd17 	ldw	r2,-12(fp)
    aa14:	1009883a 	mov	r4,r2
    aa18:	01400304 	movi	r5,12
    aa1c:	00094840 	call	9484 <__mulsi3>
    aa20:	8085883a 	add	r2,r16,r2
    aa24:	10800017 	ldw	r2,0(r2)
    aa28:	1000151e 	bne	r2,zero,aa80 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    aa2c:	04000074 	movhi	r16,1
    aa30:	842c1204 	addi	r16,r16,-20408
    aa34:	e0bffd17 	ldw	r2,-12(fp)
    aa38:	1009883a 	mov	r4,r2
    aa3c:	01400304 	movi	r5,12
    aa40:	00094840 	call	9484 <__mulsi3>
    aa44:	8085883a 	add	r2,r16,r2
    aa48:	e0ffff17 	ldw	r3,-4(fp)
    aa4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    aa50:	00800074 	movhi	r2,1
    aa54:	10ac7804 	addi	r2,r2,-20000
    aa58:	10c00017 	ldw	r3,0(r2)
    aa5c:	e0bffd17 	ldw	r2,-12(fp)
    aa60:	1880040e 	bge	r3,r2,aa74 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    aa64:	00800074 	movhi	r2,1
    aa68:	10ac7804 	addi	r2,r2,-20000
    aa6c:	e0fffd17 	ldw	r3,-12(fp)
    aa70:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    aa74:	e0bffd17 	ldw	r2,-12(fp)
    aa78:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    aa7c:	00000606 	br	aa98 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    aa80:	e0bffd17 	ldw	r2,-12(fp)
    aa84:	10800044 	addi	r2,r2,1
    aa88:	e0bffd15 	stw	r2,-12(fp)
    aa8c:	e0bffd17 	ldw	r2,-12(fp)
    aa90:	10800810 	cmplti	r2,r2,32
    aa94:	103fdc1e 	bne	r2,zero,aa08 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    aa98:	e0bffe17 	ldw	r2,-8(fp)
}
    aa9c:	e037883a 	mov	sp,fp
    aaa0:	dfc00217 	ldw	ra,8(sp)
    aaa4:	df000117 	ldw	fp,4(sp)
    aaa8:	dc000017 	ldw	r16,0(sp)
    aaac:	dec00304 	addi	sp,sp,12
    aab0:	f800283a 	ret

0000aab4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    aab4:	defffb04 	addi	sp,sp,-20
    aab8:	df000415 	stw	fp,16(sp)
    aabc:	df000404 	addi	fp,sp,16
    aac0:	e13ffe15 	stw	r4,-8(fp)
    aac4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    aac8:	e0bfff17 	ldw	r2,-4(fp)
    aacc:	10820070 	cmpltui	r2,r2,2049
    aad0:	1000021e 	bne	r2,zero,aadc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    aad4:	00820004 	movi	r2,2048
    aad8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    aadc:	e0fffe17 	ldw	r3,-8(fp)
    aae0:	e0bfff17 	ldw	r2,-4(fp)
    aae4:	1885883a 	add	r2,r3,r2
    aae8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    aaec:	e0bffe17 	ldw	r2,-8(fp)
    aaf0:	e0bffc15 	stw	r2,-16(fp)
    aaf4:	00000506 	br	ab0c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    aaf8:	e0bffc17 	ldw	r2,-16(fp)
    aafc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ab00:	e0bffc17 	ldw	r2,-16(fp)
    ab04:	10800804 	addi	r2,r2,32
    ab08:	e0bffc15 	stw	r2,-16(fp)
    ab0c:	e0fffc17 	ldw	r3,-16(fp)
    ab10:	e0bffd17 	ldw	r2,-12(fp)
    ab14:	18bff836 	bltu	r3,r2,aaf8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ab18:	e0bffe17 	ldw	r2,-8(fp)
    ab1c:	108007cc 	andi	r2,r2,31
    ab20:	10000226 	beq	r2,zero,ab2c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ab24:	e0bffc17 	ldw	r2,-16(fp)
    ab28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ab2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ab30:	e037883a 	mov	sp,fp
    ab34:	df000017 	ldw	fp,0(sp)
    ab38:	dec00104 	addi	sp,sp,4
    ab3c:	f800283a 	ret

0000ab40 <exit>:
    ab40:	defffe04 	addi	sp,sp,-8
    ab44:	000b883a 	mov	r5,zero
    ab48:	dc000015 	stw	r16,0(sp)
    ab4c:	dfc00115 	stw	ra,4(sp)
    ab50:	2021883a 	mov	r16,r4
    ab54:	000aba80 	call	aba8 <__call_exitprocs>
    ab58:	8009883a 	mov	r4,r16
    ab5c:	000ad800 	call	ad80 <_exit>

0000ab60 <memcmp>:
    ab60:	30000d26 	beq	r6,zero,ab98 <memcmp+0x38>
    ab64:	20c00003 	ldbu	r3,0(r4)
    ab68:	28800003 	ldbu	r2,0(r5)
    ab6c:	18800c1e 	bne	r3,r2,aba0 <memcmp+0x40>
    ab70:	31bfff84 	addi	r6,r6,-2
    ab74:	01ffffc4 	movi	r7,-1
    ab78:	00000406 	br	ab8c <memcmp+0x2c>
    ab7c:	20c00003 	ldbu	r3,0(r4)
    ab80:	28800003 	ldbu	r2,0(r5)
    ab84:	31bfffc4 	addi	r6,r6,-1
    ab88:	1880051e 	bne	r3,r2,aba0 <memcmp+0x40>
    ab8c:	21000044 	addi	r4,r4,1
    ab90:	29400044 	addi	r5,r5,1
    ab94:	31fff91e 	bne	r6,r7,ab7c <memcmp+0x1c>
    ab98:	0005883a 	mov	r2,zero
    ab9c:	f800283a 	ret
    aba0:	1885c83a 	sub	r2,r3,r2
    aba4:	f800283a 	ret

0000aba8 <__call_exitprocs>:
    aba8:	00800074 	movhi	r2,1
    abac:	10ac7204 	addi	r2,r2,-20024
    abb0:	10800017 	ldw	r2,0(r2)
    abb4:	defff204 	addi	sp,sp,-56
    abb8:	df000c15 	stw	fp,48(sp)
    abbc:	d8800015 	stw	r2,0(sp)
    abc0:	10800c04 	addi	r2,r2,48
    abc4:	dd400915 	stw	r21,36(sp)
    abc8:	dfc00d15 	stw	ra,52(sp)
    abcc:	ddc00b15 	stw	r23,44(sp)
    abd0:	dd800a15 	stw	r22,40(sp)
    abd4:	dd000815 	stw	r20,32(sp)
    abd8:	dcc00715 	stw	r19,28(sp)
    abdc:	dc800615 	stw	r18,24(sp)
    abe0:	dc400515 	stw	r17,20(sp)
    abe4:	dc000415 	stw	r16,16(sp)
    abe8:	d9000115 	stw	r4,4(sp)
    abec:	2839883a 	mov	fp,r5
    abf0:	d8800215 	stw	r2,8(sp)
    abf4:	057fffc4 	movi	r21,-1
    abf8:	d8800017 	ldw	r2,0(sp)
    abfc:	dd800217 	ldw	r22,8(sp)
    ac00:	15c00c17 	ldw	r23,48(r2)
    ac04:	b8001b26 	beq	r23,zero,ac74 <__call_exitprocs+0xcc>
    ac08:	b9000117 	ldw	r4,4(r23)
    ac0c:	bd002217 	ldw	r20,136(r23)
    ac10:	243fffc4 	addi	r16,r4,-1
    ac14:	80001416 	blt	r16,zero,ac68 <__call_exitprocs+0xc0>
    ac18:	244007c4 	addi	r17,r4,31
    ac1c:	21000044 	addi	r4,r4,1
    ac20:	8c63883a 	add	r17,r17,r17
    ac24:	8427883a 	add	r19,r16,r16
    ac28:	2109883a 	add	r4,r4,r4
    ac2c:	8c63883a 	add	r17,r17,r17
    ac30:	9ce7883a 	add	r19,r19,r19
    ac34:	2109883a 	add	r4,r4,r4
    ac38:	a463883a 	add	r17,r20,r17
    ac3c:	a4e7883a 	add	r19,r20,r19
    ac40:	b925883a 	add	r18,r23,r4
    ac44:	e0001726 	beq	fp,zero,aca4 <__call_exitprocs+0xfc>
    ac48:	a0000226 	beq	r20,zero,ac54 <__call_exitprocs+0xac>
    ac4c:	89400017 	ldw	r5,0(r17)
    ac50:	2f001426 	beq	r5,fp,aca4 <__call_exitprocs+0xfc>
    ac54:	843fffc4 	addi	r16,r16,-1
    ac58:	8c7fff04 	addi	r17,r17,-4
    ac5c:	9cffff04 	addi	r19,r19,-4
    ac60:	94bfff04 	addi	r18,r18,-4
    ac64:	857ff71e 	bne	r16,r21,ac44 <__call_exitprocs+0x9c>
    ac68:	00800034 	movhi	r2,0
    ac6c:	10800004 	addi	r2,r2,0
    ac70:	1000311e 	bne	r2,zero,ad38 <__call_exitprocs+0x190>
    ac74:	dfc00d17 	ldw	ra,52(sp)
    ac78:	df000c17 	ldw	fp,48(sp)
    ac7c:	ddc00b17 	ldw	r23,44(sp)
    ac80:	dd800a17 	ldw	r22,40(sp)
    ac84:	dd400917 	ldw	r21,36(sp)
    ac88:	dd000817 	ldw	r20,32(sp)
    ac8c:	dcc00717 	ldw	r19,28(sp)
    ac90:	dc800617 	ldw	r18,24(sp)
    ac94:	dc400517 	ldw	r17,20(sp)
    ac98:	dc000417 	ldw	r16,16(sp)
    ac9c:	dec00e04 	addi	sp,sp,56
    aca0:	f800283a 	ret
    aca4:	b9000117 	ldw	r4,4(r23)
    aca8:	92000017 	ldw	r8,0(r18)
    acac:	213fffc4 	addi	r4,r4,-1
    acb0:	24001a26 	beq	r4,r16,ad1c <__call_exitprocs+0x174>
    acb4:	90000015 	stw	zero,0(r18)
    acb8:	403fe626 	beq	r8,zero,ac54 <__call_exitprocs+0xac>
    acbc:	ba400117 	ldw	r9,4(r23)
    acc0:	a0001226 	beq	r20,zero,ad0c <__call_exitprocs+0x164>
    acc4:	00800044 	movi	r2,1
    acc8:	1408983a 	sll	r4,r2,r16
    accc:	a1404017 	ldw	r5,256(r20)
    acd0:	214a703a 	and	r5,r4,r5
    acd4:	28000d26 	beq	r5,zero,ad0c <__call_exitprocs+0x164>
    acd8:	a1404117 	ldw	r5,260(r20)
    acdc:	2148703a 	and	r4,r4,r5
    ace0:	2000101e 	bne	r4,zero,ad24 <__call_exitprocs+0x17c>
    ace4:	99400017 	ldw	r5,0(r19)
    ace8:	d9000117 	ldw	r4,4(sp)
    acec:	da400315 	stw	r9,12(sp)
    acf0:	403ee83a 	callr	r8
    acf4:	da400317 	ldw	r9,12(sp)
    acf8:	b9000117 	ldw	r4,4(r23)
    acfc:	227fbe1e 	bne	r4,r9,abf8 <__call_exitprocs+0x50>
    ad00:	b1000017 	ldw	r4,0(r22)
    ad04:	25ffd326 	beq	r4,r23,ac54 <__call_exitprocs+0xac>
    ad08:	003fbb06 	br	abf8 <__call_exitprocs+0x50>
    ad0c:	da400315 	stw	r9,12(sp)
    ad10:	403ee83a 	callr	r8
    ad14:	da400317 	ldw	r9,12(sp)
    ad18:	003ff706 	br	acf8 <__call_exitprocs+0x150>
    ad1c:	bc000115 	stw	r16,4(r23)
    ad20:	003fe506 	br	acb8 <__call_exitprocs+0x110>
    ad24:	99000017 	ldw	r4,0(r19)
    ad28:	da400315 	stw	r9,12(sp)
    ad2c:	403ee83a 	callr	r8
    ad30:	da400317 	ldw	r9,12(sp)
    ad34:	003ff006 	br	acf8 <__call_exitprocs+0x150>
    ad38:	b9000117 	ldw	r4,4(r23)
    ad3c:	20000e1e 	bne	r4,zero,ad78 <__call_exitprocs+0x1d0>
    ad40:	b9000017 	ldw	r4,0(r23)
    ad44:	20000826 	beq	r4,zero,ad68 <__call_exitprocs+0x1c0>
    ad48:	b1000015 	stw	r4,0(r22)
    ad4c:	a0000226 	beq	r20,zero,ad58 <__call_exitprocs+0x1b0>
    ad50:	a009883a 	mov	r4,r20
    ad54:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    ad58:	b809883a 	mov	r4,r23
    ad5c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    ad60:	b5c00017 	ldw	r23,0(r22)
    ad64:	003fa706 	br	ac04 <__call_exitprocs+0x5c>
    ad68:	0007883a 	mov	r3,zero
    ad6c:	b82d883a 	mov	r22,r23
    ad70:	182f883a 	mov	r23,r3
    ad74:	003fa306 	br	ac04 <__call_exitprocs+0x5c>
    ad78:	b8c00017 	ldw	r3,0(r23)
    ad7c:	003ffb06 	br	ad6c <__call_exitprocs+0x1c4>

0000ad80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ad80:	defffc04 	addi	sp,sp,-16
    ad84:	df000315 	stw	fp,12(sp)
    ad88:	df000304 	addi	fp,sp,12
    ad8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ad90:	0001883a 	nop
    ad94:	e0bfff17 	ldw	r2,-4(fp)
    ad98:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    ad9c:	e0bffd17 	ldw	r2,-12(fp)
    ada0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ada4:	e0bffe17 	ldw	r2,-8(fp)
    ada8:	10000226 	beq	r2,zero,adb4 <_exit+0x34>
    ALT_SIM_FAIL();
    adac:	002af070 	cmpltui	zero,zero,43969
    adb0:	00000106 	br	adb8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    adb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    adb8:	003fff06 	br	adb8 <_exit+0x38>

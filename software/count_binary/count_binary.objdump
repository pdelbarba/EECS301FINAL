
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006cb0 memsz 0x00006cb0 flags r-x
    LOAD off    0x00007cd0 vaddr 0x00806cd0 paddr 0x00806fb0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00008290 vaddr 0x00807290 paddr 0x00807290 align 2**12
         filesz 0x00000000 memsz 0x000002b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000067a4  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000374  0080695c  0080695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00806cd0  00806fb0  00007cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b0  00807290  00807290  00008290  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a78  00000000  00000000  00007fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e3ad  00000000  00000000  00008a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d09  00000000  00000000  00016dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000055e2  00000000  00000000  0001cb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f20  00000000  00000000  000220e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002020  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000639a  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0002b3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000568  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002db88  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0002db8b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002db8e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002db8f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002db94  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002db98  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0002db9c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0002dba5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0002dbae  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000f  00000000  00000000  0002dbb7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000040  00000000  00000000  0002dbc6  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003de26  00000000  00000000  0002dc06  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0080695c l    d  .rodata	00000000 .rodata
00806cd0 l    d  .rwdata	00000000 .rwdata
00807290 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
008001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
00807290 l     O .bss	00000002 in
008001f4 l     F .text	00000084 load_buffer
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00806a24 l     O .rodata	00000108 two_over_pi
008069a4 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00806b2c l     O .rodata	00000010 init_jk
00806b3c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00802ac8 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
008030ac l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00803cb0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00806cd0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0080504c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
008051d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805310 l     F .text	00000038 alt_dev_reg
00806db0 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00805614 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00805864 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080599c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008059c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805db0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00805f08 l     F .text	00000050 alt_get_errno
00805f58 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00805138 g     F .text	00000068 alt_main
00804620 g     F .text	00000044 __ashldi3
008046ec g     F .text	00000080 _puts_r
00807440 g     O .bss	00000100 alt_irq
00802714 g     F .text	00000014 fabs
00806fb0 g       *ABS*	00000000 __flash_rwdata_start
0080394c g     F .text	0000005c __eqdf2
008046a0 g     F .text	0000004c printf
00802ef0 g     F .text	000000a4 __fixsfsi
008039a8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807294 g     O .bss	00000004 errno
00803c18 g     F .text	00000038 __make_dp
00802728 g     F .text	000001f0 floor
008041b8 g     F .text	0000002c __make_fp
0080729c g     O .bss	00000004 alt_argv
0080ef84 g       *ABS*	00000000 _gp
008051a0 g     F .text	00000030 usleep
00802d08 g     F .text	00000058 __subsf3
00806e04 g     O .rwdata	00000180 alt_fd_list
00800a34 g     F .text	000007b8 __ieee754_rem_pio2
008063dc g     F .text	00000090 alt_find_dev
00803a70 g     F .text	000000d4 __floatsidf
00805e90 g     F .text	00000078 alt_io_redirect
0080476c g     F .text	00000014 puts
00805488 g     F .text	000000f4 altera_avalon_jtag_uart_read
00804664 g     F .text	0000003c _printf_r
00803dd0 g     F .text	00000008 __udivsi3
008011ec g     F .text	000004a4 __kernel_cos
00806654 g     F .text	0000008c alt_icache_flush
00806f9c g     O .rwdata	00000004 alt_max_fd
00804408 g     F .text	00000104 __unpack_d
00802440 g     F .text	000002d4 __kernel_sin
00802f94 g     F .text	00000044 __extendsfdf2
00803400 g     F .text	00000054 __adddf3
00806f84 g     O .rwdata	00000004 _global_impure_ptr
00807540 g       *ABS*	00000000 __bss_end
00805cc0 g     F .text	000000f0 alt_iic_isr_register
008062b8 g     F .text	00000104 alt_tick
00805c74 g     F .text	0000004c alt_ic_irq_enabled
00806220 g     F .text	00000098 alt_alarm_stop
008072a4 g     O .bss	00000004 alt_irq_active
01010000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000cc alt_irq_handler
00806ddc g     O .rwdata	00000028 alt_dev_null
00801690 g     F .text	00000db0 __kernel_rem_pio2
008040f0 g     F .text	000000c8 __unpack_f
00805980 g     F .text	0000001c alt_dcache_flush_all
00803b44 g     F .text	000000d4 __fixdfsi
00806fb0 g       *ABS*	00000000 __ram_rwdata_end
00806f94 g     O .rwdata	00000008 alt_dev_list
00805220 g     F .text	000000f0 write
00806cd0 g       *ABS*	00000000 __ram_rodata_end
008045dc g     F .text	00000044 __lshrdi3
00803dd8 g     F .text	00000008 __umodsi3
00807540 g       *ABS*	00000000 end
00803fc4 g     F .text	0000012c __pack_f
01000000 g       *ABS*	00000000 __alt_stack_pointer
00805688 g     F .text	00000088 alt_avalon_timer_sc_init
00803f18 g     F .text	000000ac __clzsi2
0080557c g     F .text	00000098 altera_avalon_jtag_uart_write
008047a8 g     F .text	00000734 ___vfprintf_internal_r
00806748 g     F .text	000001d8 __call_exitprocs
008001b8 g     F .text	0000003c _start
008072a8 g     O .bss	00000004 _alt_tick_rate
00800944 g     F .text	000000f0 sin
008072ac g     O .bss	00000004 _alt_nticks
0080537c g     F .text	0000004c alt_sys_init
008072b0 g     O .bss	00000190 buffer
00803de0 g     F .text	00000028 __mulsi3
00806cd0 g       *ABS*	00000000 __ram_rwdata_start
0080695c g       *ABS*	00000000 __ram_rodata_start
008053c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00806580 g     F .text	000000d4 alt_get_fd
00805710 g     F .text	00000154 alt_busy_sleep
0080450c g     F .text	000000d0 __fpcmp_parts_d
00806700 g     F .text	00000048 memcmp
00807540 g       *ABS*	00000000 __alt_stack_base
00803798 g     F .text	000001b4 __divdf3
008034b4 g     F .text	000002e4 __muldf3
00806b7c g     O .rodata	00000010 __thenan_sf
0080646c g     F .text	00000114 alt_find_file
00805a18 g     F .text	000000a0 alt_dev_llist_insert
00804f00 g     F .text	000000e0 __sfvwrite_small_dev
00807290 g       *ABS*	00000000 __bss_start
008008cc g     F .text	00000078 main
008072a0 g     O .bss	00000004 alt_envp
00805428 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00803c50 g     F .text	00000060 __truncdfsf2
00806fa0 g     O .rwdata	00000004 alt_errno
00803d24 g     F .text	00000050 __divsi3
00806b8c g     O .rodata	00000014 __thenan_df
00802d60 g     F .text	00000190 __mulsf3
0080695c g       *ABS*	00000000 __flash_rodata_start
00802aac g     F .text	0000001c copysign
00805348 g     F .text	00000034 alt_irq_init
008061a0 g     F .text	00000080 alt_release_fd
00806ba0 g     O .rodata	00000100 __clz_tab
00804fe0 g     F .text	0000006c _write_r
00806f88 g     O .rwdata	00000004 _impure_ptr
00807298 g     O .bss	00000004 alt_argc
00802918 g     F .text	00000194 scalbn
00800020 g       .exceptions	00000000 alt_irq_entry
00800278 g     F .text	00000654 fft
00806f8c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00805ae8 g     F .text	00000050 alt_ic_isr_register
00806fb0 g       *ABS*	00000000 _edata
00807540 g       *ABS*	00000000 _end
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00805bd4 g     F .text	000000a0 alt_ic_irq_disable
008063bc g     F .text	00000020 altera_nios2_qsys_irq_init
008066e0 g     F .text	00000020 exit
00802fd8 g     F .text	000000d4 __floatunsisf
00803d74 g     F .text	0000005c __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806920 g     F .text	0000003c _exit
00803e08 g     F .text	00000110 __muldi3
00804780 g     F .text	00000028 strlen
00806048 g     F .text	00000158 open
00803a0c g     F .text	00000064 __gedf2
00805ab8 g     F .text	00000030 alt_icache_flush_all
00806fa4 g     O .rwdata	00000004 alt_priority_mask
00805b38 g     F .text	0000009c alt_ic_irq_enable
00804edc g     F .text	00000024 __vfprintf_internal
00803454 g     F .text	00000060 __subdf3
00806fa8 g     O .rwdata	00000008 alt_alarm_list
008058b4 g     F .text	000000cc close
00802cbc g     F .text	0000004c __addsf3
008050b8 g     F .text	00000080 alt_load
008041e4 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001726 	beq	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00c02034 	movhi	r3,128
  800130:	18dd1004 	addi	r3,r3,29760
  800134:	e0bffd17 	ldw	r2,-12(fp)
  800138:	100490fa 	slli	r2,r2,3
  80013c:	1885883a 	add	r2,r3,r2
  800140:	10c00017 	ldw	r3,0(r2)
  800144:	01002034 	movhi	r4,128
  800148:	211d1004 	addi	r4,r4,29760
  80014c:	e0bffd17 	ldw	r2,-12(fp)
  800150:	100490fa 	slli	r2,r2,3
  800154:	2085883a 	add	r2,r4,r2
  800158:	10800104 	addi	r2,r2,4
  80015c:	10800017 	ldw	r2,0(r2)
  800160:	1009883a 	mov	r4,r2
  800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80017c:	e0bffb17 	ldw	r2,-20(fp)
  800180:	103fe31e 	bne	r2,zero,800110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffc17 	ldw	r2,-16(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fde06 	br	80011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001c0:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001c4:	d6bbe114 	ori	gp,gp,61316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c8:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001cc:	109ca414 	ori	r2,r2,29328

    movhi r3, %hi(__bss_end)
  8001d0:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001d4:	18dd5014 	ori	r3,r3,30016

    beq r2, r3, 1f
  8001d8:	10c00326 	beq	r2,r3,8001e8 <_start+0x30>

0:
    stw zero, (r2)
  8001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e4:	10fffd36 	bltu	r2,r3,8001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e8:	08050b80 	call	8050b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001ec:	08051380 	call	805138 <alt_main>

008001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f0:	003fff06 	br	8001f0 <alt_after_alt_main>

008001f4 <load_buffer>:
/* A "loop counter" variable. */
static alt_u16 in;
float buffer [BUFF_SIZE];

static void load_buffer()
{
  8001f4:	defffd04 	addi	sp,sp,-12
  8001f8:	dfc00215 	stw	ra,8(sp)
  8001fc:	df000115 	stw	fp,4(sp)
  800200:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < BUFF_SIZE; i++)
  800204:	e03fff15 	stw	zero,-4(fp)
  800208:	00001306 	br	800258 <load_buffer+0x64>
	{
		in = IORD_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE);
  80020c:	008040b4 	movhi	r2,258
  800210:	10840804 	addi	r2,r2,4128
  800214:	10800037 	ldwio	r2,0(r2)
  800218:	d0a0c30d 	sth	r2,-31988(gp)
		buffer[i] = in;
  80021c:	d0a0c30b 	ldhu	r2,-31988(gp)
  800220:	10bfffcc 	andi	r2,r2,65535
  800224:	1009883a 	mov	r4,r2
  800228:	0802fd80 	call	802fd8 <__floatunsisf>
  80022c:	1007883a 	mov	r3,r2
  800230:	01002034 	movhi	r4,128
  800234:	211cac04 	addi	r4,r4,29360
  800238:	e0bfff17 	ldw	r2,-4(fp)
  80023c:	1085883a 	add	r2,r2,r2
  800240:	1085883a 	add	r2,r2,r2
  800244:	2085883a 	add	r2,r4,r2
  800248:	10c00015 	stw	r3,0(r2)
float buffer [BUFF_SIZE];

static void load_buffer()
{
	int i;
	for (i = 0; i < BUFF_SIZE; i++)
  80024c:	e0bfff17 	ldw	r2,-4(fp)
  800250:	10800044 	addi	r2,r2,1
  800254:	e0bfff15 	stw	r2,-4(fp)
  800258:	e0bfff17 	ldw	r2,-4(fp)
  80025c:	10801910 	cmplti	r2,r2,100
  800260:	103fea1e 	bne	r2,zero,80020c <load_buffer+0x18>
	{
		in = IORD_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE);
		buffer[i] = in;
		//IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, in);
	}
}
  800264:	e037883a 	mov	sp,fp
  800268:	dfc00117 	ldw	ra,4(sp)
  80026c:	df000017 	ldw	fp,0(sp)
  800270:	dec00204 	addi	sp,sp,8
  800274:	f800283a 	ret

00800278 <fft>:

void fft(float* data, unsigned long nn)
{
  800278:	deffed04 	addi	sp,sp,-76
  80027c:	dfc01215 	stw	ra,72(sp)
  800280:	df001115 	stw	fp,68(sp)
  800284:	dc401015 	stw	r17,64(sp)
  800288:	dc000f15 	stw	r16,60(sp)
  80028c:	df000f04 	addi	fp,sp,60
  800290:	e13ffe15 	stw	r4,-8(fp)
  800294:	e17fff15 	stw	r5,-4(fp)
    unsigned short n, mmax, m, j, istep, i;
    float wtemp, wr, wpr, wpi, wi, theta;
    float tempr, tempi, swp;

    // reverse-binary reindexing
    n = nn<<1;
  800298:	e0bfff17 	ldw	r2,-4(fp)
  80029c:	1085883a 	add	r2,r2,r2
  8002a0:	e0bff50d 	sth	r2,-44(fp)
    j=1;
  8002a4:	00800044 	movi	r2,1
  8002a8:	e0bff20d 	sth	r2,-56(fp)
    for (i=1; i<n; i+=2) {
  8002ac:	00800044 	movi	r2,1
  8002b0:	e0bff28d 	sth	r2,-54(fp)
  8002b4:	00005206 	br	800400 <fft+0x188>
        if (j>i) {
  8002b8:	e0bff20b 	ldhu	r2,-56(fp)
  8002bc:	e0fff28b 	ldhu	r3,-54(fp)
  8002c0:	1880382e 	bgeu	r3,r2,8003a4 <fft+0x12c>

            swp = data[j-1];
  8002c4:	e0bff20b 	ldhu	r2,-56(fp)
  8002c8:	10bfffc4 	addi	r2,r2,-1
  8002cc:	1085883a 	add	r2,r2,r2
  8002d0:	1085883a 	add	r2,r2,r2
  8002d4:	e0fffe17 	ldw	r3,-8(fp)
  8002d8:	1885883a 	add	r2,r3,r2
  8002dc:	10800017 	ldw	r2,0(r2)
  8002e0:	e0bff615 	stw	r2,-40(fp)
            data[j-1] = data[i-1];
  8002e4:	e0bff20b 	ldhu	r2,-56(fp)
  8002e8:	10bfffc4 	addi	r2,r2,-1
  8002ec:	1085883a 	add	r2,r2,r2
  8002f0:	1085883a 	add	r2,r2,r2
  8002f4:	e0fffe17 	ldw	r3,-8(fp)
  8002f8:	1887883a 	add	r3,r3,r2
  8002fc:	e0bff28b 	ldhu	r2,-54(fp)
  800300:	10bfffc4 	addi	r2,r2,-1
  800304:	1085883a 	add	r2,r2,r2
  800308:	1085883a 	add	r2,r2,r2
  80030c:	e13ffe17 	ldw	r4,-8(fp)
  800310:	2089883a 	add	r4,r4,r2
  800314:	20800017 	ldw	r2,0(r4)
  800318:	18800015 	stw	r2,0(r3)
            data[i-1] = swp;
  80031c:	e0bff28b 	ldhu	r2,-54(fp)
  800320:	10bfffc4 	addi	r2,r2,-1
  800324:	1085883a 	add	r2,r2,r2
  800328:	1085883a 	add	r2,r2,r2
  80032c:	e0fffe17 	ldw	r3,-8(fp)
  800330:	1885883a 	add	r2,r3,r2
  800334:	e0fff617 	ldw	r3,-40(fp)
  800338:	10c00015 	stw	r3,0(r2)

            swp = data[j];
  80033c:	e0bff20b 	ldhu	r2,-56(fp)
  800340:	1085883a 	add	r2,r2,r2
  800344:	1085883a 	add	r2,r2,r2
  800348:	e0fffe17 	ldw	r3,-8(fp)
  80034c:	1885883a 	add	r2,r3,r2
  800350:	10800017 	ldw	r2,0(r2)
  800354:	e0bff615 	stw	r2,-40(fp)
            data[j] = data[i];
  800358:	e0bff20b 	ldhu	r2,-56(fp)
  80035c:	1085883a 	add	r2,r2,r2
  800360:	1085883a 	add	r2,r2,r2
  800364:	e0fffe17 	ldw	r3,-8(fp)
  800368:	1887883a 	add	r3,r3,r2
  80036c:	e0bff28b 	ldhu	r2,-54(fp)
  800370:	1085883a 	add	r2,r2,r2
  800374:	1085883a 	add	r2,r2,r2
  800378:	e13ffe17 	ldw	r4,-8(fp)
  80037c:	2089883a 	add	r4,r4,r2
  800380:	20800017 	ldw	r2,0(r4)
  800384:	18800015 	stw	r2,0(r3)
            data[i] = swp;
  800388:	e0bff28b 	ldhu	r2,-54(fp)
  80038c:	1085883a 	add	r2,r2,r2
  800390:	1085883a 	add	r2,r2,r2
  800394:	e0fffe17 	ldw	r3,-8(fp)
  800398:	1885883a 	add	r2,r3,r2
  80039c:	e0fff617 	ldw	r3,-40(fp)
  8003a0:	10c00015 	stw	r3,0(r2)
        }
        m = nn;
  8003a4:	e0bfff17 	ldw	r2,-4(fp)
  8003a8:	e0bff18d 	sth	r2,-58(fp)
        while (m>=2 && j>m) {
  8003ac:	00000706 	br	8003cc <fft+0x154>
            j -= m;
  8003b0:	e0fff20b 	ldhu	r3,-56(fp)
  8003b4:	e0bff18b 	ldhu	r2,-58(fp)
  8003b8:	1885c83a 	sub	r2,r3,r2
  8003bc:	e0bff20d 	sth	r2,-56(fp)
            m >>= 1;
  8003c0:	e0bff18b 	ldhu	r2,-58(fp)
  8003c4:	1004d07a 	srli	r2,r2,1
  8003c8:	e0bff18d 	sth	r2,-58(fp)
            swp = data[j];
            data[j] = data[i];
            data[i] = swp;
        }
        m = nn;
        while (m>=2 && j>m) {
  8003cc:	e0bff18b 	ldhu	r2,-58(fp)
  8003d0:	108000b0 	cmpltui	r2,r2,2
  8003d4:	1000031e 	bne	r2,zero,8003e4 <fft+0x16c>
  8003d8:	e0bff20b 	ldhu	r2,-56(fp)
  8003dc:	e0fff18b 	ldhu	r3,-58(fp)
  8003e0:	18bff336 	bltu	r3,r2,8003b0 <fft+0x138>
            j -= m;
            m >>= 1;
        }
        j += m;
  8003e4:	e0fff20b 	ldhu	r3,-56(fp)
  8003e8:	e0bff18b 	ldhu	r2,-58(fp)
  8003ec:	1885883a 	add	r2,r3,r2
  8003f0:	e0bff20d 	sth	r2,-56(fp)
    float tempr, tempi, swp;

    // reverse-binary reindexing
    n = nn<<1;
    j=1;
    for (i=1; i<n; i+=2) {
  8003f4:	e0bff28b 	ldhu	r2,-54(fp)
  8003f8:	10800084 	addi	r2,r2,2
  8003fc:	e0bff28d 	sth	r2,-54(fp)
  800400:	e0fff28b 	ldhu	r3,-54(fp)
  800404:	e0bff50b 	ldhu	r2,-44(fp)
  800408:	18bfab36 	bltu	r3,r2,8002b8 <fft+0x40>
        }
        j += m;
    };

    // here begins the Danielson-Lanczos section
    mmax=2;
  80040c:	00800084 	movi	r2,2
  800410:	e0bff10d 	sth	r2,-60(fp)
    while (n>mmax) {
  800414:	00012306 	br	8008a4 <fft+0x62c>
        istep = mmax<<1;
  800418:	e0bff10b 	ldhu	r2,-60(fp)
  80041c:	1085883a 	add	r2,r2,r2
  800420:	e0bff70d 	sth	r2,-36(fp)
        theta = -(2*M_PI/mmax);
  800424:	e0bff10b 	ldhu	r2,-60(fp)
  800428:	1009883a 	mov	r4,r2
  80042c:	0803a700 	call	803a70 <__floatsidf>
  800430:	100f883a 	mov	r7,r2
  800434:	1811883a 	mov	r8,r3
  800438:	01151134 	movhi	r4,21572
  80043c:	210b4604 	addi	r4,r4,11544
  800440:	01500674 	movhi	r5,16409
  800444:	29487ec4 	addi	r5,r5,8699
  800448:	380d883a 	mov	r6,r7
  80044c:	400f883a 	mov	r7,r8
  800450:	08037980 	call	803798 <__divdf3>
  800454:	1009883a 	mov	r4,r2
  800458:	180b883a 	mov	r5,r3
  80045c:	2005883a 	mov	r2,r4
  800460:	2807883a 	mov	r3,r5
  800464:	1009883a 	mov	r4,r2
  800468:	180b883a 	mov	r5,r3
  80046c:	0803c500 	call	803c50 <__truncdfsf2>
  800470:	1007883a 	mov	r3,r2
  800474:	18a0003c 	xorhi	r2,r3,32768
  800478:	e0bff815 	stw	r2,-32(fp)
        wtemp = sin(0.5*theta);
  80047c:	e13ff817 	ldw	r4,-32(fp)
  800480:	0802f940 	call	802f94 <__extendsfdf2>
  800484:	100b883a 	mov	r5,r2
  800488:	180d883a 	mov	r6,r3
  80048c:	2809883a 	mov	r4,r5
  800490:	300b883a 	mov	r5,r6
  800494:	000d883a 	mov	r6,zero
  800498:	01cff834 	movhi	r7,16352
  80049c:	08034b40 	call	8034b4 <__muldf3>
  8004a0:	1009883a 	mov	r4,r2
  8004a4:	180b883a 	mov	r5,r3
  8004a8:	2005883a 	mov	r2,r4
  8004ac:	2807883a 	mov	r3,r5
  8004b0:	1009883a 	mov	r4,r2
  8004b4:	180b883a 	mov	r5,r3
  8004b8:	08009440 	call	800944 <sin>
  8004bc:	100b883a 	mov	r5,r2
  8004c0:	180d883a 	mov	r6,r3
  8004c4:	2809883a 	mov	r4,r5
  8004c8:	300b883a 	mov	r5,r6
  8004cc:	0803c500 	call	803c50 <__truncdfsf2>
  8004d0:	1007883a 	mov	r3,r2
  8004d4:	e0fff915 	stw	r3,-28(fp)
        wpr = -2.0*wtemp*wtemp;
  8004d8:	e13ff917 	ldw	r4,-28(fp)
  8004dc:	0802f940 	call	802f94 <__extendsfdf2>
  8004e0:	100b883a 	mov	r5,r2
  8004e4:	180d883a 	mov	r6,r3
  8004e8:	2809883a 	mov	r4,r5
  8004ec:	300b883a 	mov	r5,r6
  8004f0:	000d883a 	mov	r6,zero
  8004f4:	01f00034 	movhi	r7,49152
  8004f8:	08034b40 	call	8034b4 <__muldf3>
  8004fc:	1009883a 	mov	r4,r2
  800500:	180b883a 	mov	r5,r3
  800504:	2021883a 	mov	r16,r4
  800508:	2823883a 	mov	r17,r5
  80050c:	e13ff917 	ldw	r4,-28(fp)
  800510:	0802f940 	call	802f94 <__extendsfdf2>
  800514:	100f883a 	mov	r7,r2
  800518:	1811883a 	mov	r8,r3
  80051c:	8009883a 	mov	r4,r16
  800520:	880b883a 	mov	r5,r17
  800524:	380d883a 	mov	r6,r7
  800528:	400f883a 	mov	r7,r8
  80052c:	08034b40 	call	8034b4 <__muldf3>
  800530:	1009883a 	mov	r4,r2
  800534:	180b883a 	mov	r5,r3
  800538:	2005883a 	mov	r2,r4
  80053c:	2807883a 	mov	r3,r5
  800540:	1009883a 	mov	r4,r2
  800544:	180b883a 	mov	r5,r3
  800548:	0803c500 	call	803c50 <__truncdfsf2>
  80054c:	1007883a 	mov	r3,r2
  800550:	e0fffa15 	stw	r3,-24(fp)
        wpi = sin(theta);
  800554:	e13ff817 	ldw	r4,-32(fp)
  800558:	0802f940 	call	802f94 <__extendsfdf2>
  80055c:	100b883a 	mov	r5,r2
  800560:	180d883a 	mov	r6,r3
  800564:	2809883a 	mov	r4,r5
  800568:	300b883a 	mov	r5,r6
  80056c:	08009440 	call	800944 <sin>
  800570:	100b883a 	mov	r5,r2
  800574:	180d883a 	mov	r6,r3
  800578:	2809883a 	mov	r4,r5
  80057c:	300b883a 	mov	r5,r6
  800580:	0803c500 	call	803c50 <__truncdfsf2>
  800584:	1007883a 	mov	r3,r2
  800588:	e0fffb15 	stw	r3,-20(fp)
        wr = 1.0;
  80058c:	008fe034 	movhi	r2,16256
  800590:	e0bff315 	stw	r2,-52(fp)
        wi = 0.0;
  800594:	e03ff415 	stw	zero,-48(fp)
        for (m=1; m < mmax; m += 2) {
  800598:	00800044 	movi	r2,1
  80059c:	e0bff18d 	sth	r2,-58(fp)
  8005a0:	0000bb06 	br	800890 <fft+0x618>
            for (i=m; i <= n; i += istep) {
  8005a4:	e0bff18b 	ldhu	r2,-58(fp)
  8005a8:	e0bff28d 	sth	r2,-54(fp)
  8005ac:	00008806 	br	8007d0 <fft+0x558>
                j=i+mmax;
  8005b0:	e0fff28b 	ldhu	r3,-54(fp)
  8005b4:	e0bff10b 	ldhu	r2,-60(fp)
  8005b8:	1885883a 	add	r2,r3,r2
  8005bc:	e0bff20d 	sth	r2,-56(fp)
                tempr = wr*data[j-1] - wi*data[j];
  8005c0:	e0bff20b 	ldhu	r2,-56(fp)
  8005c4:	10bfffc4 	addi	r2,r2,-1
  8005c8:	1085883a 	add	r2,r2,r2
  8005cc:	1085883a 	add	r2,r2,r2
  8005d0:	e0fffe17 	ldw	r3,-8(fp)
  8005d4:	1887883a 	add	r3,r3,r2
  8005d8:	18800017 	ldw	r2,0(r3)
  8005dc:	1009883a 	mov	r4,r2
  8005e0:	e17ff317 	ldw	r5,-52(fp)
  8005e4:	0802d600 	call	802d60 <__mulsf3>
  8005e8:	1007883a 	mov	r3,r2
  8005ec:	1821883a 	mov	r16,r3
  8005f0:	e0bff20b 	ldhu	r2,-56(fp)
  8005f4:	1085883a 	add	r2,r2,r2
  8005f8:	1085883a 	add	r2,r2,r2
  8005fc:	e0fffe17 	ldw	r3,-8(fp)
  800600:	1887883a 	add	r3,r3,r2
  800604:	18800017 	ldw	r2,0(r3)
  800608:	1009883a 	mov	r4,r2
  80060c:	e17ff417 	ldw	r5,-48(fp)
  800610:	0802d600 	call	802d60 <__mulsf3>
  800614:	1007883a 	mov	r3,r2
  800618:	1805883a 	mov	r2,r3
  80061c:	8009883a 	mov	r4,r16
  800620:	100b883a 	mov	r5,r2
  800624:	0802d080 	call	802d08 <__subsf3>
  800628:	1007883a 	mov	r3,r2
  80062c:	e0fffc15 	stw	r3,-16(fp)
                tempi = wr * data[j] + wi*data[j-1];
  800630:	e0bff20b 	ldhu	r2,-56(fp)
  800634:	1085883a 	add	r2,r2,r2
  800638:	1085883a 	add	r2,r2,r2
  80063c:	e0fffe17 	ldw	r3,-8(fp)
  800640:	1887883a 	add	r3,r3,r2
  800644:	18800017 	ldw	r2,0(r3)
  800648:	1009883a 	mov	r4,r2
  80064c:	e17ff317 	ldw	r5,-52(fp)
  800650:	0802d600 	call	802d60 <__mulsf3>
  800654:	1007883a 	mov	r3,r2
  800658:	1821883a 	mov	r16,r3
  80065c:	e0bff20b 	ldhu	r2,-56(fp)
  800660:	10bfffc4 	addi	r2,r2,-1
  800664:	1085883a 	add	r2,r2,r2
  800668:	1085883a 	add	r2,r2,r2
  80066c:	e0fffe17 	ldw	r3,-8(fp)
  800670:	1887883a 	add	r3,r3,r2
  800674:	18800017 	ldw	r2,0(r3)
  800678:	1009883a 	mov	r4,r2
  80067c:	e17ff417 	ldw	r5,-48(fp)
  800680:	0802d600 	call	802d60 <__mulsf3>
  800684:	1007883a 	mov	r3,r2
  800688:	1805883a 	mov	r2,r3
  80068c:	8009883a 	mov	r4,r16
  800690:	100b883a 	mov	r5,r2
  800694:	0802cbc0 	call	802cbc <__addsf3>
  800698:	1007883a 	mov	r3,r2
  80069c:	e0fffd15 	stw	r3,-12(fp)

                data[j-1] = data[i-1] - tempr;
  8006a0:	e0bff20b 	ldhu	r2,-56(fp)
  8006a4:	10bfffc4 	addi	r2,r2,-1
  8006a8:	1085883a 	add	r2,r2,r2
  8006ac:	1085883a 	add	r2,r2,r2
  8006b0:	e0fffe17 	ldw	r3,-8(fp)
  8006b4:	18a1883a 	add	r16,r3,r2
  8006b8:	e0bff28b 	ldhu	r2,-54(fp)
  8006bc:	10bfffc4 	addi	r2,r2,-1
  8006c0:	1085883a 	add	r2,r2,r2
  8006c4:	1085883a 	add	r2,r2,r2
  8006c8:	e0fffe17 	ldw	r3,-8(fp)
  8006cc:	1887883a 	add	r3,r3,r2
  8006d0:	18800017 	ldw	r2,0(r3)
  8006d4:	1009883a 	mov	r4,r2
  8006d8:	e17ffc17 	ldw	r5,-16(fp)
  8006dc:	0802d080 	call	802d08 <__subsf3>
  8006e0:	1007883a 	mov	r3,r2
  8006e4:	1805883a 	mov	r2,r3
  8006e8:	80800015 	stw	r2,0(r16)
                data[j] = data[i] - tempi;
  8006ec:	e0bff20b 	ldhu	r2,-56(fp)
  8006f0:	1085883a 	add	r2,r2,r2
  8006f4:	1085883a 	add	r2,r2,r2
  8006f8:	e0fffe17 	ldw	r3,-8(fp)
  8006fc:	18a1883a 	add	r16,r3,r2
  800700:	e0bff28b 	ldhu	r2,-54(fp)
  800704:	1085883a 	add	r2,r2,r2
  800708:	1085883a 	add	r2,r2,r2
  80070c:	e0fffe17 	ldw	r3,-8(fp)
  800710:	1887883a 	add	r3,r3,r2
  800714:	18800017 	ldw	r2,0(r3)
  800718:	1009883a 	mov	r4,r2
  80071c:	e17ffd17 	ldw	r5,-12(fp)
  800720:	0802d080 	call	802d08 <__subsf3>
  800724:	1007883a 	mov	r3,r2
  800728:	1805883a 	mov	r2,r3
  80072c:	80800015 	stw	r2,0(r16)
                data[i-1] += tempr;
  800730:	e0bff28b 	ldhu	r2,-54(fp)
  800734:	10bfffc4 	addi	r2,r2,-1
  800738:	1085883a 	add	r2,r2,r2
  80073c:	1085883a 	add	r2,r2,r2
  800740:	e0fffe17 	ldw	r3,-8(fp)
  800744:	18a1883a 	add	r16,r3,r2
  800748:	e0bff28b 	ldhu	r2,-54(fp)
  80074c:	10bfffc4 	addi	r2,r2,-1
  800750:	1085883a 	add	r2,r2,r2
  800754:	1085883a 	add	r2,r2,r2
  800758:	e0fffe17 	ldw	r3,-8(fp)
  80075c:	1887883a 	add	r3,r3,r2
  800760:	18800017 	ldw	r2,0(r3)
  800764:	1009883a 	mov	r4,r2
  800768:	e17ffc17 	ldw	r5,-16(fp)
  80076c:	0802cbc0 	call	802cbc <__addsf3>
  800770:	1007883a 	mov	r3,r2
  800774:	1805883a 	mov	r2,r3
  800778:	80800015 	stw	r2,0(r16)
                data[i] += tempi;
  80077c:	e0bff28b 	ldhu	r2,-54(fp)
  800780:	1085883a 	add	r2,r2,r2
  800784:	1085883a 	add	r2,r2,r2
  800788:	e0fffe17 	ldw	r3,-8(fp)
  80078c:	18a1883a 	add	r16,r3,r2
  800790:	e0bff28b 	ldhu	r2,-54(fp)
  800794:	1085883a 	add	r2,r2,r2
  800798:	1085883a 	add	r2,r2,r2
  80079c:	e0fffe17 	ldw	r3,-8(fp)
  8007a0:	1887883a 	add	r3,r3,r2
  8007a4:	18800017 	ldw	r2,0(r3)
  8007a8:	1009883a 	mov	r4,r2
  8007ac:	e17ffd17 	ldw	r5,-12(fp)
  8007b0:	0802cbc0 	call	802cbc <__addsf3>
  8007b4:	1007883a 	mov	r3,r2
  8007b8:	1805883a 	mov	r2,r3
  8007bc:	80800015 	stw	r2,0(r16)
        wpr = -2.0*wtemp*wtemp;
        wpi = sin(theta);
        wr = 1.0;
        wi = 0.0;
        for (m=1; m < mmax; m += 2) {
            for (i=m; i <= n; i += istep) {
  8007c0:	e0fff28b 	ldhu	r3,-54(fp)
  8007c4:	e0bff70b 	ldhu	r2,-36(fp)
  8007c8:	1885883a 	add	r2,r3,r2
  8007cc:	e0bff28d 	sth	r2,-54(fp)
  8007d0:	e0bff28b 	ldhu	r2,-54(fp)
  8007d4:	e0fff50b 	ldhu	r3,-44(fp)
  8007d8:	18bf752e 	bgeu	r3,r2,8005b0 <fft+0x338>
                data[j-1] = data[i-1] - tempr;
                data[j] = data[i] - tempi;
                data[i-1] += tempr;
                data[i] += tempi;
            }
            wtemp=wr;
  8007dc:	e0bff317 	ldw	r2,-52(fp)
  8007e0:	e0bff915 	stw	r2,-28(fp)
            wr += wr*wpr - wi*wpi;
  8007e4:	e13ff317 	ldw	r4,-52(fp)
  8007e8:	e17ffa17 	ldw	r5,-24(fp)
  8007ec:	0802d600 	call	802d60 <__mulsf3>
  8007f0:	1007883a 	mov	r3,r2
  8007f4:	1821883a 	mov	r16,r3
  8007f8:	e13ff417 	ldw	r4,-48(fp)
  8007fc:	e17ffb17 	ldw	r5,-20(fp)
  800800:	0802d600 	call	802d60 <__mulsf3>
  800804:	1007883a 	mov	r3,r2
  800808:	1805883a 	mov	r2,r3
  80080c:	8009883a 	mov	r4,r16
  800810:	100b883a 	mov	r5,r2
  800814:	0802d080 	call	802d08 <__subsf3>
  800818:	1007883a 	mov	r3,r2
  80081c:	1805883a 	mov	r2,r3
  800820:	e13ff317 	ldw	r4,-52(fp)
  800824:	100b883a 	mov	r5,r2
  800828:	0802cbc0 	call	802cbc <__addsf3>
  80082c:	1007883a 	mov	r3,r2
  800830:	e0fff315 	stw	r3,-52(fp)
            wi += wi*wpr + wtemp*wpi;
  800834:	e13ff417 	ldw	r4,-48(fp)
  800838:	e17ffa17 	ldw	r5,-24(fp)
  80083c:	0802d600 	call	802d60 <__mulsf3>
  800840:	1007883a 	mov	r3,r2
  800844:	1821883a 	mov	r16,r3
  800848:	e13ff917 	ldw	r4,-28(fp)
  80084c:	e17ffb17 	ldw	r5,-20(fp)
  800850:	0802d600 	call	802d60 <__mulsf3>
  800854:	1007883a 	mov	r3,r2
  800858:	1805883a 	mov	r2,r3
  80085c:	8009883a 	mov	r4,r16
  800860:	100b883a 	mov	r5,r2
  800864:	0802cbc0 	call	802cbc <__addsf3>
  800868:	1007883a 	mov	r3,r2
  80086c:	1805883a 	mov	r2,r3
  800870:	e13ff417 	ldw	r4,-48(fp)
  800874:	100b883a 	mov	r5,r2
  800878:	0802cbc0 	call	802cbc <__addsf3>
  80087c:	1007883a 	mov	r3,r2
  800880:	e0fff415 	stw	r3,-48(fp)
        wtemp = sin(0.5*theta);
        wpr = -2.0*wtemp*wtemp;
        wpi = sin(theta);
        wr = 1.0;
        wi = 0.0;
        for (m=1; m < mmax; m += 2) {
  800884:	e0bff18b 	ldhu	r2,-58(fp)
  800888:	10800084 	addi	r2,r2,2
  80088c:	e0bff18d 	sth	r2,-58(fp)
  800890:	e0fff18b 	ldhu	r3,-58(fp)
  800894:	e0bff10b 	ldhu	r2,-60(fp)
  800898:	18bf4236 	bltu	r3,r2,8005a4 <fft+0x32c>
            }
            wtemp=wr;
            wr += wr*wpr - wi*wpi;
            wi += wi*wpr + wtemp*wpi;
        }
        mmax=istep;
  80089c:	e0bff70b 	ldhu	r2,-36(fp)
  8008a0:	e0bff10d 	sth	r2,-60(fp)
        j += m;
    };

    // here begins the Danielson-Lanczos section
    mmax=2;
    while (n>mmax) {
  8008a4:	e0bff50b 	ldhu	r2,-44(fp)
  8008a8:	e0fff10b 	ldhu	r3,-60(fp)
  8008ac:	18beda36 	bltu	r3,r2,800418 <fft+0x1a0>
            wr += wr*wpr - wi*wpi;
            wi += wi*wpr + wtemp*wpi;
        }
        mmax=istep;
    }
}
  8008b0:	e037883a 	mov	sp,fp
  8008b4:	dfc00317 	ldw	ra,12(sp)
  8008b8:	df000217 	ldw	fp,8(sp)
  8008bc:	dc400117 	ldw	r17,4(sp)
  8008c0:	dc000017 	ldw	r16,0(sp)
  8008c4:	dec00404 	addi	sp,sp,16
  8008c8:	f800283a 	ret

008008cc <main>:

int main(void)
{
  8008cc:	defffe04 	addi	sp,sp,-8
  8008d0:	dfc00115 	stw	ra,4(sp)
  8008d4:	df000015 	stw	fp,0(sp)
  8008d8:	d839883a 	mov	fp,sp
    int i;

    while( 1 ) 
    {
        usleep(10000);
  8008dc:	0109c404 	movi	r4,10000
  8008e0:	08051a00 	call	8051a0 <usleep>
        printf("loading buffer with values....\n");
  8008e4:	01002034 	movhi	r4,128
  8008e8:	211a5704 	addi	r4,r4,26972
  8008ec:	080476c0 	call	80476c <puts>
        load_buffer();
  8008f0:	08001f40 	call	8001f4 <load_buffer>
        printf("loaded buffer\n");
  8008f4:	01002034 	movhi	r4,128
  8008f8:	211a5f04 	addi	r4,r4,27004
  8008fc:	080476c0 	call	80476c <puts>
        fft(buffer, BUFF_SIZE);
  800900:	01002034 	movhi	r4,128
  800904:	211cac04 	addi	r4,r4,29360
  800908:	01401904 	movi	r5,100
  80090c:	08002780 	call	800278 <fft>
        printf("running fft\n");
  800910:	01002034 	movhi	r4,128
  800914:	211a6304 	addi	r4,r4,27020
  800918:	080476c0 	call	80476c <puts>
        printf("value: %d\n", (int)buffer[0]);
  80091c:	00c02034 	movhi	r3,128
  800920:	18dcac04 	addi	r3,r3,29360
  800924:	18800017 	ldw	r2,0(r3)
  800928:	1009883a 	mov	r4,r2
  80092c:	0802ef00 	call	802ef0 <__fixsfsi>
  800930:	01002034 	movhi	r4,128
  800934:	211a6604 	addi	r4,r4,27032
  800938:	100b883a 	mov	r5,r2
  80093c:	08046a00 	call	8046a0 <printf>
    }
  800940:	003fe606 	br	8008dc <main+0x10>

00800944 <sin>:
  800944:	defffa04 	addi	sp,sp,-24
  800948:	00a00034 	movhi	r2,32768
  80094c:	10bfffc4 	addi	r2,r2,-1
  800950:	dfc00515 	stw	ra,20(sp)
  800954:	2884703a 	and	r2,r5,r2
  800958:	00cffa74 	movhi	r3,16361
  80095c:	18c87ec4 	addi	r3,r3,8699
  800960:	280f883a 	mov	r7,r5
  800964:	200d883a 	mov	r6,r4
  800968:	1880160e 	bge	r3,r2,8009c4 <sin+0x80>
  80096c:	00dffc34 	movhi	r3,32752
  800970:	18ffffc4 	addi	r3,r3,-1
  800974:	1880040e 	bge	r3,r2,800988 <sin+0x44>
  800978:	08034540 	call	803454 <__subdf3>
  80097c:	dfc00517 	ldw	ra,20(sp)
  800980:	dec00604 	addi	sp,sp,24
  800984:	f800283a 	ret
  800988:	d9800104 	addi	r6,sp,4
  80098c:	0800a340 	call	800a34 <__ieee754_rem_pio2>
  800990:	108000cc 	andi	r2,r2,3
  800994:	00c00044 	movi	r3,1
  800998:	10c01926 	beq	r2,r3,800a00 <sin+0xbc>
  80099c:	01000084 	movi	r4,2
  8009a0:	11000f26 	beq	r2,r4,8009e0 <sin+0x9c>
  8009a4:	10001c1e 	bne	r2,zero,800a18 <sin+0xd4>
  8009a8:	d9000117 	ldw	r4,4(sp)
  8009ac:	d9400217 	ldw	r5,8(sp)
  8009b0:	d9800317 	ldw	r6,12(sp)
  8009b4:	d9c00417 	ldw	r7,16(sp)
  8009b8:	d8c00015 	stw	r3,0(sp)
  8009bc:	08024400 	call	802440 <__kernel_sin>
  8009c0:	003fee06 	br	80097c <sin+0x38>
  8009c4:	d8000015 	stw	zero,0(sp)
  8009c8:	000d883a 	mov	r6,zero
  8009cc:	000f883a 	mov	r7,zero
  8009d0:	08024400 	call	802440 <__kernel_sin>
  8009d4:	dfc00517 	ldw	ra,20(sp)
  8009d8:	dec00604 	addi	sp,sp,24
  8009dc:	f800283a 	ret
  8009e0:	d9000117 	ldw	r4,4(sp)
  8009e4:	d9400217 	ldw	r5,8(sp)
  8009e8:	d9800317 	ldw	r6,12(sp)
  8009ec:	d9c00417 	ldw	r7,16(sp)
  8009f0:	d8c00015 	stw	r3,0(sp)
  8009f4:	08024400 	call	802440 <__kernel_sin>
  8009f8:	18e0003c 	xorhi	r3,r3,32768
  8009fc:	003fdf06 	br	80097c <sin+0x38>
  800a00:	d9000117 	ldw	r4,4(sp)
  800a04:	d9400217 	ldw	r5,8(sp)
  800a08:	d9800317 	ldw	r6,12(sp)
  800a0c:	d9c00417 	ldw	r7,16(sp)
  800a10:	08011ec0 	call	8011ec <__kernel_cos>
  800a14:	003fd906 	br	80097c <sin+0x38>
  800a18:	d9000117 	ldw	r4,4(sp)
  800a1c:	d9400217 	ldw	r5,8(sp)
  800a20:	d9800317 	ldw	r6,12(sp)
  800a24:	d9c00417 	ldw	r7,16(sp)
  800a28:	08011ec0 	call	8011ec <__kernel_cos>
  800a2c:	18e0003c 	xorhi	r3,r3,32768
  800a30:	003fd206 	br	80097c <sin+0x38>

00800a34 <__ieee754_rem_pio2>:
  800a34:	deffea04 	addi	sp,sp,-88
  800a38:	dc400d15 	stw	r17,52(sp)
  800a3c:	04600034 	movhi	r17,32768
  800a40:	8c7fffc4 	addi	r17,r17,-1
  800a44:	dd801215 	stw	r22,72(sp)
  800a48:	dc800e15 	stw	r18,56(sp)
  800a4c:	dc000c15 	stw	r16,48(sp)
  800a50:	dfc01515 	stw	ra,84(sp)
  800a54:	df001415 	stw	fp,80(sp)
  800a58:	ddc01315 	stw	r23,76(sp)
  800a5c:	dd401115 	stw	r21,68(sp)
  800a60:	dd001015 	stw	r20,64(sp)
  800a64:	dcc00f15 	stw	r19,60(sp)
  800a68:	2c62703a 	and	r17,r5,r17
  800a6c:	008ffa74 	movhi	r2,16361
  800a70:	10887ec4 	addi	r2,r2,8699
  800a74:	282d883a 	mov	r22,r5
  800a78:	2025883a 	mov	r18,r4
  800a7c:	3021883a 	mov	r16,r6
  800a80:	14406c0e 	bge	r2,r17,800c34 <__ieee754_rem_pio2+0x200>
  800a84:	009000f4 	movhi	r2,16387
  800a88:	10b65ec4 	addi	r2,r2,-9861
  800a8c:	14402316 	blt	r2,r17,800b1c <__ieee754_rem_pio2+0xe8>
  800a90:	01951034 	movhi	r6,21568
  800a94:	01cffe74 	movhi	r7,16377
  800a98:	39c87ec4 	addi	r7,r7,8699
  800a9c:	0141900e 	bge	zero,r5,8010e0 <__ieee754_rem_pio2+0x6ac>
  800aa0:	08034540 	call	803454 <__subdf3>
  800aa4:	1027883a 	mov	r19,r2
  800aa8:	008ffe74 	movhi	r2,16377
  800aac:	10887ec4 	addi	r2,r2,8699
  800ab0:	1825883a 	mov	r18,r3
  800ab4:	88807a26 	beq	r17,r2,800ca0 <__ieee754_rem_pio2+0x26c>
  800ab8:	9809883a 	mov	r4,r19
  800abc:	180b883a 	mov	r5,r3
  800ac0:	018698b4 	movhi	r6,6754
  800ac4:	3198cc44 	addi	r6,r6,25393
  800ac8:	01cf7474 	movhi	r7,15825
  800acc:	39ed1844 	addi	r7,r7,-19359
  800ad0:	08034540 	call	803454 <__subdf3>
  800ad4:	100d883a 	mov	r6,r2
  800ad8:	180f883a 	mov	r7,r3
  800adc:	9809883a 	mov	r4,r19
  800ae0:	900b883a 	mov	r5,r18
  800ae4:	80800015 	stw	r2,0(r16)
  800ae8:	80c00115 	stw	r3,4(r16)
  800aec:	08034540 	call	803454 <__subdf3>
  800af0:	1009883a 	mov	r4,r2
  800af4:	180b883a 	mov	r5,r3
  800af8:	018698b4 	movhi	r6,6754
  800afc:	3198cc44 	addi	r6,r6,25393
  800b00:	01cf7474 	movhi	r7,15825
  800b04:	39ed1844 	addi	r7,r7,-19359
  800b08:	08034540 	call	803454 <__subdf3>
  800b0c:	80800215 	stw	r2,8(r16)
  800b10:	80c00315 	stw	r3,12(r16)
  800b14:	07000044 	movi	fp,1
  800b18:	00004b06 	br	800c48 <__ieee754_rem_pio2+0x214>
  800b1c:	00904e74 	movhi	r2,16697
  800b20:	10887ec4 	addi	r2,r2,8699
  800b24:	1440940e 	bge	r2,r17,800d78 <__ieee754_rem_pio2+0x344>
  800b28:	009ffc34 	movhi	r2,32752
  800b2c:	10bfffc4 	addi	r2,r2,-1
  800b30:	14405216 	blt	r2,r17,800c7c <__ieee754_rem_pio2+0x248>
  800b34:	882bd53a 	srai	r21,r17,20
  800b38:	ad7efa84 	addi	r21,r21,-1046
  800b3c:	a804953a 	slli	r2,r21,20
  800b40:	88a3c83a 	sub	r17,r17,r2
  800b44:	880b883a 	mov	r5,r17
  800b48:	0803b440 	call	803b44 <__fixdfsi>
  800b4c:	1009883a 	mov	r4,r2
  800b50:	0803a700 	call	803a70 <__floatsidf>
  800b54:	9009883a 	mov	r4,r18
  800b58:	880b883a 	mov	r5,r17
  800b5c:	100d883a 	mov	r6,r2
  800b60:	180f883a 	mov	r7,r3
  800b64:	d8800215 	stw	r2,8(sp)
  800b68:	d8c00315 	stw	r3,12(sp)
  800b6c:	08034540 	call	803454 <__subdf3>
  800b70:	000d883a 	mov	r6,zero
  800b74:	01d05c34 	movhi	r7,16752
  800b78:	1009883a 	mov	r4,r2
  800b7c:	180b883a 	mov	r5,r3
  800b80:	08034b40 	call	8034b4 <__muldf3>
  800b84:	180b883a 	mov	r5,r3
  800b88:	1009883a 	mov	r4,r2
  800b8c:	1827883a 	mov	r19,r3
  800b90:	1029883a 	mov	r20,r2
  800b94:	0803b440 	call	803b44 <__fixdfsi>
  800b98:	1009883a 	mov	r4,r2
  800b9c:	0803a700 	call	803a70 <__floatsidf>
  800ba0:	100d883a 	mov	r6,r2
  800ba4:	180f883a 	mov	r7,r3
  800ba8:	a009883a 	mov	r4,r20
  800bac:	980b883a 	mov	r5,r19
  800bb0:	1023883a 	mov	r17,r2
  800bb4:	1825883a 	mov	r18,r3
  800bb8:	d8800415 	stw	r2,16(sp)
  800bbc:	d8c00515 	stw	r3,20(sp)
  800bc0:	08034540 	call	803454 <__subdf3>
  800bc4:	1009883a 	mov	r4,r2
  800bc8:	180b883a 	mov	r5,r3
  800bcc:	000d883a 	mov	r6,zero
  800bd0:	01d05c34 	movhi	r7,16752
  800bd4:	08034b40 	call	8034b4 <__muldf3>
  800bd8:	1009883a 	mov	r4,r2
  800bdc:	180b883a 	mov	r5,r3
  800be0:	000d883a 	mov	r6,zero
  800be4:	000f883a 	mov	r7,zero
  800be8:	d8800615 	stw	r2,24(sp)
  800bec:	d8c00715 	stw	r3,28(sp)
  800bf0:	080394c0 	call	80394c <__eqdf2>
  800bf4:	10004b1e 	bne	r2,zero,800d24 <__ieee754_rem_pio2+0x2f0>
  800bf8:	0029883a 	mov	r20,zero
  800bfc:	04c000c4 	movi	r19,3
  800c00:	8809883a 	mov	r4,r17
  800c04:	900b883a 	mov	r5,r18
  800c08:	000d883a 	mov	r6,zero
  800c0c:	000f883a 	mov	r7,zero
  800c10:	080394c0 	call	80394c <__eqdf2>
  800c14:	d9000204 	addi	r4,sp,8
  800c18:	9cffffc4 	addi	r19,r19,-1
  800c1c:	2507883a 	add	r3,r4,r20
  800c20:	1000411e 	bne	r2,zero,800d28 <__ieee754_rem_pio2+0x2f4>
  800c24:	1c400017 	ldw	r17,0(r3)
  800c28:	1c800117 	ldw	r18,4(r3)
  800c2c:	a53ffe04 	addi	r20,r20,-8
  800c30:	003ff306 	br	800c00 <__ieee754_rem_pio2+0x1cc>
  800c34:	81000015 	stw	r4,0(r16)
  800c38:	81400115 	stw	r5,4(r16)
  800c3c:	30000215 	stw	zero,8(r6)
  800c40:	30000315 	stw	zero,12(r6)
  800c44:	0039883a 	mov	fp,zero
  800c48:	e005883a 	mov	r2,fp
  800c4c:	dfc01517 	ldw	ra,84(sp)
  800c50:	df001417 	ldw	fp,80(sp)
  800c54:	ddc01317 	ldw	r23,76(sp)
  800c58:	dd801217 	ldw	r22,72(sp)
  800c5c:	dd401117 	ldw	r21,68(sp)
  800c60:	dd001017 	ldw	r20,64(sp)
  800c64:	dcc00f17 	ldw	r19,60(sp)
  800c68:	dc800e17 	ldw	r18,56(sp)
  800c6c:	dc400d17 	ldw	r17,52(sp)
  800c70:	dc000c17 	ldw	r16,48(sp)
  800c74:	dec01604 	addi	sp,sp,88
  800c78:	f800283a 	ret
  800c7c:	200d883a 	mov	r6,r4
  800c80:	280f883a 	mov	r7,r5
  800c84:	08034540 	call	803454 <__subdf3>
  800c88:	80800215 	stw	r2,8(r16)
  800c8c:	80c00315 	stw	r3,12(r16)
  800c90:	80800015 	stw	r2,0(r16)
  800c94:	80c00115 	stw	r3,4(r16)
  800c98:	0039883a 	mov	fp,zero
  800c9c:	003fea06 	br	800c48 <__ieee754_rem_pio2+0x214>
  800ca0:	01869834 	movhi	r6,6752
  800ca4:	01cf7474 	movhi	r7,15825
  800ca8:	39ed1844 	addi	r7,r7,-19359
  800cac:	9809883a 	mov	r4,r19
  800cb0:	180b883a 	mov	r5,r3
  800cb4:	08034540 	call	803454 <__subdf3>
  800cb8:	1009883a 	mov	r4,r2
  800cbc:	180b883a 	mov	r5,r3
  800cc0:	018b80f4 	movhi	r6,11779
  800cc4:	319c1cc4 	addi	r6,r6,28787
  800cc8:	01cee8f4 	movhi	r7,15267
  800ccc:	39c66284 	addi	r7,r7,6538
  800cd0:	1025883a 	mov	r18,r2
  800cd4:	1823883a 	mov	r17,r3
  800cd8:	08034540 	call	803454 <__subdf3>
  800cdc:	100d883a 	mov	r6,r2
  800ce0:	180f883a 	mov	r7,r3
  800ce4:	9009883a 	mov	r4,r18
  800ce8:	880b883a 	mov	r5,r17
  800cec:	80800015 	stw	r2,0(r16)
  800cf0:	80c00115 	stw	r3,4(r16)
  800cf4:	08034540 	call	803454 <__subdf3>
  800cf8:	1009883a 	mov	r4,r2
  800cfc:	180b883a 	mov	r5,r3
  800d00:	018b80f4 	movhi	r6,11779
  800d04:	319c1cc4 	addi	r6,r6,28787
  800d08:	01cee8f4 	movhi	r7,15267
  800d0c:	39c66284 	addi	r7,r7,6538
  800d10:	08034540 	call	803454 <__subdf3>
  800d14:	80800215 	stw	r2,8(r16)
  800d18:	80c00315 	stw	r3,12(r16)
  800d1c:	07000044 	movi	fp,1
  800d20:	003fc906 	br	800c48 <__ieee754_rem_pio2+0x214>
  800d24:	04c000c4 	movi	r19,3
  800d28:	00800084 	movi	r2,2
  800d2c:	d8800015 	stw	r2,0(sp)
  800d30:	00802034 	movhi	r2,128
  800d34:	109a8904 	addi	r2,r2,27172
  800d38:	d8800115 	stw	r2,4(sp)
  800d3c:	d9000204 	addi	r4,sp,8
  800d40:	800b883a 	mov	r5,r16
  800d44:	a80d883a 	mov	r6,r21
  800d48:	980f883a 	mov	r7,r19
  800d4c:	08016900 	call	801690 <__kernel_rem_pio2>
  800d50:	1039883a 	mov	fp,r2
  800d54:	b03fbc0e 	bge	r22,zero,800c48 <__ieee754_rem_pio2+0x214>
  800d58:	80c00117 	ldw	r3,4(r16)
  800d5c:	80800317 	ldw	r2,12(r16)
  800d60:	0739c83a 	sub	fp,zero,fp
  800d64:	18e0003c 	xorhi	r3,r3,32768
  800d68:	10a0003c 	xorhi	r2,r2,32768
  800d6c:	80c00115 	stw	r3,4(r16)
  800d70:	80800315 	stw	r2,12(r16)
  800d74:	003fb406 	br	800c48 <__ieee754_rem_pio2+0x214>
  800d78:	08027140 	call	802714 <fabs>
  800d7c:	1009883a 	mov	r4,r2
  800d80:	180b883a 	mov	r5,r3
  800d84:	019b72b4 	movhi	r6,28106
  800d88:	31b220c4 	addi	r6,r6,-14205
  800d8c:	01cff934 	movhi	r7,16356
  800d90:	39d7cc04 	addi	r7,r7,24368
  800d94:	102b883a 	mov	r21,r2
  800d98:	1829883a 	mov	r20,r3
  800d9c:	08034b40 	call	8034b4 <__muldf3>
  800da0:	000d883a 	mov	r6,zero
  800da4:	01cff834 	movhi	r7,16352
  800da8:	1009883a 	mov	r4,r2
  800dac:	180b883a 	mov	r5,r3
  800db0:	08034000 	call	803400 <__adddf3>
  800db4:	180b883a 	mov	r5,r3
  800db8:	1009883a 	mov	r4,r2
  800dbc:	0803b440 	call	803b44 <__fixdfsi>
  800dc0:	1009883a 	mov	r4,r2
  800dc4:	1039883a 	mov	fp,r2
  800dc8:	0803a700 	call	803a70 <__floatsidf>
  800dcc:	1009883a 	mov	r4,r2
  800dd0:	180b883a 	mov	r5,r3
  800dd4:	01951034 	movhi	r6,21568
  800dd8:	01cffe74 	movhi	r7,16377
  800ddc:	39c87ec4 	addi	r7,r7,8699
  800de0:	1027883a 	mov	r19,r2
  800de4:	1825883a 	mov	r18,r3
  800de8:	08034b40 	call	8034b4 <__muldf3>
  800dec:	a809883a 	mov	r4,r21
  800df0:	a00b883a 	mov	r5,r20
  800df4:	100d883a 	mov	r6,r2
  800df8:	180f883a 	mov	r7,r3
  800dfc:	08034540 	call	803454 <__subdf3>
  800e00:	9809883a 	mov	r4,r19
  800e04:	900b883a 	mov	r5,r18
  800e08:	018698b4 	movhi	r6,6754
  800e0c:	3198cc44 	addi	r6,r6,25393
  800e10:	01cf7474 	movhi	r7,15825
  800e14:	39ed1844 	addi	r7,r7,-19359
  800e18:	102f883a 	mov	r23,r2
  800e1c:	d8c00815 	stw	r3,32(sp)
  800e20:	08034b40 	call	8034b4 <__muldf3>
  800e24:	010007c4 	movi	r4,31
  800e28:	b81b883a 	mov	r13,r23
  800e2c:	db000817 	ldw	r12,32(sp)
  800e30:	102b883a 	mov	r21,r2
  800e34:	1829883a 	mov	r20,r3
  800e38:	27002d16 	blt	r4,fp,800ef0 <__ieee754_rem_pio2+0x4bc>
  800e3c:	e13fffc4 	addi	r4,fp,-1
  800e40:	2109883a 	add	r4,r4,r4
  800e44:	2109883a 	add	r4,r4,r4
  800e48:	01402034 	movhi	r5,128
  800e4c:	295a6904 	addi	r5,r5,27044
  800e50:	2909883a 	add	r4,r5,r4
  800e54:	21000017 	ldw	r4,0(r4)
  800e58:	24402526 	beq	r4,r17,800ef0 <__ieee754_rem_pio2+0x4bc>
  800e5c:	b809883a 	mov	r4,r23
  800e60:	600b883a 	mov	r5,r12
  800e64:	100d883a 	mov	r6,r2
  800e68:	180f883a 	mov	r7,r3
  800e6c:	db000b15 	stw	r12,44(sp)
  800e70:	ddc00a15 	stw	r23,40(sp)
  800e74:	08034540 	call	803454 <__subdf3>
  800e78:	db000b17 	ldw	r12,44(sp)
  800e7c:	db400a17 	ldw	r13,40(sp)
  800e80:	1017883a 	mov	r11,r2
  800e84:	1815883a 	mov	r10,r3
  800e88:	80800015 	stw	r2,0(r16)
  800e8c:	80c00115 	stw	r3,4(r16)
  800e90:	580d883a 	mov	r6,r11
  800e94:	500f883a 	mov	r7,r10
  800e98:	6809883a 	mov	r4,r13
  800e9c:	600b883a 	mov	r5,r12
  800ea0:	da800b15 	stw	r10,44(sp)
  800ea4:	dac00a15 	stw	r11,40(sp)
  800ea8:	08034540 	call	803454 <__subdf3>
  800eac:	1009883a 	mov	r4,r2
  800eb0:	180b883a 	mov	r5,r3
  800eb4:	a80d883a 	mov	r6,r21
  800eb8:	a00f883a 	mov	r7,r20
  800ebc:	08034540 	call	803454 <__subdf3>
  800ec0:	80800215 	stw	r2,8(r16)
  800ec4:	80c00315 	stw	r3,12(r16)
  800ec8:	da800b17 	ldw	r10,44(sp)
  800ecc:	dac00a17 	ldw	r11,40(sp)
  800ed0:	b03f5d0e 	bge	r22,zero,800c48 <__ieee754_rem_pio2+0x214>
  800ed4:	52a0003c 	xorhi	r10,r10,32768
  800ed8:	18e0003c 	xorhi	r3,r3,32768
  800edc:	82c00015 	stw	r11,0(r16)
  800ee0:	82800115 	stw	r10,4(r16)
  800ee4:	80c00315 	stw	r3,12(r16)
  800ee8:	0739c83a 	sub	fp,zero,fp
  800eec:	003f5606 	br	800c48 <__ieee754_rem_pio2+0x214>
  800ef0:	d9400817 	ldw	r5,32(sp)
  800ef4:	b809883a 	mov	r4,r23
  800ef8:	100d883a 	mov	r6,r2
  800efc:	180f883a 	mov	r7,r3
  800f00:	db000b15 	stw	r12,44(sp)
  800f04:	db400a15 	stw	r13,40(sp)
  800f08:	08034540 	call	803454 <__subdf3>
  800f0c:	1017883a 	mov	r11,r2
  800f10:	1804d53a 	srli	r2,r3,20
  800f14:	881dd53a 	srai	r14,r17,20
  800f18:	1815883a 	mov	r10,r3
  800f1c:	1081ffcc 	andi	r2,r2,2047
  800f20:	80c00115 	stw	r3,4(r16)
  800f24:	82c00015 	stw	r11,0(r16)
  800f28:	7085c83a 	sub	r2,r14,r2
  800f2c:	00c00404 	movi	r3,16
  800f30:	db000b17 	ldw	r12,44(sp)
  800f34:	db400a17 	ldw	r13,40(sp)
  800f38:	18bfd50e 	bge	r3,r2,800e90 <__ieee754_rem_pio2+0x45c>
  800f3c:	9809883a 	mov	r4,r19
  800f40:	900b883a 	mov	r5,r18
  800f44:	01869834 	movhi	r6,6752
  800f48:	01cf7474 	movhi	r7,15825
  800f4c:	39ed1844 	addi	r7,r7,-19359
  800f50:	db800a15 	stw	r14,40(sp)
  800f54:	08034b40 	call	8034b4 <__muldf3>
  800f58:	d9400817 	ldw	r5,32(sp)
  800f5c:	b809883a 	mov	r4,r23
  800f60:	100d883a 	mov	r6,r2
  800f64:	180f883a 	mov	r7,r3
  800f68:	102b883a 	mov	r21,r2
  800f6c:	1829883a 	mov	r20,r3
  800f70:	08034540 	call	803454 <__subdf3>
  800f74:	d9400817 	ldw	r5,32(sp)
  800f78:	b809883a 	mov	r4,r23
  800f7c:	100d883a 	mov	r6,r2
  800f80:	180f883a 	mov	r7,r3
  800f84:	1023883a 	mov	r17,r2
  800f88:	d8c00915 	stw	r3,36(sp)
  800f8c:	08034540 	call	803454 <__subdf3>
  800f90:	a80d883a 	mov	r6,r21
  800f94:	a00f883a 	mov	r7,r20
  800f98:	1009883a 	mov	r4,r2
  800f9c:	180b883a 	mov	r5,r3
  800fa0:	08034540 	call	803454 <__subdf3>
  800fa4:	9809883a 	mov	r4,r19
  800fa8:	900b883a 	mov	r5,r18
  800fac:	018b80f4 	movhi	r6,11779
  800fb0:	319c1cc4 	addi	r6,r6,28787
  800fb4:	01cee8f4 	movhi	r7,15267
  800fb8:	39c66284 	addi	r7,r7,6538
  800fbc:	102b883a 	mov	r21,r2
  800fc0:	1829883a 	mov	r20,r3
  800fc4:	08034b40 	call	8034b4 <__muldf3>
  800fc8:	a80d883a 	mov	r6,r21
  800fcc:	a00f883a 	mov	r7,r20
  800fd0:	1009883a 	mov	r4,r2
  800fd4:	180b883a 	mov	r5,r3
  800fd8:	08034540 	call	803454 <__subdf3>
  800fdc:	d9400917 	ldw	r5,36(sp)
  800fe0:	8809883a 	mov	r4,r17
  800fe4:	100d883a 	mov	r6,r2
  800fe8:	180f883a 	mov	r7,r3
  800fec:	102b883a 	mov	r21,r2
  800ff0:	1829883a 	mov	r20,r3
  800ff4:	08034540 	call	803454 <__subdf3>
  800ff8:	1017883a 	mov	r11,r2
  800ffc:	1804d53a 	srli	r2,r3,20
  801000:	db800a17 	ldw	r14,40(sp)
  801004:	82c00015 	stw	r11,0(r16)
  801008:	1081ffcc 	andi	r2,r2,2047
  80100c:	709dc83a 	sub	r14,r14,r2
  801010:	80c00115 	stw	r3,4(r16)
  801014:	00800c44 	movi	r2,49
  801018:	1815883a 	mov	r10,r3
  80101c:	1380700e 	bge	r2,r14,8011e0 <__ieee754_rem_pio2+0x7ac>
  801020:	9809883a 	mov	r4,r19
  801024:	900b883a 	mov	r5,r18
  801028:	018b8034 	movhi	r6,11776
  80102c:	01cee8f4 	movhi	r7,15267
  801030:	39c66284 	addi	r7,r7,6538
  801034:	08034b40 	call	8034b4 <__muldf3>
  801038:	d9400917 	ldw	r5,36(sp)
  80103c:	8809883a 	mov	r4,r17
  801040:	100d883a 	mov	r6,r2
  801044:	180f883a 	mov	r7,r3
  801048:	102b883a 	mov	r21,r2
  80104c:	1829883a 	mov	r20,r3
  801050:	08034540 	call	803454 <__subdf3>
  801054:	d9400917 	ldw	r5,36(sp)
  801058:	8809883a 	mov	r4,r17
  80105c:	100d883a 	mov	r6,r2
  801060:	180f883a 	mov	r7,r3
  801064:	d8c00b15 	stw	r3,44(sp)
  801068:	d8800a15 	stw	r2,40(sp)
  80106c:	08034540 	call	803454 <__subdf3>
  801070:	a80d883a 	mov	r6,r21
  801074:	a00f883a 	mov	r7,r20
  801078:	1009883a 	mov	r4,r2
  80107c:	180b883a 	mov	r5,r3
  801080:	08034540 	call	803454 <__subdf3>
  801084:	9809883a 	mov	r4,r19
  801088:	900b883a 	mov	r5,r18
  80108c:	01894834 	movhi	r6,9504
  801090:	31927044 	addi	r6,r6,18881
  801094:	01ce5f34 	movhi	r7,14716
  801098:	39e0e684 	addi	r7,r7,-31846
  80109c:	1029883a 	mov	r20,r2
  8010a0:	1823883a 	mov	r17,r3
  8010a4:	08034b40 	call	8034b4 <__muldf3>
  8010a8:	a00d883a 	mov	r6,r20
  8010ac:	1009883a 	mov	r4,r2
  8010b0:	180b883a 	mov	r5,r3
  8010b4:	880f883a 	mov	r7,r17
  8010b8:	08034540 	call	803454 <__subdf3>
  8010bc:	db400a17 	ldw	r13,40(sp)
  8010c0:	db000b17 	ldw	r12,44(sp)
  8010c4:	102b883a 	mov	r21,r2
  8010c8:	1829883a 	mov	r20,r3
  8010cc:	6809883a 	mov	r4,r13
  8010d0:	600b883a 	mov	r5,r12
  8010d4:	100d883a 	mov	r6,r2
  8010d8:	180f883a 	mov	r7,r3
  8010dc:	003f6506 	br	800e74 <__ieee754_rem_pio2+0x440>
  8010e0:	08034000 	call	803400 <__adddf3>
  8010e4:	1027883a 	mov	r19,r2
  8010e8:	008ffe74 	movhi	r2,16377
  8010ec:	10887ec4 	addi	r2,r2,8699
  8010f0:	1825883a 	mov	r18,r3
  8010f4:	88801926 	beq	r17,r2,80115c <__ieee754_rem_pio2+0x728>
  8010f8:	9809883a 	mov	r4,r19
  8010fc:	180b883a 	mov	r5,r3
  801100:	018698b4 	movhi	r6,6754
  801104:	3198cc44 	addi	r6,r6,25393
  801108:	01cf7474 	movhi	r7,15825
  80110c:	39ed1844 	addi	r7,r7,-19359
  801110:	08034000 	call	803400 <__adddf3>
  801114:	100d883a 	mov	r6,r2
  801118:	180f883a 	mov	r7,r3
  80111c:	9809883a 	mov	r4,r19
  801120:	900b883a 	mov	r5,r18
  801124:	80800015 	stw	r2,0(r16)
  801128:	80c00115 	stw	r3,4(r16)
  80112c:	08034540 	call	803454 <__subdf3>
  801130:	1009883a 	mov	r4,r2
  801134:	180b883a 	mov	r5,r3
  801138:	018698b4 	movhi	r6,6754
  80113c:	3198cc44 	addi	r6,r6,25393
  801140:	01cf7474 	movhi	r7,15825
  801144:	39ed1844 	addi	r7,r7,-19359
  801148:	08034000 	call	803400 <__adddf3>
  80114c:	80800215 	stw	r2,8(r16)
  801150:	80c00315 	stw	r3,12(r16)
  801154:	073fffc4 	movi	fp,-1
  801158:	003ebb06 	br	800c48 <__ieee754_rem_pio2+0x214>
  80115c:	01869834 	movhi	r6,6752
  801160:	01cf7474 	movhi	r7,15825
  801164:	39ed1844 	addi	r7,r7,-19359
  801168:	9809883a 	mov	r4,r19
  80116c:	180b883a 	mov	r5,r3
  801170:	08034000 	call	803400 <__adddf3>
  801174:	1009883a 	mov	r4,r2
  801178:	180b883a 	mov	r5,r3
  80117c:	018b80f4 	movhi	r6,11779
  801180:	319c1cc4 	addi	r6,r6,28787
  801184:	01cee8f4 	movhi	r7,15267
  801188:	39c66284 	addi	r7,r7,6538
  80118c:	1025883a 	mov	r18,r2
  801190:	1823883a 	mov	r17,r3
  801194:	08034000 	call	803400 <__adddf3>
  801198:	100d883a 	mov	r6,r2
  80119c:	180f883a 	mov	r7,r3
  8011a0:	9009883a 	mov	r4,r18
  8011a4:	880b883a 	mov	r5,r17
  8011a8:	80800015 	stw	r2,0(r16)
  8011ac:	80c00115 	stw	r3,4(r16)
  8011b0:	08034540 	call	803454 <__subdf3>
  8011b4:	1009883a 	mov	r4,r2
  8011b8:	180b883a 	mov	r5,r3
  8011bc:	018b80f4 	movhi	r6,11779
  8011c0:	319c1cc4 	addi	r6,r6,28787
  8011c4:	01cee8f4 	movhi	r7,15267
  8011c8:	39c66284 	addi	r7,r7,6538
  8011cc:	08034000 	call	803400 <__adddf3>
  8011d0:	80800215 	stw	r2,8(r16)
  8011d4:	80c00315 	stw	r3,12(r16)
  8011d8:	073fffc4 	movi	fp,-1
  8011dc:	003e9a06 	br	800c48 <__ieee754_rem_pio2+0x214>
  8011e0:	881b883a 	mov	r13,r17
  8011e4:	db000917 	ldw	r12,36(sp)
  8011e8:	003f2906 	br	800e90 <__ieee754_rem_pio2+0x45c>

008011ec <__kernel_cos>:
  8011ec:	defff304 	addi	sp,sp,-52
  8011f0:	dd400815 	stw	r21,32(sp)
  8011f4:	05600034 	movhi	r21,32768
  8011f8:	ad7fffc4 	addi	r21,r21,-1
  8011fc:	df000b15 	stw	fp,44(sp)
  801200:	ddc00a15 	stw	r23,40(sp)
  801204:	dd800915 	stw	r22,36(sp)
  801208:	dc800515 	stw	r18,20(sp)
  80120c:	dfc00c15 	stw	ra,48(sp)
  801210:	dd000715 	stw	r20,28(sp)
  801214:	dcc00615 	stw	r19,24(sp)
  801218:	dc400415 	stw	r17,16(sp)
  80121c:	dc000315 	stw	r16,12(sp)
  801220:	2d6a703a 	and	r21,r5,r21
  801224:	008f9034 	movhi	r2,15936
  801228:	10bfffc4 	addi	r2,r2,-1
  80122c:	2825883a 	mov	r18,r5
  801230:	202d883a 	mov	r22,r4
  801234:	302f883a 	mov	r23,r6
  801238:	3839883a 	mov	fp,r7
  80123c:	15407516 	blt	r2,r21,801414 <__kernel_cos+0x228>
  801240:	0803b440 	call	803b44 <__fixdfsi>
  801244:	10010f26 	beq	r2,zero,801684 <__kernel_cos+0x498>
  801248:	b00d883a 	mov	r6,r22
  80124c:	900f883a 	mov	r7,r18
  801250:	b009883a 	mov	r4,r22
  801254:	900b883a 	mov	r5,r18
  801258:	08034b40 	call	8034b4 <__muldf3>
  80125c:	1009883a 	mov	r4,r2
  801260:	180b883a 	mov	r5,r3
  801264:	01afa234 	movhi	r6,48776
  801268:	318e3504 	addi	r6,r6,14548
  80126c:	01ef6a74 	movhi	r7,48553
  801270:	39feba44 	addi	r7,r7,-1303
  801274:	1029883a 	mov	r20,r2
  801278:	1827883a 	mov	r19,r3
  80127c:	08034b40 	call	8034b4 <__muldf3>
  801280:	1009883a 	mov	r4,r2
  801284:	180b883a 	mov	r5,r3
  801288:	01af6d74 	movhi	r6,48565
  80128c:	31ac7104 	addi	r6,r6,-20028
  801290:	01cf88b4 	movhi	r7,15906
  801294:	39fba784 	addi	r7,r7,-4450
  801298:	08034000 	call	803400 <__adddf3>
  80129c:	1009883a 	mov	r4,r2
  8012a0:	180b883a 	mov	r5,r3
  8012a4:	a00d883a 	mov	r6,r20
  8012a8:	980f883a 	mov	r7,r19
  8012ac:	08034b40 	call	8034b4 <__muldf3>
  8012b0:	1009883a 	mov	r4,r2
  8012b4:	180b883a 	mov	r5,r3
  8012b8:	01a02734 	movhi	r6,32924
  8012bc:	3194ab44 	addi	r6,r6,21165
  8012c0:	01cfa4b4 	movhi	r7,16018
  8012c4:	39df93c4 	addi	r7,r7,32335
  8012c8:	08034540 	call	803454 <__subdf3>
  8012cc:	1009883a 	mov	r4,r2
  8012d0:	180b883a 	mov	r5,r3
  8012d4:	a00d883a 	mov	r6,r20
  8012d8:	980f883a 	mov	r7,r19
  8012dc:	08034b40 	call	8034b4 <__muldf3>
  8012e0:	1009883a 	mov	r4,r2
  8012e4:	180b883a 	mov	r5,r3
  8012e8:	018672f4 	movhi	r6,6603
  8012ec:	31856404 	addi	r6,r6,5520
  8012f0:	01cfbeb4 	movhi	r7,16122
  8012f4:	39c06804 	addi	r7,r7,416
  8012f8:	08034000 	call	803400 <__adddf3>
  8012fc:	1009883a 	mov	r4,r2
  801300:	180b883a 	mov	r5,r3
  801304:	a00d883a 	mov	r6,r20
  801308:	980f883a 	mov	r7,r19
  80130c:	08034b40 	call	8034b4 <__muldf3>
  801310:	1009883a 	mov	r4,r2
  801314:	180b883a 	mov	r5,r3
  801318:	0185b074 	movhi	r6,5825
  80131c:	31945dc4 	addi	r6,r6,20855
  801320:	01cfd5f4 	movhi	r7,16215
  801324:	39f05b04 	addi	r7,r7,-16020
  801328:	08034540 	call	803454 <__subdf3>
  80132c:	1009883a 	mov	r4,r2
  801330:	180b883a 	mov	r5,r3
  801334:	a00d883a 	mov	r6,r20
  801338:	980f883a 	mov	r7,r19
  80133c:	08034b40 	call	8034b4 <__muldf3>
  801340:	1009883a 	mov	r4,r2
  801344:	180b883a 	mov	r5,r3
  801348:	01955574 	movhi	r6,21845
  80134c:	31955304 	addi	r6,r6,21836
  801350:	01cfe974 	movhi	r7,16293
  801354:	39d55544 	addi	r7,r7,21845
  801358:	08034000 	call	803400 <__adddf3>
  80135c:	1009883a 	mov	r4,r2
  801360:	180b883a 	mov	r5,r3
  801364:	a00d883a 	mov	r6,r20
  801368:	980f883a 	mov	r7,r19
  80136c:	08034b40 	call	8034b4 <__muldf3>
  801370:	1017883a 	mov	r11,r2
  801374:	1815883a 	mov	r10,r3
  801378:	a009883a 	mov	r4,r20
  80137c:	980b883a 	mov	r5,r19
  801380:	000d883a 	mov	r6,zero
  801384:	01cff834 	movhi	r7,16352
  801388:	da800215 	stw	r10,8(sp)
  80138c:	dac00115 	stw	r11,4(sp)
  801390:	08034b40 	call	8034b4 <__muldf3>
  801394:	dac00117 	ldw	r11,4(sp)
  801398:	da800217 	ldw	r10,8(sp)
  80139c:	a009883a 	mov	r4,r20
  8013a0:	580d883a 	mov	r6,r11
  8013a4:	500f883a 	mov	r7,r10
  8013a8:	980b883a 	mov	r5,r19
  8013ac:	1023883a 	mov	r17,r2
  8013b0:	1821883a 	mov	r16,r3
  8013b4:	08034b40 	call	8034b4 <__muldf3>
  8013b8:	b009883a 	mov	r4,r22
  8013bc:	900b883a 	mov	r5,r18
  8013c0:	b80d883a 	mov	r6,r23
  8013c4:	e00f883a 	mov	r7,fp
  8013c8:	1029883a 	mov	r20,r2
  8013cc:	1827883a 	mov	r19,r3
  8013d0:	08034b40 	call	8034b4 <__muldf3>
  8013d4:	a009883a 	mov	r4,r20
  8013d8:	980b883a 	mov	r5,r19
  8013dc:	100d883a 	mov	r6,r2
  8013e0:	180f883a 	mov	r7,r3
  8013e4:	08034540 	call	803454 <__subdf3>
  8013e8:	8809883a 	mov	r4,r17
  8013ec:	800b883a 	mov	r5,r16
  8013f0:	100d883a 	mov	r6,r2
  8013f4:	180f883a 	mov	r7,r3
  8013f8:	08034540 	call	803454 <__subdf3>
  8013fc:	0009883a 	mov	r4,zero
  801400:	014ffc34 	movhi	r5,16368
  801404:	100d883a 	mov	r6,r2
  801408:	180f883a 	mov	r7,r3
  80140c:	08034540 	call	803454 <__subdf3>
  801410:	00008b06 	br	801640 <__kernel_cos+0x454>
  801414:	200d883a 	mov	r6,r4
  801418:	280f883a 	mov	r7,r5
  80141c:	08034b40 	call	8034b4 <__muldf3>
  801420:	01afa234 	movhi	r6,48776
  801424:	318e3504 	addi	r6,r6,14548
  801428:	01ef6a74 	movhi	r7,48553
  80142c:	39feba44 	addi	r7,r7,-1303
  801430:	1009883a 	mov	r4,r2
  801434:	180b883a 	mov	r5,r3
  801438:	1023883a 	mov	r17,r2
  80143c:	1821883a 	mov	r16,r3
  801440:	08034b40 	call	8034b4 <__muldf3>
  801444:	1009883a 	mov	r4,r2
  801448:	180b883a 	mov	r5,r3
  80144c:	01af6d74 	movhi	r6,48565
  801450:	31ac7104 	addi	r6,r6,-20028
  801454:	01cf88b4 	movhi	r7,15906
  801458:	39fba784 	addi	r7,r7,-4450
  80145c:	08034000 	call	803400 <__adddf3>
  801460:	1009883a 	mov	r4,r2
  801464:	180b883a 	mov	r5,r3
  801468:	880d883a 	mov	r6,r17
  80146c:	800f883a 	mov	r7,r16
  801470:	08034b40 	call	8034b4 <__muldf3>
  801474:	1009883a 	mov	r4,r2
  801478:	180b883a 	mov	r5,r3
  80147c:	01a02734 	movhi	r6,32924
  801480:	3194ab44 	addi	r6,r6,21165
  801484:	01cfa4b4 	movhi	r7,16018
  801488:	39df93c4 	addi	r7,r7,32335
  80148c:	08034540 	call	803454 <__subdf3>
  801490:	1009883a 	mov	r4,r2
  801494:	180b883a 	mov	r5,r3
  801498:	880d883a 	mov	r6,r17
  80149c:	800f883a 	mov	r7,r16
  8014a0:	08034b40 	call	8034b4 <__muldf3>
  8014a4:	1009883a 	mov	r4,r2
  8014a8:	180b883a 	mov	r5,r3
  8014ac:	018672f4 	movhi	r6,6603
  8014b0:	31856404 	addi	r6,r6,5520
  8014b4:	01cfbeb4 	movhi	r7,16122
  8014b8:	39c06804 	addi	r7,r7,416
  8014bc:	08034000 	call	803400 <__adddf3>
  8014c0:	1009883a 	mov	r4,r2
  8014c4:	180b883a 	mov	r5,r3
  8014c8:	880d883a 	mov	r6,r17
  8014cc:	800f883a 	mov	r7,r16
  8014d0:	08034b40 	call	8034b4 <__muldf3>
  8014d4:	1009883a 	mov	r4,r2
  8014d8:	180b883a 	mov	r5,r3
  8014dc:	0185b074 	movhi	r6,5825
  8014e0:	31945dc4 	addi	r6,r6,20855
  8014e4:	01cfd5f4 	movhi	r7,16215
  8014e8:	39f05b04 	addi	r7,r7,-16020
  8014ec:	08034540 	call	803454 <__subdf3>
  8014f0:	1009883a 	mov	r4,r2
  8014f4:	180b883a 	mov	r5,r3
  8014f8:	880d883a 	mov	r6,r17
  8014fc:	800f883a 	mov	r7,r16
  801500:	08034b40 	call	8034b4 <__muldf3>
  801504:	1009883a 	mov	r4,r2
  801508:	180b883a 	mov	r5,r3
  80150c:	01955574 	movhi	r6,21845
  801510:	31955304 	addi	r6,r6,21836
  801514:	01cfe974 	movhi	r7,16293
  801518:	39d55544 	addi	r7,r7,21845
  80151c:	08034000 	call	803400 <__adddf3>
  801520:	1009883a 	mov	r4,r2
  801524:	180b883a 	mov	r5,r3
  801528:	880d883a 	mov	r6,r17
  80152c:	800f883a 	mov	r7,r16
  801530:	08034b40 	call	8034b4 <__muldf3>
  801534:	1013883a 	mov	r9,r2
  801538:	1017883a 	mov	r11,r2
  80153c:	008ff4f4 	movhi	r2,16339
  801540:	108ccc84 	addi	r2,r2,13106
  801544:	1811883a 	mov	r8,r3
  801548:	8829883a 	mov	r20,r17
  80154c:	8027883a 	mov	r19,r16
  801550:	1815883a 	mov	r10,r3
  801554:	157f880e 	bge	r2,r21,801378 <__kernel_cos+0x18c>
  801558:	008ffa74 	movhi	r2,16361
  80155c:	15404416 	blt	r2,r21,801670 <__kernel_cos+0x484>
  801560:	00bff834 	movhi	r2,65504
  801564:	a8ab883a 	add	r21,r21,r2
  801568:	0009883a 	mov	r4,zero
  80156c:	014ffc34 	movhi	r5,16368
  801570:	000d883a 	mov	r6,zero
  801574:	a80f883a 	mov	r7,r21
  801578:	da400115 	stw	r9,4(sp)
  80157c:	d8c00215 	stw	r3,8(sp)
  801580:	08034540 	call	803454 <__subdf3>
  801584:	da000217 	ldw	r8,8(sp)
  801588:	da400117 	ldw	r9,4(sp)
  80158c:	1029883a 	mov	r20,r2
  801590:	d8c00015 	stw	r3,0(sp)
  801594:	8809883a 	mov	r4,r17
  801598:	800b883a 	mov	r5,r16
  80159c:	000d883a 	mov	r6,zero
  8015a0:	01cff834 	movhi	r7,16352
  8015a4:	da000215 	stw	r8,8(sp)
  8015a8:	da400115 	stw	r9,4(sp)
  8015ac:	08034b40 	call	8034b4 <__muldf3>
  8015b0:	a80f883a 	mov	r7,r21
  8015b4:	1009883a 	mov	r4,r2
  8015b8:	180b883a 	mov	r5,r3
  8015bc:	000d883a 	mov	r6,zero
  8015c0:	08034540 	call	803454 <__subdf3>
  8015c4:	da400117 	ldw	r9,4(sp)
  8015c8:	da000217 	ldw	r8,8(sp)
  8015cc:	8809883a 	mov	r4,r17
  8015d0:	480d883a 	mov	r6,r9
  8015d4:	400f883a 	mov	r7,r8
  8015d8:	800b883a 	mov	r5,r16
  8015dc:	1027883a 	mov	r19,r2
  8015e0:	182b883a 	mov	r21,r3
  8015e4:	08034b40 	call	8034b4 <__muldf3>
  8015e8:	b009883a 	mov	r4,r22
  8015ec:	900b883a 	mov	r5,r18
  8015f0:	b80d883a 	mov	r6,r23
  8015f4:	e00f883a 	mov	r7,fp
  8015f8:	1023883a 	mov	r17,r2
  8015fc:	1821883a 	mov	r16,r3
  801600:	08034b40 	call	8034b4 <__muldf3>
  801604:	8809883a 	mov	r4,r17
  801608:	800b883a 	mov	r5,r16
  80160c:	100d883a 	mov	r6,r2
  801610:	180f883a 	mov	r7,r3
  801614:	08034540 	call	803454 <__subdf3>
  801618:	9809883a 	mov	r4,r19
  80161c:	a80b883a 	mov	r5,r21
  801620:	100d883a 	mov	r6,r2
  801624:	180f883a 	mov	r7,r3
  801628:	08034540 	call	803454 <__subdf3>
  80162c:	d9400017 	ldw	r5,0(sp)
  801630:	a009883a 	mov	r4,r20
  801634:	100d883a 	mov	r6,r2
  801638:	180f883a 	mov	r7,r3
  80163c:	08034540 	call	803454 <__subdf3>
  801640:	dfc00c17 	ldw	ra,48(sp)
  801644:	df000b17 	ldw	fp,44(sp)
  801648:	ddc00a17 	ldw	r23,40(sp)
  80164c:	dd800917 	ldw	r22,36(sp)
  801650:	dd400817 	ldw	r21,32(sp)
  801654:	dd000717 	ldw	r20,28(sp)
  801658:	dcc00617 	ldw	r19,24(sp)
  80165c:	dc800517 	ldw	r18,20(sp)
  801660:	dc400417 	ldw	r17,16(sp)
  801664:	dc000317 	ldw	r16,12(sp)
  801668:	dec00d04 	addi	sp,sp,52
  80166c:	f800283a 	ret
  801670:	008ff9f4 	movhi	r2,16359
  801674:	0029883a 	mov	r20,zero
  801678:	d8800015 	stw	r2,0(sp)
  80167c:	054ff4b4 	movhi	r21,16338
  801680:	003fc406 	br	801594 <__kernel_cos+0x3a8>
  801684:	0005883a 	mov	r2,zero
  801688:	00cffc34 	movhi	r3,16368
  80168c:	003fec06 	br	801640 <__kernel_cos+0x454>

00801690 <__kernel_rem_pio2>:
  801690:	deff5a04 	addi	sp,sp,-664
  801694:	da00a617 	ldw	r8,664(sp)
  801698:	00c02034 	movhi	r3,128
  80169c:	18dacb04 	addi	r3,r3,27436
  8016a0:	dc409d15 	stw	r17,628(sp)
  8016a4:	4205883a 	add	r2,r8,r8
  8016a8:	1085883a 	add	r2,r2,r2
  8016ac:	1885883a 	add	r2,r3,r2
  8016b0:	10800017 	ldw	r2,0(r2)
  8016b4:	d9409215 	stw	r5,584(sp)
  8016b8:	2023883a 	mov	r17,r4
  8016bc:	01400604 	movi	r5,24
  8016c0:	313fff44 	addi	r4,r6,-3
  8016c4:	dc809e15 	stw	r18,632(sp)
  8016c8:	dc009c15 	stw	r16,624(sp)
  8016cc:	dfc0a515 	stw	ra,660(sp)
  8016d0:	3821883a 	mov	r16,r7
  8016d4:	df00a415 	stw	fp,656(sp)
  8016d8:	ddc0a315 	stw	r23,652(sp)
  8016dc:	dd80a215 	stw	r22,648(sp)
  8016e0:	dd40a115 	stw	r21,644(sp)
  8016e4:	dd00a015 	stw	r20,640(sp)
  8016e8:	dcc09f15 	stw	r19,636(sp)
  8016ec:	3025883a 	mov	r18,r6
  8016f0:	d8809315 	stw	r2,588(sp)
  8016f4:	0803d240 	call	803d24 <__divsi3>
  8016f8:	823fffc4 	addi	r8,r16,-1
  8016fc:	d8809515 	stw	r2,596(sp)
  801700:	da008e15 	stw	r8,568(sp)
  801704:	10033116 	blt	r2,zero,8023cc <__kernel_rem_pio2+0xd3c>
  801708:	d8809517 	ldw	r2,596(sp)
  80170c:	01400604 	movi	r5,24
  801710:	0088303a 	nor	r4,zero,r2
  801714:	0803de00 	call	803de0 <__mulsi3>
  801718:	da008e17 	ldw	r8,568(sp)
  80171c:	d9009317 	ldw	r4,588(sp)
  801720:	14a5883a 	add	r18,r2,r18
  801724:	d8809517 	ldw	r2,596(sp)
  801728:	4107883a 	add	r3,r8,r4
  80172c:	dc809115 	stw	r18,580(sp)
  801730:	1227c83a 	sub	r19,r2,r8
  801734:	18001016 	blt	r3,zero,801778 <__kernel_rem_pio2+0xe8>
  801738:	da00a717 	ldw	r8,668(sp)
  80173c:	9ceb883a 	add	r21,r19,r19
  801740:	ad6b883a 	add	r21,r21,r21
  801744:	98c7883a 	add	r3,r19,r3
  801748:	dd005004 	addi	r20,sp,320
  80174c:	456b883a 	add	r21,r8,r21
  801750:	1c800044 	addi	r18,r3,1
  801754:	98015516 	blt	r19,zero,801cac <__kernel_rem_pio2+0x61c>
  801758:	a9000017 	ldw	r4,0(r21)
  80175c:	0803a700 	call	803a70 <__floatsidf>
  801760:	a0800015 	stw	r2,0(r20)
  801764:	a0c00115 	stw	r3,4(r20)
  801768:	9cc00044 	addi	r19,r19,1
  80176c:	a5000204 	addi	r20,r20,8
  801770:	ad400104 	addi	r21,r21,4
  801774:	9cbff71e 	bne	r19,r18,801754 <__kernel_rem_pio2+0xc4>
  801778:	da009317 	ldw	r8,588(sp)
  80177c:	40032e16 	blt	r8,zero,802438 <__kernel_rem_pio2+0xda8>
  801780:	da009317 	ldw	r8,588(sp)
  801784:	dc800204 	addi	r18,sp,8
  801788:	802090fa 	slli	r16,r16,3
  80178c:	402a90fa 	slli	r21,r8,3
  801790:	da008e17 	ldw	r8,568(sp)
  801794:	d829883a 	mov	r20,sp
  801798:	956d883a 	add	r22,r18,r21
  80179c:	dd808d15 	stw	r22,564(sp)
  8017a0:	ddc08e17 	ldw	r23,568(sp)
  8017a4:	40001f16 	blt	r8,zero,801824 <__kernel_rem_pio2+0x194>
  8017a8:	b82690fa 	slli	r19,r23,3
  8017ac:	d8805004 	addi	r2,sp,320
  8017b0:	002b883a 	mov	r21,zero
  8017b4:	002d883a 	mov	r22,zero
  8017b8:	14e7883a 	add	r19,r2,r19
  8017bc:	0039883a 	mov	fp,zero
  8017c0:	8d51883a 	add	r8,r17,r21
  8017c4:	99800017 	ldw	r6,0(r19)
  8017c8:	99c00117 	ldw	r7,4(r19)
  8017cc:	41000017 	ldw	r4,0(r8)
  8017d0:	41400117 	ldw	r5,4(r8)
  8017d4:	ad400204 	addi	r21,r21,8
  8017d8:	9cfffe04 	addi	r19,r19,-8
  8017dc:	08034b40 	call	8034b4 <__muldf3>
  8017e0:	b009883a 	mov	r4,r22
  8017e4:	e00b883a 	mov	r5,fp
  8017e8:	100d883a 	mov	r6,r2
  8017ec:	180f883a 	mov	r7,r3
  8017f0:	08034000 	call	803400 <__adddf3>
  8017f4:	102d883a 	mov	r22,r2
  8017f8:	1839883a 	mov	fp,r3
  8017fc:	ac3ff01e 	bne	r21,r16,8017c0 <__kernel_rem_pio2+0x130>
  801800:	da008d17 	ldw	r8,564(sp)
  801804:	a5800015 	stw	r22,0(r20)
  801808:	a7000115 	stw	fp,4(r20)
  80180c:	bdc00044 	addi	r23,r23,1
  801810:	9029883a 	mov	r20,r18
  801814:	92000b26 	beq	r18,r8,801844 <__kernel_rem_pio2+0x1b4>
  801818:	da008e17 	ldw	r8,568(sp)
  80181c:	94800204 	addi	r18,r18,8
  801820:	403fe10e 	bge	r8,zero,8017a8 <__kernel_rem_pio2+0x118>
  801824:	da008d17 	ldw	r8,564(sp)
  801828:	002d883a 	mov	r22,zero
  80182c:	0039883a 	mov	fp,zero
  801830:	a5800015 	stw	r22,0(r20)
  801834:	a7000115 	stw	fp,4(r20)
  801838:	bdc00044 	addi	r23,r23,1
  80183c:	9029883a 	mov	r20,r18
  801840:	923ff51e 	bne	r18,r8,801818 <__kernel_rem_pio2+0x188>
  801844:	da009317 	ldw	r8,588(sp)
  801848:	4207883a 	add	r3,r8,r8
  80184c:	40bfffc4 	addi	r2,r8,-1
  801850:	417fff84 	addi	r5,r8,-2
  801854:	18c7883a 	add	r3,r3,r3
  801858:	da007704 	addi	r8,sp,476
  80185c:	da008c15 	stw	r8,560(sp)
  801860:	40d1883a 	add	r8,r8,r3
  801864:	da009615 	stw	r8,600(sp)
  801868:	da009317 	ldw	r8,588(sp)
  80186c:	1085883a 	add	r2,r2,r2
  801870:	1085883a 	add	r2,r2,r2
  801874:	da008f15 	stw	r8,572(sp)
  801878:	401090fa 	slli	r8,r8,3
  80187c:	d889883a 	add	r4,sp,r2
  801880:	2945883a 	add	r2,r5,r5
  801884:	21007804 	addi	r4,r4,480
  801888:	1085883a 	add	r2,r2,r2
  80188c:	da009415 	stw	r8,592(sp)
  801890:	d9009715 	stw	r4,604(sp)
  801894:	d8809815 	stw	r2,608(sp)
  801898:	da009417 	ldw	r8,592(sp)
  80189c:	da05883a 	add	r2,sp,r8
  8018a0:	da008f17 	ldw	r8,572(sp)
  8018a4:	17000017 	ldw	fp,0(r2)
  8018a8:	15400117 	ldw	r21,4(r2)
  8018ac:	02002b0e 	bge	zero,r8,80195c <__kernel_rem_pio2+0x2cc>
  8018b0:	44bfffc4 	addi	r18,r8,-1
  8018b4:	902490fa 	slli	r18,r18,3
  8018b8:	4227883a 	add	r19,r8,r8
  8018bc:	9ce7883a 	add	r19,r19,r19
  8018c0:	dd007804 	addi	r20,sp,480
  8018c4:	dca5883a 	add	r18,sp,r18
  8018c8:	a4e7883a 	add	r19,r20,r19
  8018cc:	000d883a 	mov	r6,zero
  8018d0:	01cf9c34 	movhi	r7,15984
  8018d4:	e009883a 	mov	r4,fp
  8018d8:	a80b883a 	mov	r5,r21
  8018dc:	08034b40 	call	8034b4 <__muldf3>
  8018e0:	180b883a 	mov	r5,r3
  8018e4:	1009883a 	mov	r4,r2
  8018e8:	0803b440 	call	803b44 <__fixdfsi>
  8018ec:	1009883a 	mov	r4,r2
  8018f0:	0803a700 	call	803a70 <__floatsidf>
  8018f4:	1009883a 	mov	r4,r2
  8018f8:	180b883a 	mov	r5,r3
  8018fc:	000d883a 	mov	r6,zero
  801900:	01d05c34 	movhi	r7,16752
  801904:	102f883a 	mov	r23,r2
  801908:	182d883a 	mov	r22,r3
  80190c:	08034b40 	call	8034b4 <__muldf3>
  801910:	e009883a 	mov	r4,fp
  801914:	a80b883a 	mov	r5,r21
  801918:	100d883a 	mov	r6,r2
  80191c:	180f883a 	mov	r7,r3
  801920:	08034540 	call	803454 <__subdf3>
  801924:	180b883a 	mov	r5,r3
  801928:	1009883a 	mov	r4,r2
  80192c:	0803b440 	call	803b44 <__fixdfsi>
  801930:	91800017 	ldw	r6,0(r18)
  801934:	91c00117 	ldw	r7,4(r18)
  801938:	a0800015 	stw	r2,0(r20)
  80193c:	b809883a 	mov	r4,r23
  801940:	b00b883a 	mov	r5,r22
  801944:	08034000 	call	803400 <__adddf3>
  801948:	a5000104 	addi	r20,r20,4
  80194c:	1039883a 	mov	fp,r2
  801950:	182b883a 	mov	r21,r3
  801954:	94bffe04 	addi	r18,r18,-8
  801958:	a4ffdc1e 	bne	r20,r19,8018cc <__kernel_rem_pio2+0x23c>
  80195c:	d9809117 	ldw	r6,580(sp)
  801960:	e009883a 	mov	r4,fp
  801964:	a80b883a 	mov	r5,r21
  801968:	08029180 	call	802918 <scalbn>
  80196c:	000d883a 	mov	r6,zero
  801970:	01cff034 	movhi	r7,16320
  801974:	1009883a 	mov	r4,r2
  801978:	180b883a 	mov	r5,r3
  80197c:	1027883a 	mov	r19,r2
  801980:	1825883a 	mov	r18,r3
  801984:	08034b40 	call	8034b4 <__muldf3>
  801988:	1009883a 	mov	r4,r2
  80198c:	180b883a 	mov	r5,r3
  801990:	08027280 	call	802728 <floor>
  801994:	1009883a 	mov	r4,r2
  801998:	180b883a 	mov	r5,r3
  80199c:	000d883a 	mov	r6,zero
  8019a0:	01d00834 	movhi	r7,16416
  8019a4:	08034b40 	call	8034b4 <__muldf3>
  8019a8:	100d883a 	mov	r6,r2
  8019ac:	180f883a 	mov	r7,r3
  8019b0:	9809883a 	mov	r4,r19
  8019b4:	900b883a 	mov	r5,r18
  8019b8:	08034540 	call	803454 <__subdf3>
  8019bc:	180b883a 	mov	r5,r3
  8019c0:	1009883a 	mov	r4,r2
  8019c4:	1827883a 	mov	r19,r3
  8019c8:	1029883a 	mov	r20,r2
  8019cc:	0803b440 	call	803b44 <__fixdfsi>
  8019d0:	1009883a 	mov	r4,r2
  8019d4:	1025883a 	mov	r18,r2
  8019d8:	0803a700 	call	803a70 <__floatsidf>
  8019dc:	100d883a 	mov	r6,r2
  8019e0:	a009883a 	mov	r4,r20
  8019e4:	980b883a 	mov	r5,r19
  8019e8:	180f883a 	mov	r7,r3
  8019ec:	08034540 	call	803454 <__subdf3>
  8019f0:	d9809117 	ldw	r6,580(sp)
  8019f4:	1017883a 	mov	r11,r2
  8019f8:	1039883a 	mov	fp,r2
  8019fc:	182b883a 	mov	r21,r3
  801a00:	0181790e 	bge	zero,r6,801fe8 <__kernel_rem_pio2+0x958>
  801a04:	da008f17 	ldw	r8,572(sp)
  801a08:	d9409117 	ldw	r5,580(sp)
  801a0c:	01800604 	movi	r6,24
  801a10:	40bfffc4 	addi	r2,r8,-1
  801a14:	1085883a 	add	r2,r2,r2
  801a18:	1085883a 	add	r2,r2,r2
  801a1c:	d889883a 	add	r4,sp,r2
  801a20:	21007804 	addi	r4,r4,480
  801a24:	20800017 	ldw	r2,0(r4)
  801a28:	314dc83a 	sub	r6,r6,r5
  801a2c:	d9c09117 	ldw	r7,580(sp)
  801a30:	118bd83a 	sra	r5,r2,r6
  801a34:	04c005c4 	movi	r19,23
  801a38:	99e7c83a 	sub	r19,r19,r7
  801a3c:	298c983a 	sll	r6,r5,r6
  801a40:	9165883a 	add	r18,r18,r5
  801a44:	1185c83a 	sub	r2,r2,r6
  801a48:	14e7d83a 	sra	r19,r2,r19
  801a4c:	20800015 	stw	r2,0(r4)
  801a50:	04c02c0e 	bge	zero,r19,801b04 <__kernel_rem_pio2+0x474>
  801a54:	da008f17 	ldw	r8,572(sp)
  801a58:	94800044 	addi	r18,r18,1
  801a5c:	0201880e 	bge	zero,r8,802080 <__kernel_rem_pio2+0x9f0>
  801a60:	4215883a 	add	r10,r8,r8
  801a64:	5295883a 	add	r10,r10,r10
  801a68:	da007804 	addi	r8,sp,480
  801a6c:	4295883a 	add	r10,r8,r10
  801a70:	0029883a 	mov	r20,zero
  801a74:	01404034 	movhi	r5,256
  801a78:	297fffc4 	addi	r5,r5,-1
  801a7c:	01004034 	movhi	r4,256
  801a80:	00000606 	br	801a9c <__kernel_rem_pio2+0x40c>
  801a84:	208dc83a 	sub	r6,r4,r2
  801a88:	10000226 	beq	r2,zero,801a94 <__kernel_rem_pio2+0x404>
  801a8c:	41800015 	stw	r6,0(r8)
  801a90:	05000044 	movi	r20,1
  801a94:	42000104 	addi	r8,r8,4
  801a98:	42800726 	beq	r8,r10,801ab8 <__kernel_rem_pio2+0x428>
  801a9c:	40800017 	ldw	r2,0(r8)
  801aa0:	a03ff826 	beq	r20,zero,801a84 <__kernel_rem_pio2+0x3f4>
  801aa4:	2885c83a 	sub	r2,r5,r2
  801aa8:	40800015 	stw	r2,0(r8)
  801aac:	42000104 	addi	r8,r8,4
  801ab0:	05000044 	movi	r20,1
  801ab4:	42bff91e 	bne	r8,r10,801a9c <__kernel_rem_pio2+0x40c>
  801ab8:	d9809117 	ldw	r6,580(sp)
  801abc:	01800f0e 	bge	zero,r6,801afc <__kernel_rem_pio2+0x46c>
  801ac0:	00800044 	movi	r2,1
  801ac4:	30815226 	beq	r6,r2,802010 <__kernel_rem_pio2+0x980>
  801ac8:	00800084 	movi	r2,2
  801acc:	30800b1e 	bne	r6,r2,801afc <__kernel_rem_pio2+0x46c>
  801ad0:	da008f17 	ldw	r8,572(sp)
  801ad4:	01001034 	movhi	r4,64
  801ad8:	213fffc4 	addi	r4,r4,-1
  801adc:	40bfffc4 	addi	r2,r8,-1
  801ae0:	1085883a 	add	r2,r2,r2
  801ae4:	1085883a 	add	r2,r2,r2
  801ae8:	d885883a 	add	r2,sp,r2
  801aec:	10807804 	addi	r2,r2,480
  801af0:	11400017 	ldw	r5,0(r2)
  801af4:	2908703a 	and	r4,r5,r4
  801af8:	11000015 	stw	r4,0(r2)
  801afc:	00800084 	movi	r2,2
  801b00:	98806d26 	beq	r19,r2,801cb8 <__kernel_rem_pio2+0x628>
  801b04:	e009883a 	mov	r4,fp
  801b08:	a80b883a 	mov	r5,r21
  801b0c:	000d883a 	mov	r6,zero
  801b10:	000f883a 	mov	r7,zero
  801b14:	080394c0 	call	80394c <__eqdf2>
  801b18:	1000801e 	bne	r2,zero,801d1c <__kernel_rem_pio2+0x68c>
  801b1c:	da008f17 	ldw	r8,572(sp)
  801b20:	417fffc4 	addi	r5,r8,-1
  801b24:	da009317 	ldw	r8,588(sp)
  801b28:	2a000b16 	blt	r5,r8,801b58 <__kernel_rem_pio2+0x4c8>
  801b2c:	294d883a 	add	r6,r5,r5
  801b30:	d9c09617 	ldw	r7,600(sp)
  801b34:	d8c07804 	addi	r3,sp,480
  801b38:	3185883a 	add	r2,r6,r6
  801b3c:	1885883a 	add	r2,r3,r2
  801b40:	0007883a 	mov	r3,zero
  801b44:	11000017 	ldw	r4,0(r2)
  801b48:	10bfff04 	addi	r2,r2,-4
  801b4c:	1906b03a 	or	r3,r3,r4
  801b50:	11fffc1e 	bne	r2,r7,801b44 <__kernel_rem_pio2+0x4b4>
  801b54:	1801601e 	bne	r3,zero,8020d8 <__kernel_rem_pio2+0xa48>
  801b58:	da009717 	ldw	r8,604(sp)
  801b5c:	40800017 	ldw	r2,0(r8)
  801b60:	1001541e 	bne	r2,zero,8020b4 <__kernel_rem_pio2+0xa24>
  801b64:	da009817 	ldw	r8,608(sp)
  801b68:	d8c07804 	addi	r3,sp,480
  801b6c:	1a05883a 	add	r2,r3,r8
  801b70:	00c00044 	movi	r3,1
  801b74:	10bfff04 	addi	r2,r2,-4
  801b78:	11000117 	ldw	r4,4(r2)
  801b7c:	18c00044 	addi	r3,r3,1
  801b80:	203ffc26 	beq	r4,zero,801b74 <__kernel_rem_pio2+0x4e4>
  801b84:	da008f17 	ldw	r8,572(sp)
  801b88:	40800044 	addi	r2,r8,1
  801b8c:	40d1883a 	add	r8,r8,r3
  801b90:	da008f15 	stw	r8,572(sp)
  801b94:	40814d16 	blt	r8,r2,8020cc <__kernel_rem_pio2+0xa3c>
  801b98:	da008e17 	ldw	r8,568(sp)
  801b9c:	d8c09517 	ldw	r3,596(sp)
  801ba0:	40ab883a 	add	r21,r8,r2
  801ba4:	da008f17 	ldw	r8,572(sp)
  801ba8:	10e9883a 	add	r20,r2,r3
  801bac:	100490fa 	slli	r2,r2,3
  801bb0:	401090fa 	slli	r8,r8,3
  801bb4:	a529883a 	add	r20,r20,r20
  801bb8:	a529883a 	add	r20,r20,r20
  801bbc:	da009415 	stw	r8,592(sp)
  801bc0:	da00a717 	ldw	r8,668(sp)
  801bc4:	d8a5883a 	add	r18,sp,r2
  801bc8:	d8809417 	ldw	r2,592(sp)
  801bcc:	4529883a 	add	r20,r8,r20
  801bd0:	a82690fa 	slli	r19,r21,3
  801bd4:	a1000017 	ldw	r4,0(r20)
  801bd8:	da000204 	addi	r8,sp,8
  801bdc:	4091883a 	add	r8,r8,r2
  801be0:	d8c05004 	addi	r3,sp,320
  801be4:	1ce7883a 	add	r19,r3,r19
  801be8:	da009015 	stw	r8,576(sp)
  801bec:	dd408d15 	stw	r21,564(sp)
  801bf0:	0803a700 	call	803a70 <__floatsidf>
  801bf4:	da008e17 	ldw	r8,568(sp)
  801bf8:	98800015 	stw	r2,0(r19)
  801bfc:	98c00115 	stw	r3,4(r19)
  801c00:	40002716 	blt	r8,zero,801ca0 <__kernel_rem_pio2+0x610>
  801c04:	da008d17 	ldw	r8,564(sp)
  801c08:	d8805004 	addi	r2,sp,320
  801c0c:	002d883a 	mov	r22,zero
  801c10:	402a90fa 	slli	r21,r8,3
  801c14:	0039883a 	mov	fp,zero
  801c18:	002f883a 	mov	r23,zero
  801c1c:	156b883a 	add	r21,r2,r21
  801c20:	8d91883a 	add	r8,r17,r22
  801c24:	a9800017 	ldw	r6,0(r21)
  801c28:	a9c00117 	ldw	r7,4(r21)
  801c2c:	41000017 	ldw	r4,0(r8)
  801c30:	41400117 	ldw	r5,4(r8)
  801c34:	b5800204 	addi	r22,r22,8
  801c38:	ad7ffe04 	addi	r21,r21,-8
  801c3c:	08034b40 	call	8034b4 <__muldf3>
  801c40:	e009883a 	mov	r4,fp
  801c44:	b80b883a 	mov	r5,r23
  801c48:	100d883a 	mov	r6,r2
  801c4c:	180f883a 	mov	r7,r3
  801c50:	08034000 	call	803400 <__adddf3>
  801c54:	1039883a 	mov	fp,r2
  801c58:	182f883a 	mov	r23,r3
  801c5c:	b43ff01e 	bne	r22,r16,801c20 <__kernel_rem_pio2+0x590>
  801c60:	da008d17 	ldw	r8,564(sp)
  801c64:	97000015 	stw	fp,0(r18)
  801c68:	95c00115 	stw	r23,4(r18)
  801c6c:	42000044 	addi	r8,r8,1
  801c70:	da008d15 	stw	r8,564(sp)
  801c74:	da009017 	ldw	r8,576(sp)
  801c78:	94800204 	addi	r18,r18,8
  801c7c:	a5000104 	addi	r20,r20,4
  801c80:	9cc00204 	addi	r19,r19,8
  801c84:	923f0426 	beq	r18,r8,801898 <__kernel_rem_pio2+0x208>
  801c88:	a1000017 	ldw	r4,0(r20)
  801c8c:	0803a700 	call	803a70 <__floatsidf>
  801c90:	da008e17 	ldw	r8,568(sp)
  801c94:	98800015 	stw	r2,0(r19)
  801c98:	98c00115 	stw	r3,4(r19)
  801c9c:	403fd90e 	bge	r8,zero,801c04 <__kernel_rem_pio2+0x574>
  801ca0:	0039883a 	mov	fp,zero
  801ca4:	002f883a 	mov	r23,zero
  801ca8:	003fed06 	br	801c60 <__kernel_rem_pio2+0x5d0>
  801cac:	0005883a 	mov	r2,zero
  801cb0:	0007883a 	mov	r3,zero
  801cb4:	003eaa06 	br	801760 <__kernel_rem_pio2+0xd0>
  801cb8:	0009883a 	mov	r4,zero
  801cbc:	014ffc34 	movhi	r5,16368
  801cc0:	580d883a 	mov	r6,r11
  801cc4:	180f883a 	mov	r7,r3
  801cc8:	08034540 	call	803454 <__subdf3>
  801ccc:	1039883a 	mov	fp,r2
  801cd0:	182b883a 	mov	r21,r3
  801cd4:	a03f8b26 	beq	r20,zero,801b04 <__kernel_rem_pio2+0x474>
  801cd8:	d9809117 	ldw	r6,580(sp)
  801cdc:	0009883a 	mov	r4,zero
  801ce0:	014ffc34 	movhi	r5,16368
  801ce4:	08029180 	call	802918 <scalbn>
  801ce8:	e009883a 	mov	r4,fp
  801cec:	a80b883a 	mov	r5,r21
  801cf0:	100d883a 	mov	r6,r2
  801cf4:	180f883a 	mov	r7,r3
  801cf8:	08034540 	call	803454 <__subdf3>
  801cfc:	1039883a 	mov	fp,r2
  801d00:	182b883a 	mov	r21,r3
  801d04:	e009883a 	mov	r4,fp
  801d08:	a80b883a 	mov	r5,r21
  801d0c:	000d883a 	mov	r6,zero
  801d10:	000f883a 	mov	r7,zero
  801d14:	080394c0 	call	80394c <__eqdf2>
  801d18:	103f8026 	beq	r2,zero,801b1c <__kernel_rem_pio2+0x48c>
  801d1c:	da009117 	ldw	r8,580(sp)
  801d20:	e009883a 	mov	r4,fp
  801d24:	a80b883a 	mov	r5,r21
  801d28:	020dc83a 	sub	r6,zero,r8
  801d2c:	dc808e15 	stw	r18,568(sp)
  801d30:	dcc08d15 	stw	r19,564(sp)
  801d34:	08029180 	call	802918 <scalbn>
  801d38:	1009883a 	mov	r4,r2
  801d3c:	180b883a 	mov	r5,r3
  801d40:	000d883a 	mov	r6,zero
  801d44:	01d05c34 	movhi	r7,16752
  801d48:	1021883a 	mov	r16,r2
  801d4c:	1823883a 	mov	r17,r3
  801d50:	0803a0c0 	call	803a0c <__gedf2>
  801d54:	10019f16 	blt	r2,zero,8023d4 <__kernel_rem_pio2+0xd44>
  801d58:	000d883a 	mov	r6,zero
  801d5c:	01cf9c34 	movhi	r7,15984
  801d60:	8009883a 	mov	r4,r16
  801d64:	880b883a 	mov	r5,r17
  801d68:	08034b40 	call	8034b4 <__muldf3>
  801d6c:	180b883a 	mov	r5,r3
  801d70:	1009883a 	mov	r4,r2
  801d74:	0803b440 	call	803b44 <__fixdfsi>
  801d78:	1009883a 	mov	r4,r2
  801d7c:	0803a700 	call	803a70 <__floatsidf>
  801d80:	da008f17 	ldw	r8,572(sp)
  801d84:	102b883a 	mov	r21,r2
  801d88:	a809883a 	mov	r4,r21
  801d8c:	4205883a 	add	r2,r8,r8
  801d90:	1085883a 	add	r2,r2,r2
  801d94:	180b883a 	mov	r5,r3
  801d98:	000d883a 	mov	r6,zero
  801d9c:	01d05c34 	movhi	r7,16752
  801da0:	d8b9883a 	add	fp,sp,r2
  801da4:	1829883a 	mov	r20,r3
  801da8:	08034b40 	call	8034b4 <__muldf3>
  801dac:	100d883a 	mov	r6,r2
  801db0:	8009883a 	mov	r4,r16
  801db4:	180f883a 	mov	r7,r3
  801db8:	880b883a 	mov	r5,r17
  801dbc:	08034540 	call	803454 <__subdf3>
  801dc0:	da008f17 	ldw	r8,572(sp)
  801dc4:	180b883a 	mov	r5,r3
  801dc8:	1009883a 	mov	r4,r2
  801dcc:	42000044 	addi	r8,r8,1
  801dd0:	da008f15 	stw	r8,572(sp)
  801dd4:	0803b440 	call	803b44 <__fixdfsi>
  801dd8:	da008f17 	ldw	r8,572(sp)
  801ddc:	e7007804 	addi	fp,fp,480
  801de0:	a809883a 	mov	r4,r21
  801de4:	4207883a 	add	r3,r8,r8
  801de8:	18c7883a 	add	r3,r3,r3
  801dec:	a00b883a 	mov	r5,r20
  801df0:	e0800015 	stw	r2,0(fp)
  801df4:	d8e1883a 	add	r16,sp,r3
  801df8:	0803b440 	call	803b44 <__fixdfsi>
  801dfc:	d9809117 	ldw	r6,580(sp)
  801e00:	84007804 	addi	r16,r16,480
  801e04:	80800015 	stw	r2,0(r16)
  801e08:	31800604 	addi	r6,r6,24
  801e0c:	d9809115 	stw	r6,580(sp)
  801e10:	d9809117 	ldw	r6,580(sp)
  801e14:	0009883a 	mov	r4,zero
  801e18:	014ffc34 	movhi	r5,16368
  801e1c:	08029180 	call	802918 <scalbn>
  801e20:	da008f17 	ldw	r8,572(sp)
  801e24:	1021883a 	mov	r16,r2
  801e28:	1823883a 	mov	r17,r3
  801e2c:	40004616 	blt	r8,zero,801f48 <__kernel_rem_pio2+0x8b8>
  801e30:	401090fa 	slli	r8,r8,3
  801e34:	d8807804 	addi	r2,sp,480
  801e38:	da009415 	stw	r8,592(sp)
  801e3c:	da008f17 	ldw	r8,572(sp)
  801e40:	422b883a 	add	r21,r8,r8
  801e44:	da009417 	ldw	r8,592(sp)
  801e48:	ad6b883a 	add	r21,r21,r21
  801e4c:	156b883a 	add	r21,r2,r21
  801e50:	da29883a 	add	r20,sp,r8
  801e54:	a9000017 	ldw	r4,0(r21)
  801e58:	a53ffe04 	addi	r20,r20,-8
  801e5c:	ad7fff04 	addi	r21,r21,-4
  801e60:	0803a700 	call	803a70 <__floatsidf>
  801e64:	800d883a 	mov	r6,r16
  801e68:	880f883a 	mov	r7,r17
  801e6c:	1009883a 	mov	r4,r2
  801e70:	180b883a 	mov	r5,r3
  801e74:	08034b40 	call	8034b4 <__muldf3>
  801e78:	8009883a 	mov	r4,r16
  801e7c:	880b883a 	mov	r5,r17
  801e80:	000d883a 	mov	r6,zero
  801e84:	01cf9c34 	movhi	r7,15984
  801e88:	a0800215 	stw	r2,8(r20)
  801e8c:	a0c00315 	stw	r3,12(r20)
  801e90:	08034b40 	call	8034b4 <__muldf3>
  801e94:	da008c17 	ldw	r8,560(sp)
  801e98:	1021883a 	mov	r16,r2
  801e9c:	1823883a 	mov	r17,r3
  801ea0:	aa3fec1e 	bne	r21,r8,801e54 <__kernel_rem_pio2+0x7c4>
  801ea4:	da009417 	ldw	r8,592(sp)
  801ea8:	dd409317 	ldw	r21,588(sp)
  801eac:	0021883a 	mov	r16,zero
  801eb0:	da23883a 	add	r17,sp,r8
  801eb4:	da008f17 	ldw	r8,572(sp)
  801eb8:	05002034 	movhi	r20,128
  801ebc:	a51acf04 	addi	r20,r20,27452
  801ec0:	45800044 	addi	r22,r8,1
  801ec4:	a8007016 	blt	r21,zero,802088 <__kernel_rem_pio2+0x9f8>
  801ec8:	80006f16 	blt	r16,zero,802088 <__kernel_rem_pio2+0x9f8>
  801ecc:	0025883a 	mov	r18,zero
  801ed0:	0039883a 	mov	fp,zero
  801ed4:	002f883a 	mov	r23,zero
  801ed8:	0027883a 	mov	r19,zero
  801edc:	00000106 	br	801ee4 <__kernel_rem_pio2+0x854>
  801ee0:	84c01116 	blt	r16,r19,801f28 <__kernel_rem_pio2+0x898>
  801ee4:	a48d883a 	add	r6,r20,r18
  801ee8:	8c8f883a 	add	r7,r17,r18
  801eec:	31000017 	ldw	r4,0(r6)
  801ef0:	31400117 	ldw	r5,4(r6)
  801ef4:	39800017 	ldw	r6,0(r7)
  801ef8:	39c00117 	ldw	r7,4(r7)
  801efc:	9cc00044 	addi	r19,r19,1
  801f00:	94800204 	addi	r18,r18,8
  801f04:	08034b40 	call	8034b4 <__muldf3>
  801f08:	e009883a 	mov	r4,fp
  801f0c:	b80b883a 	mov	r5,r23
  801f10:	100d883a 	mov	r6,r2
  801f14:	180f883a 	mov	r7,r3
  801f18:	08034000 	call	803400 <__adddf3>
  801f1c:	1039883a 	mov	fp,r2
  801f20:	182f883a 	mov	r23,r3
  801f24:	acffee0e 	bge	r21,r19,801ee0 <__kernel_rem_pio2+0x850>
  801f28:	800490fa 	slli	r2,r16,3
  801f2c:	84000044 	addi	r16,r16,1
  801f30:	8c7ffe04 	addi	r17,r17,-8
  801f34:	d885883a 	add	r2,sp,r2
  801f38:	10802804 	addi	r2,r2,160
  801f3c:	17000015 	stw	fp,0(r2)
  801f40:	15c00115 	stw	r23,4(r2)
  801f44:	85bfdf1e 	bne	r16,r22,801ec4 <__kernel_rem_pio2+0x834>
  801f48:	da00a617 	ldw	r8,664(sp)
  801f4c:	00800084 	movi	r2,2
  801f50:	1200a816 	blt	r2,r8,8021f4 <__kernel_rem_pio2+0xb64>
  801f54:	02007916 	blt	zero,r8,80213c <__kernel_rem_pio2+0xaac>
  801f58:	4000151e 	bne	r8,zero,801fb0 <__kernel_rem_pio2+0x920>
  801f5c:	da008f17 	ldw	r8,572(sp)
  801f60:	40013216 	blt	r8,zero,80242c <__kernel_rem_pio2+0xd9c>
  801f64:	402090fa 	slli	r16,r8,3
  801f68:	d8802804 	addi	r2,sp,160
  801f6c:	dc402604 	addi	r17,sp,152
  801f70:	1421883a 	add	r16,r2,r16
  801f74:	0007883a 	mov	r3,zero
  801f78:	0005883a 	mov	r2,zero
  801f7c:	81800017 	ldw	r6,0(r16)
  801f80:	81c00117 	ldw	r7,4(r16)
  801f84:	1009883a 	mov	r4,r2
  801f88:	843ffe04 	addi	r16,r16,-8
  801f8c:	180b883a 	mov	r5,r3
  801f90:	08034000 	call	803400 <__adddf3>
  801f94:	847ff91e 	bne	r16,r17,801f7c <__kernel_rem_pio2+0x8ec>
  801f98:	da008d17 	ldw	r8,564(sp)
  801f9c:	40000126 	beq	r8,zero,801fa4 <__kernel_rem_pio2+0x914>
  801fa0:	18e0003c 	xorhi	r3,r3,32768
  801fa4:	d9409217 	ldw	r5,584(sp)
  801fa8:	28800015 	stw	r2,0(r5)
  801fac:	28c00115 	stw	r3,4(r5)
  801fb0:	d8c08e17 	ldw	r3,568(sp)
  801fb4:	188001cc 	andi	r2,r3,7
  801fb8:	dfc0a517 	ldw	ra,660(sp)
  801fbc:	df00a417 	ldw	fp,656(sp)
  801fc0:	ddc0a317 	ldw	r23,652(sp)
  801fc4:	dd80a217 	ldw	r22,648(sp)
  801fc8:	dd40a117 	ldw	r21,644(sp)
  801fcc:	dd00a017 	ldw	r20,640(sp)
  801fd0:	dcc09f17 	ldw	r19,636(sp)
  801fd4:	dc809e17 	ldw	r18,632(sp)
  801fd8:	dc409d17 	ldw	r17,628(sp)
  801fdc:	dc009c17 	ldw	r16,624(sp)
  801fe0:	dec0a604 	addi	sp,sp,664
  801fe4:	f800283a 	ret
  801fe8:	d9809117 	ldw	r6,580(sp)
  801fec:	3000141e 	bne	r6,zero,802040 <__kernel_rem_pio2+0x9b0>
  801ff0:	da008f17 	ldw	r8,572(sp)
  801ff4:	40bfffc4 	addi	r2,r8,-1
  801ff8:	1085883a 	add	r2,r2,r2
  801ffc:	1085883a 	add	r2,r2,r2
  802000:	d885883a 	add	r2,sp,r2
  802004:	14c07817 	ldw	r19,480(r2)
  802008:	9827d5fa 	srai	r19,r19,23
  80200c:	003e9006 	br	801a50 <__kernel_rem_pio2+0x3c0>
  802010:	da008f17 	ldw	r8,572(sp)
  802014:	01002034 	movhi	r4,128
  802018:	213fffc4 	addi	r4,r4,-1
  80201c:	40bfffc4 	addi	r2,r8,-1
  802020:	1085883a 	add	r2,r2,r2
  802024:	1085883a 	add	r2,r2,r2
  802028:	d885883a 	add	r2,sp,r2
  80202c:	10807804 	addi	r2,r2,480
  802030:	11400017 	ldw	r5,0(r2)
  802034:	2908703a 	and	r4,r5,r4
  802038:	11000015 	stw	r4,0(r2)
  80203c:	003eaf06 	br	801afc <__kernel_rem_pio2+0x46c>
  802040:	180b883a 	mov	r5,r3
  802044:	1009883a 	mov	r4,r2
  802048:	000d883a 	mov	r6,zero
  80204c:	01cff834 	movhi	r7,16352
  802050:	d8c09a15 	stw	r3,616(sp)
  802054:	d8809915 	stw	r2,612(sp)
  802058:	0803a0c0 	call	803a0c <__gedf2>
  80205c:	d8c09a17 	ldw	r3,616(sp)
  802060:	dac09917 	ldw	r11,612(sp)
  802064:	1000020e 	bge	r2,zero,802070 <__kernel_rem_pio2+0x9e0>
  802068:	0027883a 	mov	r19,zero
  80206c:	003ea506 	br	801b04 <__kernel_rem_pio2+0x474>
  802070:	da008f17 	ldw	r8,572(sp)
  802074:	04c00084 	movi	r19,2
  802078:	94800044 	addi	r18,r18,1
  80207c:	023e7816 	blt	zero,r8,801a60 <__kernel_rem_pio2+0x3d0>
  802080:	0029883a 	mov	r20,zero
  802084:	003e8c06 	br	801ab8 <__kernel_rem_pio2+0x428>
  802088:	800490fa 	slli	r2,r16,3
  80208c:	0039883a 	mov	fp,zero
  802090:	002f883a 	mov	r23,zero
  802094:	d885883a 	add	r2,sp,r2
  802098:	10802804 	addi	r2,r2,160
  80209c:	84000044 	addi	r16,r16,1
  8020a0:	17000015 	stw	fp,0(r2)
  8020a4:	15c00115 	stw	r23,4(r2)
  8020a8:	8c7ffe04 	addi	r17,r17,-8
  8020ac:	85bf851e 	bne	r16,r22,801ec4 <__kernel_rem_pio2+0x834>
  8020b0:	003fa506 	br	801f48 <__kernel_rem_pio2+0x8b8>
  8020b4:	da008f17 	ldw	r8,572(sp)
  8020b8:	00c00044 	movi	r3,1
  8020bc:	40800044 	addi	r2,r8,1
  8020c0:	40d1883a 	add	r8,r8,r3
  8020c4:	da008f15 	stw	r8,572(sp)
  8020c8:	40beb30e 	bge	r8,r2,801b98 <__kernel_rem_pio2+0x508>
  8020cc:	401090fa 	slli	r8,r8,3
  8020d0:	da009415 	stw	r8,592(sp)
  8020d4:	003df006 	br	801898 <__kernel_rem_pio2+0x208>
  8020d8:	318d883a 	add	r6,r6,r6
  8020dc:	d985883a 	add	r2,sp,r6
  8020e0:	d9809117 	ldw	r6,580(sp)
  8020e4:	10807817 	ldw	r2,480(r2)
  8020e8:	dc808e15 	stw	r18,568(sp)
  8020ec:	31bffa04 	addi	r6,r6,-24
  8020f0:	dcc08d15 	stw	r19,564(sp)
  8020f4:	d9809115 	stw	r6,580(sp)
  8020f8:	1000ca1e 	bne	r2,zero,802424 <__kernel_rem_pio2+0xd94>
  8020fc:	28bfffc4 	addi	r2,r5,-1
  802100:	1085883a 	add	r2,r2,r2
  802104:	1085883a 	add	r2,r2,r2
  802108:	d9c07804 	addi	r7,sp,480
  80210c:	3885883a 	add	r2,r7,r2
  802110:	d9408f15 	stw	r5,572(sp)
  802114:	2807883a 	mov	r3,r5
  802118:	3009883a 	mov	r4,r6
  80211c:	10bfff04 	addi	r2,r2,-4
  802120:	11400117 	ldw	r5,4(r2)
  802124:	18ffffc4 	addi	r3,r3,-1
  802128:	213ffa04 	addi	r4,r4,-24
  80212c:	283ffb26 	beq	r5,zero,80211c <__kernel_rem_pio2+0xa8c>
  802130:	d8c08f15 	stw	r3,572(sp)
  802134:	d9009115 	stw	r4,580(sp)
  802138:	003f3506 	br	801e10 <__kernel_rem_pio2+0x780>
  80213c:	da008f17 	ldw	r8,572(sp)
  802140:	4000b516 	blt	r8,zero,802418 <__kernel_rem_pio2+0xd88>
  802144:	da008f17 	ldw	r8,572(sp)
  802148:	d8802804 	addi	r2,sp,160
  80214c:	dc402604 	addi	r17,sp,152
  802150:	402090fa 	slli	r16,r8,3
  802154:	0007883a 	mov	r3,zero
  802158:	1421883a 	add	r16,r2,r16
  80215c:	0005883a 	mov	r2,zero
  802160:	81800017 	ldw	r6,0(r16)
  802164:	81c00117 	ldw	r7,4(r16)
  802168:	1009883a 	mov	r4,r2
  80216c:	843ffe04 	addi	r16,r16,-8
  802170:	180b883a 	mov	r5,r3
  802174:	08034000 	call	803400 <__adddf3>
  802178:	847ff91e 	bne	r16,r17,802160 <__kernel_rem_pio2+0xad0>
  80217c:	da008d17 	ldw	r8,564(sp)
  802180:	40009026 	beq	r8,zero,8023c4 <__kernel_rem_pio2+0xd34>
  802184:	19a0003c 	xorhi	r6,r3,32768
  802188:	d9c09217 	ldw	r7,584(sp)
  80218c:	d9002817 	ldw	r4,160(sp)
  802190:	d9402917 	ldw	r5,164(sp)
  802194:	39800115 	stw	r6,4(r7)
  802198:	38800015 	stw	r2,0(r7)
  80219c:	100d883a 	mov	r6,r2
  8021a0:	180f883a 	mov	r7,r3
  8021a4:	08034540 	call	803454 <__subdf3>
  8021a8:	da008f17 	ldw	r8,572(sp)
  8021ac:	02000a0e 	bge	zero,r8,8021d8 <__kernel_rem_pio2+0xb48>
  8021b0:	402290fa 	slli	r17,r8,3
  8021b4:	dc002a04 	addi	r16,sp,168
  8021b8:	8463883a 	add	r17,r16,r17
  8021bc:	81800017 	ldw	r6,0(r16)
  8021c0:	81c00117 	ldw	r7,4(r16)
  8021c4:	1009883a 	mov	r4,r2
  8021c8:	84000204 	addi	r16,r16,8
  8021cc:	180b883a 	mov	r5,r3
  8021d0:	08034000 	call	803400 <__adddf3>
  8021d4:	847ff91e 	bne	r16,r17,8021bc <__kernel_rem_pio2+0xb2c>
  8021d8:	da008d17 	ldw	r8,564(sp)
  8021dc:	40000126 	beq	r8,zero,8021e4 <__kernel_rem_pio2+0xb54>
  8021e0:	18e0003c 	xorhi	r3,r3,32768
  8021e4:	d9409217 	ldw	r5,584(sp)
  8021e8:	28800215 	stw	r2,8(r5)
  8021ec:	28c00315 	stw	r3,12(r5)
  8021f0:	003f6f06 	br	801fb0 <__kernel_rem_pio2+0x920>
  8021f4:	da00a617 	ldw	r8,664(sp)
  8021f8:	008000c4 	movi	r2,3
  8021fc:	40bf6c1e 	bne	r8,r2,801fb0 <__kernel_rem_pio2+0x920>
  802200:	da008f17 	ldw	r8,572(sp)
  802204:	0200810e 	bge	zero,r8,80240c <__kernel_rem_pio2+0xd7c>
  802208:	da008f17 	ldw	r8,572(sp)
  80220c:	dd802804 	addi	r22,sp,160
  802210:	db402604 	addi	r13,sp,152
  802214:	443fffc4 	addi	r16,r8,-1
  802218:	402290fa 	slli	r17,r8,3
  80221c:	802090fa 	slli	r16,r16,3
  802220:	b463883a 	add	r17,r22,r17
  802224:	b421883a 	add	r16,r22,r16
  802228:	882b883a 	mov	r21,r17
  80222c:	8029883a 	mov	r20,r16
  802230:	8811883a 	mov	r8,r17
  802234:	8013883a 	mov	r9,r16
  802238:	a4400017 	ldw	r17,0(r20)
  80223c:	a4000117 	ldw	r16,4(r20)
  802240:	af000017 	ldw	fp,0(r21)
  802244:	adc00117 	ldw	r23,4(r21)
  802248:	8809883a 	mov	r4,r17
  80224c:	800b883a 	mov	r5,r16
  802250:	e00d883a 	mov	r6,fp
  802254:	b80f883a 	mov	r7,r23
  802258:	da009b15 	stw	r8,620(sp)
  80225c:	da409a15 	stw	r9,616(sp)
  802260:	db409915 	stw	r13,612(sp)
  802264:	08034000 	call	803400 <__adddf3>
  802268:	8809883a 	mov	r4,r17
  80226c:	800b883a 	mov	r5,r16
  802270:	100d883a 	mov	r6,r2
  802274:	180f883a 	mov	r7,r3
  802278:	1027883a 	mov	r19,r2
  80227c:	1825883a 	mov	r18,r3
  802280:	08034540 	call	803454 <__subdf3>
  802284:	e009883a 	mov	r4,fp
  802288:	b80b883a 	mov	r5,r23
  80228c:	100d883a 	mov	r6,r2
  802290:	180f883a 	mov	r7,r3
  802294:	08034000 	call	803400 <__adddf3>
  802298:	db409917 	ldw	r13,612(sp)
  80229c:	a8800015 	stw	r2,0(r21)
  8022a0:	a8c00115 	stw	r3,4(r21)
  8022a4:	a4c00015 	stw	r19,0(r20)
  8022a8:	a4800115 	stw	r18,4(r20)
  8022ac:	a53ffe04 	addi	r20,r20,-8
  8022b0:	ad7ffe04 	addi	r21,r21,-8
  8022b4:	da009b17 	ldw	r8,620(sp)
  8022b8:	da409a17 	ldw	r9,616(sp)
  8022bc:	a37fde1e 	bne	r20,r13,802238 <__kernel_rem_pio2+0xba8>
  8022c0:	4023883a 	mov	r17,r8
  8022c4:	da008f17 	ldw	r8,572(sp)
  8022c8:	00800044 	movi	r2,1
  8022cc:	4821883a 	mov	r16,r9
  8022d0:	12004e0e 	bge	r2,r8,80240c <__kernel_rem_pio2+0xd7c>
  8022d4:	8829883a 	mov	r20,r17
  8022d8:	8811883a 	mov	r8,r17
  8022dc:	84400017 	ldw	r17,0(r16)
  8022e0:	87000117 	ldw	fp,4(r16)
  8022e4:	a5c00017 	ldw	r23,0(r20)
  8022e8:	a5400117 	ldw	r21,4(r20)
  8022ec:	8809883a 	mov	r4,r17
  8022f0:	e00b883a 	mov	r5,fp
  8022f4:	b80d883a 	mov	r6,r23
  8022f8:	a80f883a 	mov	r7,r21
  8022fc:	da009b15 	stw	r8,620(sp)
  802300:	08034000 	call	803400 <__adddf3>
  802304:	8809883a 	mov	r4,r17
  802308:	e00b883a 	mov	r5,fp
  80230c:	100d883a 	mov	r6,r2
  802310:	180f883a 	mov	r7,r3
  802314:	1027883a 	mov	r19,r2
  802318:	1825883a 	mov	r18,r3
  80231c:	08034540 	call	803454 <__subdf3>
  802320:	b809883a 	mov	r4,r23
  802324:	a80b883a 	mov	r5,r21
  802328:	100d883a 	mov	r6,r2
  80232c:	180f883a 	mov	r7,r3
  802330:	08034000 	call	803400 <__adddf3>
  802334:	a0800015 	stw	r2,0(r20)
  802338:	a0c00115 	stw	r3,4(r20)
  80233c:	84c00015 	stw	r19,0(r16)
  802340:	84800115 	stw	r18,4(r16)
  802344:	843ffe04 	addi	r16,r16,-8
  802348:	a53ffe04 	addi	r20,r20,-8
  80234c:	da009b17 	ldw	r8,620(sp)
  802350:	b43fe21e 	bne	r22,r16,8022dc <__kernel_rem_pio2+0xc4c>
  802354:	4023883a 	mov	r17,r8
  802358:	b5800204 	addi	r22,r22,8
  80235c:	0005883a 	mov	r2,zero
  802360:	0007883a 	mov	r3,zero
  802364:	89800017 	ldw	r6,0(r17)
  802368:	89c00117 	ldw	r7,4(r17)
  80236c:	1009883a 	mov	r4,r2
  802370:	8c7ffe04 	addi	r17,r17,-8
  802374:	180b883a 	mov	r5,r3
  802378:	08034000 	call	803400 <__adddf3>
  80237c:	8dbff91e 	bne	r17,r22,802364 <__kernel_rem_pio2+0xcd4>
  802380:	da008d17 	ldw	r8,564(sp)
  802384:	40001d26 	beq	r8,zero,8023fc <__kernel_rem_pio2+0xd6c>
  802388:	d9802917 	ldw	r6,164(sp)
  80238c:	d9002b17 	ldw	r4,172(sp)
  802390:	d9402a17 	ldw	r5,168(sp)
  802394:	31a0003c 	xorhi	r6,r6,32768
  802398:	2120003c 	xorhi	r4,r4,32768
  80239c:	18e0003c 	xorhi	r3,r3,32768
  8023a0:	d9c02817 	ldw	r7,160(sp)
  8023a4:	da009217 	ldw	r8,584(sp)
  8023a8:	41c00015 	stw	r7,0(r8)
  8023ac:	41800115 	stw	r6,4(r8)
  8023b0:	41400215 	stw	r5,8(r8)
  8023b4:	41000315 	stw	r4,12(r8)
  8023b8:	40800415 	stw	r2,16(r8)
  8023bc:	40c00515 	stw	r3,20(r8)
  8023c0:	003efb06 	br	801fb0 <__kernel_rem_pio2+0x920>
  8023c4:	180d883a 	mov	r6,r3
  8023c8:	003f6f06 	br	802188 <__kernel_rem_pio2+0xaf8>
  8023cc:	d8009515 	stw	zero,596(sp)
  8023d0:	003ccd06 	br	801708 <__kernel_rem_pio2+0x78>
  8023d4:	da008f17 	ldw	r8,572(sp)
  8023d8:	8009883a 	mov	r4,r16
  8023dc:	880b883a 	mov	r5,r17
  8023e0:	4205883a 	add	r2,r8,r8
  8023e4:	1085883a 	add	r2,r2,r2
  8023e8:	d885883a 	add	r2,sp,r2
  8023ec:	14007804 	addi	r16,r2,480
  8023f0:	0803b440 	call	803b44 <__fixdfsi>
  8023f4:	80800015 	stw	r2,0(r16)
  8023f8:	003e8506 	br	801e10 <__kernel_rem_pio2+0x780>
  8023fc:	d9802917 	ldw	r6,164(sp)
  802400:	d9402a17 	ldw	r5,168(sp)
  802404:	d9002b17 	ldw	r4,172(sp)
  802408:	003fe506 	br	8023a0 <__kernel_rem_pio2+0xd10>
  80240c:	0005883a 	mov	r2,zero
  802410:	0007883a 	mov	r3,zero
  802414:	003fda06 	br	802380 <__kernel_rem_pio2+0xcf0>
  802418:	0005883a 	mov	r2,zero
  80241c:	0007883a 	mov	r3,zero
  802420:	003f5606 	br	80217c <__kernel_rem_pio2+0xaec>
  802424:	d9408f15 	stw	r5,572(sp)
  802428:	003e7906 	br	801e10 <__kernel_rem_pio2+0x780>
  80242c:	0005883a 	mov	r2,zero
  802430:	0007883a 	mov	r3,zero
  802434:	003ed806 	br	801f98 <__kernel_rem_pio2+0x908>
  802438:	802090fa 	slli	r16,r16,3
  80243c:	003d0106 	br	801844 <__kernel_rem_pio2+0x1b4>

00802440 <__kernel_sin>:
  802440:	defff404 	addi	sp,sp,-48
  802444:	00a00034 	movhi	r2,32768
  802448:	10bfffc4 	addi	r2,r2,-1
  80244c:	ddc00915 	stw	r23,36(sp)
  802450:	dd800815 	stw	r22,32(sp)
  802454:	dc400315 	stw	r17,12(sp)
  802458:	dc000215 	stw	r16,8(sp)
  80245c:	dfc00b15 	stw	ra,44(sp)
  802460:	df000a15 	stw	fp,40(sp)
  802464:	dd400715 	stw	r21,28(sp)
  802468:	dd000615 	stw	r20,24(sp)
  80246c:	dcc00515 	stw	r19,20(sp)
  802470:	dc800415 	stw	r18,16(sp)
  802474:	2884703a 	and	r2,r5,r2
  802478:	00cf9034 	movhi	r3,15936
  80247c:	18ffffc4 	addi	r3,r3,-1
  802480:	2821883a 	mov	r16,r5
  802484:	2023883a 	mov	r17,r4
  802488:	302f883a 	mov	r23,r6
  80248c:	382d883a 	mov	r22,r7
  802490:	18800216 	blt	r3,r2,80249c <__kernel_sin+0x5c>
  802494:	0803b440 	call	803b44 <__fixdfsi>
  802498:	10007726 	beq	r2,zero,802678 <__kernel_sin+0x238>
  80249c:	8809883a 	mov	r4,r17
  8024a0:	800b883a 	mov	r5,r16
  8024a4:	880d883a 	mov	r6,r17
  8024a8:	800f883a 	mov	r7,r16
  8024ac:	08034b40 	call	8034b4 <__muldf3>
  8024b0:	1009883a 	mov	r4,r2
  8024b4:	180b883a 	mov	r5,r3
  8024b8:	880d883a 	mov	r6,r17
  8024bc:	800f883a 	mov	r7,r16
  8024c0:	1027883a 	mov	r19,r2
  8024c4:	1825883a 	mov	r18,r3
  8024c8:	08034b40 	call	8034b4 <__muldf3>
  8024cc:	9809883a 	mov	r4,r19
  8024d0:	900b883a 	mov	r5,r18
  8024d4:	0196b434 	movhi	r6,23248
  8024d8:	31b55f04 	addi	r6,r6,-10884
  8024dc:	01cf79b4 	movhi	r7,15846
  8024e0:	39f64e84 	addi	r7,r7,-9926
  8024e4:	102b883a 	mov	r21,r2
  8024e8:	1829883a 	mov	r20,r3
  8024ec:	08034b40 	call	8034b4 <__muldf3>
  8024f0:	1009883a 	mov	r4,r2
  8024f4:	180b883a 	mov	r5,r3
  8024f8:	01a28b34 	movhi	r6,35372
  8024fc:	31a73ac4 	addi	r6,r6,-25365
  802500:	01cf96f4 	movhi	r7,15963
  802504:	39f97984 	addi	r7,r7,-6682
  802508:	08034540 	call	803454 <__subdf3>
  80250c:	1009883a 	mov	r4,r2
  802510:	180b883a 	mov	r5,r3
  802514:	980d883a 	mov	r6,r19
  802518:	900f883a 	mov	r7,r18
  80251c:	08034b40 	call	8034b4 <__muldf3>
  802520:	1009883a 	mov	r4,r2
  802524:	180b883a 	mov	r5,r3
  802528:	0195ecb4 	movhi	r6,22450
  80252c:	31bf9f44 	addi	r6,r6,-387
  802530:	01cfb1f4 	movhi	r7,16071
  802534:	39c778c4 	addi	r7,r7,7651
  802538:	08034000 	call	803400 <__adddf3>
  80253c:	1009883a 	mov	r4,r2
  802540:	180b883a 	mov	r5,r3
  802544:	980d883a 	mov	r6,r19
  802548:	900f883a 	mov	r7,r18
  80254c:	08034b40 	call	8034b4 <__muldf3>
  802550:	1009883a 	mov	r4,r2
  802554:	180b883a 	mov	r5,r3
  802558:	01867074 	movhi	r6,6593
  80255c:	31987544 	addi	r6,r6,25045
  802560:	01cfcab4 	movhi	r7,16170
  802564:	39c06804 	addi	r7,r7,416
  802568:	08034540 	call	803454 <__subdf3>
  80256c:	1009883a 	mov	r4,r2
  802570:	180b883a 	mov	r5,r3
  802574:	980d883a 	mov	r6,r19
  802578:	900f883a 	mov	r7,r18
  80257c:	08034b40 	call	8034b4 <__muldf3>
  802580:	1009883a 	mov	r4,r2
  802584:	180b883a 	mov	r5,r3
  802588:	01844474 	movhi	r6,4369
  80258c:	31be2984 	addi	r6,r6,-1882
  802590:	01cfe074 	movhi	r7,16257
  802594:	39c44444 	addi	r7,r7,4369
  802598:	08034000 	call	803400 <__adddf3>
  80259c:	d9000c17 	ldw	r4,48(sp)
  8025a0:	1839883a 	mov	fp,r3
  8025a4:	20004226 	beq	r4,zero,8026b0 <__kernel_sin+0x270>
  8025a8:	b809883a 	mov	r4,r23
  8025ac:	b00b883a 	mov	r5,r22
  8025b0:	000d883a 	mov	r6,zero
  8025b4:	01cff834 	movhi	r7,16352
  8025b8:	d8800015 	stw	r2,0(sp)
  8025bc:	08034b40 	call	8034b4 <__muldf3>
  8025c0:	da000017 	ldw	r8,0(sp)
  8025c4:	a809883a 	mov	r4,r21
  8025c8:	a00b883a 	mov	r5,r20
  8025cc:	400d883a 	mov	r6,r8
  8025d0:	e00f883a 	mov	r7,fp
  8025d4:	d8c00115 	stw	r3,4(sp)
  8025d8:	d8800015 	stw	r2,0(sp)
  8025dc:	08034b40 	call	8034b4 <__muldf3>
  8025e0:	da800017 	ldw	r10,0(sp)
  8025e4:	da400117 	ldw	r9,4(sp)
  8025e8:	100d883a 	mov	r6,r2
  8025ec:	5009883a 	mov	r4,r10
  8025f0:	480b883a 	mov	r5,r9
  8025f4:	180f883a 	mov	r7,r3
  8025f8:	08034540 	call	803454 <__subdf3>
  8025fc:	980d883a 	mov	r6,r19
  802600:	900f883a 	mov	r7,r18
  802604:	1009883a 	mov	r4,r2
  802608:	180b883a 	mov	r5,r3
  80260c:	08034b40 	call	8034b4 <__muldf3>
  802610:	1009883a 	mov	r4,r2
  802614:	180b883a 	mov	r5,r3
  802618:	b80d883a 	mov	r6,r23
  80261c:	b00f883a 	mov	r7,r22
  802620:	08034540 	call	803454 <__subdf3>
  802624:	a809883a 	mov	r4,r21
  802628:	a00b883a 	mov	r5,r20
  80262c:	01955574 	movhi	r6,21845
  802630:	31955244 	addi	r6,r6,21833
  802634:	01cff174 	movhi	r7,16325
  802638:	39d55544 	addi	r7,r7,21845
  80263c:	1027883a 	mov	r19,r2
  802640:	1825883a 	mov	r18,r3
  802644:	08034b40 	call	8034b4 <__muldf3>
  802648:	9809883a 	mov	r4,r19
  80264c:	900b883a 	mov	r5,r18
  802650:	100d883a 	mov	r6,r2
  802654:	180f883a 	mov	r7,r3
  802658:	08034000 	call	803400 <__adddf3>
  80265c:	8809883a 	mov	r4,r17
  802660:	800b883a 	mov	r5,r16
  802664:	100d883a 	mov	r6,r2
  802668:	180f883a 	mov	r7,r3
  80266c:	08034540 	call	803454 <__subdf3>
  802670:	1023883a 	mov	r17,r2
  802674:	1821883a 	mov	r16,r3
  802678:	8805883a 	mov	r2,r17
  80267c:	8007883a 	mov	r3,r16
  802680:	dfc00b17 	ldw	ra,44(sp)
  802684:	df000a17 	ldw	fp,40(sp)
  802688:	ddc00917 	ldw	r23,36(sp)
  80268c:	dd800817 	ldw	r22,32(sp)
  802690:	dd400717 	ldw	r21,28(sp)
  802694:	dd000617 	ldw	r20,24(sp)
  802698:	dcc00517 	ldw	r19,20(sp)
  80269c:	dc800417 	ldw	r18,16(sp)
  8026a0:	dc400317 	ldw	r17,12(sp)
  8026a4:	dc000217 	ldw	r16,8(sp)
  8026a8:	dec00c04 	addi	sp,sp,48
  8026ac:	f800283a 	ret
  8026b0:	100d883a 	mov	r6,r2
  8026b4:	180f883a 	mov	r7,r3
  8026b8:	9809883a 	mov	r4,r19
  8026bc:	900b883a 	mov	r5,r18
  8026c0:	08034b40 	call	8034b4 <__muldf3>
  8026c4:	1009883a 	mov	r4,r2
  8026c8:	180b883a 	mov	r5,r3
  8026cc:	01955574 	movhi	r6,21845
  8026d0:	31955244 	addi	r6,r6,21833
  8026d4:	01cff174 	movhi	r7,16325
  8026d8:	39d55544 	addi	r7,r7,21845
  8026dc:	08034540 	call	803454 <__subdf3>
  8026e0:	1009883a 	mov	r4,r2
  8026e4:	180b883a 	mov	r5,r3
  8026e8:	a80d883a 	mov	r6,r21
  8026ec:	a00f883a 	mov	r7,r20
  8026f0:	08034b40 	call	8034b4 <__muldf3>
  8026f4:	8809883a 	mov	r4,r17
  8026f8:	800b883a 	mov	r5,r16
  8026fc:	100d883a 	mov	r6,r2
  802700:	180f883a 	mov	r7,r3
  802704:	08034000 	call	803400 <__adddf3>
  802708:	1023883a 	mov	r17,r2
  80270c:	1821883a 	mov	r16,r3
  802710:	003fd906 	br	802678 <__kernel_sin+0x238>

00802714 <fabs>:
  802714:	00e00034 	movhi	r3,32768
  802718:	18ffffc4 	addi	r3,r3,-1
  80271c:	2005883a 	mov	r2,r4
  802720:	28c6703a 	and	r3,r5,r3
  802724:	f800283a 	ret

00802728 <floor>:
  802728:	defff904 	addi	sp,sp,-28
  80272c:	dcc00315 	stw	r19,12(sp)
  802730:	2827d53a 	srai	r19,r5,20
  802734:	dd000415 	stw	r20,16(sp)
  802738:	dc800215 	stw	r18,8(sp)
  80273c:	9cc1ffcc 	andi	r19,r19,2047
  802740:	dc400115 	stw	r17,4(sp)
  802744:	dc000015 	stw	r16,0(sp)
  802748:	dfc00615 	stw	ra,24(sp)
  80274c:	dd400515 	stw	r21,20(sp)
  802750:	9c7f0044 	addi	r17,r19,-1023
  802754:	018004c4 	movi	r6,19
  802758:	2821883a 	mov	r16,r5
  80275c:	2005883a 	mov	r2,r4
  802760:	2807883a 	mov	r3,r5
  802764:	2829883a 	mov	r20,r5
  802768:	2025883a 	mov	r18,r4
  80276c:	34402116 	blt	r6,r17,8027f4 <floor+0xcc>
  802770:	88003f16 	blt	r17,zero,802870 <floor+0x148>
  802774:	04c00434 	movhi	r19,16
  802778:	9cffffc4 	addi	r19,r19,-1
  80277c:	9c67d83a 	sra	r19,r19,r17
  802780:	994c703a 	and	r6,r19,r5
  802784:	310cb03a 	or	r6,r6,r4
  802788:	30001126 	beq	r6,zero,8027d0 <floor+0xa8>
  80278c:	01a20034 	movhi	r6,34816
  802790:	319d6704 	addi	r6,r6,30108
  802794:	01df8e34 	movhi	r7,32312
  802798:	39f90f04 	addi	r7,r7,-7108
  80279c:	08034000 	call	803400 <__adddf3>
  8027a0:	1009883a 	mov	r4,r2
  8027a4:	180b883a 	mov	r5,r3
  8027a8:	000d883a 	mov	r6,zero
  8027ac:	000f883a 	mov	r7,zero
  8027b0:	08039a80 	call	8039a8 <__gtdf2>
  8027b4:	0080040e 	bge	zero,r2,8027c8 <floor+0xa0>
  8027b8:	80003c16 	blt	r16,zero,8028ac <floor+0x184>
  8027bc:	04e0303a 	nor	r16,zero,r19
  8027c0:	a420703a 	and	r16,r20,r16
  8027c4:	0025883a 	mov	r18,zero
  8027c8:	9005883a 	mov	r2,r18
  8027cc:	8007883a 	mov	r3,r16
  8027d0:	dfc00617 	ldw	ra,24(sp)
  8027d4:	dd400517 	ldw	r21,20(sp)
  8027d8:	dd000417 	ldw	r20,16(sp)
  8027dc:	dcc00317 	ldw	r19,12(sp)
  8027e0:	dc800217 	ldw	r18,8(sp)
  8027e4:	dc400117 	ldw	r17,4(sp)
  8027e8:	dc000017 	ldw	r16,0(sp)
  8027ec:	dec00704 	addi	sp,sp,28
  8027f0:	f800283a 	ret
  8027f4:	01800cc4 	movi	r6,51
  8027f8:	3440060e 	bge	r6,r17,802814 <floor+0xec>
  8027fc:	01810004 	movi	r6,1024
  802800:	89bff31e 	bne	r17,r6,8027d0 <floor+0xa8>
  802804:	200d883a 	mov	r6,r4
  802808:	280f883a 	mov	r7,r5
  80280c:	08034000 	call	803400 <__adddf3>
  802810:	003fef06 	br	8027d0 <floor+0xa8>
  802814:	01bfffc4 	movi	r6,-1
  802818:	9d7efb44 	addi	r21,r19,-1043
  80281c:	356ad83a 	srl	r21,r6,r21
  802820:	a90c703a 	and	r6,r21,r4
  802824:	303fea26 	beq	r6,zero,8027d0 <floor+0xa8>
  802828:	01a20034 	movhi	r6,34816
  80282c:	319d6704 	addi	r6,r6,30108
  802830:	01df8e34 	movhi	r7,32312
  802834:	39f90f04 	addi	r7,r7,-7108
  802838:	08034000 	call	803400 <__adddf3>
  80283c:	1009883a 	mov	r4,r2
  802840:	180b883a 	mov	r5,r3
  802844:	000d883a 	mov	r6,zero
  802848:	000f883a 	mov	r7,zero
  80284c:	08039a80 	call	8039a8 <__gtdf2>
  802850:	00bfdd0e 	bge	zero,r2,8027c8 <floor+0xa0>
  802854:	80001916 	blt	r16,zero,8028bc <floor+0x194>
  802858:	056a303a 	nor	r21,zero,r21
  80285c:	9564703a 	and	r18,r18,r21
  802860:	a021883a 	mov	r16,r20
  802864:	9005883a 	mov	r2,r18
  802868:	8007883a 	mov	r3,r16
  80286c:	003fd806 	br	8027d0 <floor+0xa8>
  802870:	01a20034 	movhi	r6,34816
  802874:	319d6704 	addi	r6,r6,30108
  802878:	01df8e34 	movhi	r7,32312
  80287c:	39f90f04 	addi	r7,r7,-7108
  802880:	08034000 	call	803400 <__adddf3>
  802884:	1009883a 	mov	r4,r2
  802888:	180b883a 	mov	r5,r3
  80288c:	000d883a 	mov	r6,zero
  802890:	000f883a 	mov	r7,zero
  802894:	08039a80 	call	8039a8 <__gtdf2>
  802898:	00bfcb0e 	bge	zero,r2,8027c8 <floor+0xa0>
  80289c:	80001216 	blt	r16,zero,8028e8 <floor+0x1c0>
  8028a0:	0025883a 	mov	r18,zero
  8028a4:	0021883a 	mov	r16,zero
  8028a8:	003fc706 	br	8027c8 <floor+0xa0>
  8028ac:	00800434 	movhi	r2,16
  8028b0:	1463d83a 	sra	r17,r2,r17
  8028b4:	8469883a 	add	r20,r16,r17
  8028b8:	003fc006 	br	8027bc <floor+0x94>
  8028bc:	00800504 	movi	r2,20
  8028c0:	88801326 	beq	r17,r2,802910 <floor+0x1e8>
  8028c4:	00810cc4 	movi	r2,1075
  8028c8:	14e7c83a 	sub	r19,r2,r19
  8028cc:	00800044 	movi	r2,1
  8028d0:	14c4983a 	sll	r2,r2,r19
  8028d4:	1485883a 	add	r2,r2,r18
  8028d8:	14800b2e 	bgeu	r2,r18,802908 <floor+0x1e0>
  8028dc:	85000044 	addi	r20,r16,1
  8028e0:	1025883a 	mov	r18,r2
  8028e4:	003fdc06 	br	802858 <floor+0x130>
  8028e8:	00a00034 	movhi	r2,32768
  8028ec:	10bfffc4 	addi	r2,r2,-1
  8028f0:	8084703a 	and	r2,r16,r2
  8028f4:	1484b03a 	or	r2,r2,r18
  8028f8:	103fb326 	beq	r2,zero,8027c8 <floor+0xa0>
  8028fc:	0025883a 	mov	r18,zero
  802900:	042ffc34 	movhi	r16,49136
  802904:	003fb006 	br	8027c8 <floor+0xa0>
  802908:	1025883a 	mov	r18,r2
  80290c:	003fd206 	br	802858 <floor+0x130>
  802910:	85000044 	addi	r20,r16,1
  802914:	003fd006 	br	802858 <floor+0x130>

00802918 <scalbn>:
  802918:	29dffc2c 	andhi	r7,r5,32752
  80291c:	380fd53a 	srai	r7,r7,20
  802920:	defffe04 	addi	sp,sp,-8
  802924:	dc000015 	stw	r16,0(sp)
  802928:	dfc00115 	stw	ra,4(sp)
  80292c:	2807883a 	mov	r3,r5
  802930:	2005883a 	mov	r2,r4
  802934:	3021883a 	mov	r16,r6
  802938:	3800241e 	bne	r7,zero,8029cc <scalbn+0xb4>
  80293c:	01a00034 	movhi	r6,32768
  802940:	31bfffc4 	addi	r6,r6,-1
  802944:	298c703a 	and	r6,r5,r6
  802948:	310cb03a 	or	r6,r6,r4
  80294c:	30001b26 	beq	r6,zero,8029bc <scalbn+0xa4>
  802950:	000d883a 	mov	r6,zero
  802954:	01d0d434 	movhi	r7,17232
  802958:	08034b40 	call	8034b4 <__muldf3>
  80295c:	013ffff4 	movhi	r4,65535
  802960:	210f2c04 	addi	r4,r4,15536
  802964:	81003416 	blt	r16,r4,802a38 <scalbn+0x120>
  802968:	19dffc2c 	andhi	r7,r3,32752
  80296c:	380fd53a 	srai	r7,r7,20
  802970:	0101ff84 	movi	r4,2046
  802974:	180d883a 	mov	r6,r3
  802978:	39fff284 	addi	r7,r7,-54
  80297c:	3c0f883a 	add	r7,r7,r16
  802980:	21c0180e 	bge	r4,r7,8029e4 <scalbn+0xcc>
  802984:	100d883a 	mov	r6,r2
  802988:	180f883a 	mov	r7,r3
  80298c:	01220034 	movhi	r4,34816
  802990:	211d6704 	addi	r4,r4,30108
  802994:	015f8e34 	movhi	r5,32312
  802998:	29790f04 	addi	r5,r5,-7108
  80299c:	0802aac0 	call	802aac <copysign>
  8029a0:	1009883a 	mov	r4,r2
  8029a4:	180b883a 	mov	r5,r3
  8029a8:	01a20034 	movhi	r6,34816
  8029ac:	319d6704 	addi	r6,r6,30108
  8029b0:	01df8e34 	movhi	r7,32312
  8029b4:	39f90f04 	addi	r7,r7,-7108
  8029b8:	08034b40 	call	8034b4 <__muldf3>
  8029bc:	dfc00117 	ldw	ra,4(sp)
  8029c0:	dc000017 	ldw	r16,0(sp)
  8029c4:	dec00204 	addi	sp,sp,8
  8029c8:	f800283a 	ret
  8029cc:	0181ffc4 	movi	r6,2047
  8029d0:	39802426 	beq	r7,r6,802a64 <scalbn+0x14c>
  8029d4:	3c0f883a 	add	r7,r7,r16
  8029d8:	0101ff84 	movi	r4,2046
  8029dc:	280d883a 	mov	r6,r5
  8029e0:	21ffe816 	blt	r4,r7,802984 <scalbn+0x6c>
  8029e4:	01c0090e 	bge	zero,r7,802a0c <scalbn+0xf4>
  8029e8:	380e953a 	slli	r7,r7,20
  8029ec:	00e00434 	movhi	r3,32784
  8029f0:	18ffffc4 	addi	r3,r3,-1
  8029f4:	30cc703a 	and	r6,r6,r3
  8029f8:	3986b03a 	or	r3,r7,r6
  8029fc:	dfc00117 	ldw	ra,4(sp)
  802a00:	dc000017 	ldw	r16,0(sp)
  802a04:	dec00204 	addi	sp,sp,8
  802a08:	f800283a 	ret
  802a0c:	013ff2c4 	movi	r4,-53
  802a10:	39001b0e 	bge	r7,r4,802a80 <scalbn+0x168>
  802a14:	0130d414 	movui	r4,50000
  802a18:	100d883a 	mov	r6,r2
  802a1c:	180f883a 	mov	r7,r3
  802a20:	243fda16 	blt	r4,r16,80298c <scalbn+0x74>
  802a24:	0130be74 	movhi	r4,49913
  802a28:	213cd644 	addi	r4,r4,-3239
  802a2c:	01406974 	movhi	r5,421
  802a30:	295b87c4 	addi	r5,r5,28191
  802a34:	0802aac0 	call	802aac <copysign>
  802a38:	1009883a 	mov	r4,r2
  802a3c:	180b883a 	mov	r5,r3
  802a40:	01b0be74 	movhi	r6,49913
  802a44:	31bcd644 	addi	r6,r6,-3239
  802a48:	01c06974 	movhi	r7,421
  802a4c:	39db87c4 	addi	r7,r7,28191
  802a50:	08034b40 	call	8034b4 <__muldf3>
  802a54:	dfc00117 	ldw	ra,4(sp)
  802a58:	dc000017 	ldw	r16,0(sp)
  802a5c:	dec00204 	addi	sp,sp,8
  802a60:	f800283a 	ret
  802a64:	200d883a 	mov	r6,r4
  802a68:	280f883a 	mov	r7,r5
  802a6c:	08034000 	call	803400 <__adddf3>
  802a70:	dfc00117 	ldw	ra,4(sp)
  802a74:	dc000017 	ldw	r16,0(sp)
  802a78:	dec00204 	addi	sp,sp,8
  802a7c:	f800283a 	ret
  802a80:	39c00d84 	addi	r7,r7,54
  802a84:	380a953a 	slli	r5,r7,20
  802a88:	00e00434 	movhi	r3,32784
  802a8c:	18ffffc4 	addi	r3,r3,-1
  802a90:	30cc703a 	and	r6,r6,r3
  802a94:	298ab03a 	or	r5,r5,r6
  802a98:	1009883a 	mov	r4,r2
  802a9c:	000d883a 	mov	r6,zero
  802aa0:	01cf2434 	movhi	r7,15504
  802aa4:	08034b40 	call	8034b4 <__muldf3>
  802aa8:	003fc406 	br	8029bc <scalbn+0xa4>

00802aac <copysign>:
  802aac:	00e00034 	movhi	r3,32768
  802ab0:	18ffffc4 	addi	r3,r3,-1
  802ab4:	39e0002c 	andhi	r7,r7,32768
  802ab8:	28c6703a 	and	r3,r5,r3
  802abc:	2005883a 	mov	r2,r4
  802ac0:	38c6b03a 	or	r3,r7,r3
  802ac4:	f800283a 	ret

00802ac8 <_fpadd_parts>:
  802ac8:	2005883a 	mov	r2,r4
  802acc:	21000017 	ldw	r4,0(r4)
  802ad0:	01c00044 	movi	r7,1
  802ad4:	3900332e 	bgeu	r7,r4,802ba4 <_fpadd_parts+0xdc>
  802ad8:	28c00017 	ldw	r3,0(r5)
  802adc:	38c0642e 	bgeu	r7,r3,802c70 <_fpadd_parts+0x1a8>
  802ae0:	01c00104 	movi	r7,4
  802ae4:	21c06e26 	beq	r4,r7,802ca0 <_fpadd_parts+0x1d8>
  802ae8:	19c06126 	beq	r3,r7,802c70 <_fpadd_parts+0x1a8>
  802aec:	01c00084 	movi	r7,2
  802af0:	19c04226 	beq	r3,r7,802bfc <_fpadd_parts+0x134>
  802af4:	21c05e26 	beq	r4,r7,802c70 <_fpadd_parts+0x1a8>
  802af8:	11000217 	ldw	r4,8(r2)
  802afc:	2a400217 	ldw	r9,8(r5)
  802b00:	12800317 	ldw	r10,12(r2)
  802b04:	29c00317 	ldw	r7,12(r5)
  802b08:	2247c83a 	sub	r3,r4,r9
  802b0c:	1811883a 	mov	r8,r3
  802b10:	18005316 	blt	r3,zero,802c60 <_fpadd_parts+0x198>
  802b14:	02c007c4 	movi	r11,31
  802b18:	5a002316 	blt	r11,r8,802ba8 <_fpadd_parts+0xe0>
  802b1c:	00c0560e 	bge	zero,r3,802c78 <_fpadd_parts+0x1b0>
  802b20:	00c00044 	movi	r3,1
  802b24:	1a06983a 	sll	r3,r3,r8
  802b28:	3a10d83a 	srl	r8,r7,r8
  802b2c:	18ffffc4 	addi	r3,r3,-1
  802b30:	19ce703a 	and	r7,r3,r7
  802b34:	380ec03a 	cmpne	r7,r7,zero
  802b38:	3a0eb03a 	or	r7,r7,r8
  802b3c:	10c00117 	ldw	r3,4(r2)
  802b40:	28800117 	ldw	r2,4(r5)
  802b44:	18801d26 	beq	r3,r2,802bbc <_fpadd_parts+0xf4>
  802b48:	18003a26 	beq	r3,zero,802c34 <_fpadd_parts+0x16c>
  802b4c:	3a85c83a 	sub	r2,r7,r10
  802b50:	10003a16 	blt	r2,zero,802c3c <_fpadd_parts+0x174>
  802b54:	30000115 	stw	zero,4(r6)
  802b58:	31000215 	stw	r4,8(r6)
  802b5c:	30800315 	stw	r2,12(r6)
  802b60:	10ffffc4 	addi	r3,r2,-1
  802b64:	01d00034 	movhi	r7,16384
  802b68:	39ffff84 	addi	r7,r7,-2
  802b6c:	38c00936 	bltu	r7,r3,802b94 <_fpadd_parts+0xcc>
  802b70:	30c00217 	ldw	r3,8(r6)
  802b74:	18ffffc4 	addi	r3,r3,-1
  802b78:	1085883a 	add	r2,r2,r2
  802b7c:	113fffc4 	addi	r4,r2,-1
  802b80:	180b883a 	mov	r5,r3
  802b84:	18ffffc4 	addi	r3,r3,-1
  802b88:	393ffb2e 	bgeu	r7,r4,802b78 <_fpadd_parts+0xb0>
  802b8c:	30800315 	stw	r2,12(r6)
  802b90:	31400215 	stw	r5,8(r6)
  802b94:	00c000c4 	movi	r3,3
  802b98:	30c00015 	stw	r3,0(r6)
  802b9c:	10000e16 	blt	r2,zero,802bd8 <_fpadd_parts+0x110>
  802ba0:	3005883a 	mov	r2,r6
  802ba4:	f800283a 	ret
  802ba8:	49002a0e 	bge	r9,r4,802c54 <_fpadd_parts+0x18c>
  802bac:	10c00117 	ldw	r3,4(r2)
  802bb0:	28800117 	ldw	r2,4(r5)
  802bb4:	000f883a 	mov	r7,zero
  802bb8:	18bfe31e 	bne	r3,r2,802b48 <_fpadd_parts+0x80>
  802bbc:	3a85883a 	add	r2,r7,r10
  802bc0:	30c00115 	stw	r3,4(r6)
  802bc4:	00c000c4 	movi	r3,3
  802bc8:	31000215 	stw	r4,8(r6)
  802bcc:	30800315 	stw	r2,12(r6)
  802bd0:	30c00015 	stw	r3,0(r6)
  802bd4:	103ff20e 	bge	r2,zero,802ba0 <_fpadd_parts+0xd8>
  802bd8:	30c00217 	ldw	r3,8(r6)
  802bdc:	1008d07a 	srli	r4,r2,1
  802be0:	1080004c 	andi	r2,r2,1
  802be4:	18c00044 	addi	r3,r3,1
  802be8:	1104b03a 	or	r2,r2,r4
  802bec:	30800315 	stw	r2,12(r6)
  802bf0:	30c00215 	stw	r3,8(r6)
  802bf4:	3005883a 	mov	r2,r6
  802bf8:	f800283a 	ret
  802bfc:	20ffe91e 	bne	r4,r3,802ba4 <_fpadd_parts+0xdc>
  802c00:	31000015 	stw	r4,0(r6)
  802c04:	10c00117 	ldw	r3,4(r2)
  802c08:	30c00115 	stw	r3,4(r6)
  802c0c:	11c00217 	ldw	r7,8(r2)
  802c10:	10c00117 	ldw	r3,4(r2)
  802c14:	29000117 	ldw	r4,4(r5)
  802c18:	31c00215 	stw	r7,8(r6)
  802c1c:	10800317 	ldw	r2,12(r2)
  802c20:	20c6703a 	and	r3,r4,r3
  802c24:	30c00115 	stw	r3,4(r6)
  802c28:	30800315 	stw	r2,12(r6)
  802c2c:	3005883a 	mov	r2,r6
  802c30:	f800283a 	ret
  802c34:	51c5c83a 	sub	r2,r10,r7
  802c38:	103fc60e 	bge	r2,zero,802b54 <_fpadd_parts+0x8c>
  802c3c:	0085c83a 	sub	r2,zero,r2
  802c40:	00c00044 	movi	r3,1
  802c44:	30c00115 	stw	r3,4(r6)
  802c48:	31000215 	stw	r4,8(r6)
  802c4c:	30800315 	stw	r2,12(r6)
  802c50:	003fc306 	br	802b60 <_fpadd_parts+0x98>
  802c54:	4809883a 	mov	r4,r9
  802c58:	0015883a 	mov	r10,zero
  802c5c:	003fb706 	br	802b3c <_fpadd_parts+0x74>
  802c60:	00d1c83a 	sub	r8,zero,r3
  802c64:	02c007c4 	movi	r11,31
  802c68:	5a3fcf16 	blt	r11,r8,802ba8 <_fpadd_parts+0xe0>
  802c6c:	003fab06 	br	802b1c <_fpadd_parts+0x54>
  802c70:	2805883a 	mov	r2,r5
  802c74:	f800283a 	ret
  802c78:	183fb026 	beq	r3,zero,802b3c <_fpadd_parts+0x74>
  802c7c:	02400044 	movi	r9,1
  802c80:	4a12983a 	sll	r9,r9,r8
  802c84:	5206d83a 	srl	r3,r10,r8
  802c88:	2209883a 	add	r4,r4,r8
  802c8c:	4a3fffc4 	addi	r8,r9,-1
  802c90:	4294703a 	and	r10,r8,r10
  802c94:	5014c03a 	cmpne	r10,r10,zero
  802c98:	50d4b03a 	or	r10,r10,r3
  802c9c:	003fa706 	br	802b3c <_fpadd_parts+0x74>
  802ca0:	193fc01e 	bne	r3,r4,802ba4 <_fpadd_parts+0xdc>
  802ca4:	11000117 	ldw	r4,4(r2)
  802ca8:	28c00117 	ldw	r3,4(r5)
  802cac:	20ffbd26 	beq	r4,r3,802ba4 <_fpadd_parts+0xdc>
  802cb0:	00802034 	movhi	r2,128
  802cb4:	109adf04 	addi	r2,r2,27516
  802cb8:	f800283a 	ret

00802cbc <__addsf3>:
  802cbc:	defff104 	addi	sp,sp,-60
  802cc0:	d9000d15 	stw	r4,52(sp)
  802cc4:	d9400c15 	stw	r5,48(sp)
  802cc8:	d9000d04 	addi	r4,sp,52
  802ccc:	d9400804 	addi	r5,sp,32
  802cd0:	dfc00e15 	stw	ra,56(sp)
  802cd4:	08040f00 	call	8040f0 <__unpack_f>
  802cd8:	d9000c04 	addi	r4,sp,48
  802cdc:	d9400404 	addi	r5,sp,16
  802ce0:	08040f00 	call	8040f0 <__unpack_f>
  802ce4:	d9000804 	addi	r4,sp,32
  802ce8:	d9400404 	addi	r5,sp,16
  802cec:	d80d883a 	mov	r6,sp
  802cf0:	0802ac80 	call	802ac8 <_fpadd_parts>
  802cf4:	1009883a 	mov	r4,r2
  802cf8:	0803fc40 	call	803fc4 <__pack_f>
  802cfc:	dfc00e17 	ldw	ra,56(sp)
  802d00:	dec00f04 	addi	sp,sp,60
  802d04:	f800283a 	ret

00802d08 <__subsf3>:
  802d08:	defff104 	addi	sp,sp,-60
  802d0c:	d9000d15 	stw	r4,52(sp)
  802d10:	d9400c15 	stw	r5,48(sp)
  802d14:	d9000d04 	addi	r4,sp,52
  802d18:	d9400804 	addi	r5,sp,32
  802d1c:	dfc00e15 	stw	ra,56(sp)
  802d20:	08040f00 	call	8040f0 <__unpack_f>
  802d24:	d9000c04 	addi	r4,sp,48
  802d28:	d9400404 	addi	r5,sp,16
  802d2c:	08040f00 	call	8040f0 <__unpack_f>
  802d30:	d8800517 	ldw	r2,20(sp)
  802d34:	d9000804 	addi	r4,sp,32
  802d38:	d9400404 	addi	r5,sp,16
  802d3c:	d80d883a 	mov	r6,sp
  802d40:	1080005c 	xori	r2,r2,1
  802d44:	d8800515 	stw	r2,20(sp)
  802d48:	0802ac80 	call	802ac8 <_fpadd_parts>
  802d4c:	1009883a 	mov	r4,r2
  802d50:	0803fc40 	call	803fc4 <__pack_f>
  802d54:	dfc00e17 	ldw	ra,56(sp)
  802d58:	dec00f04 	addi	sp,sp,60
  802d5c:	f800283a 	ret

00802d60 <__mulsf3>:
  802d60:	defff104 	addi	sp,sp,-60
  802d64:	d9000d15 	stw	r4,52(sp)
  802d68:	d9400c15 	stw	r5,48(sp)
  802d6c:	d9000d04 	addi	r4,sp,52
  802d70:	d9400804 	addi	r5,sp,32
  802d74:	dfc00e15 	stw	ra,56(sp)
  802d78:	08040f00 	call	8040f0 <__unpack_f>
  802d7c:	d9000c04 	addi	r4,sp,48
  802d80:	d9400404 	addi	r5,sp,16
  802d84:	08040f00 	call	8040f0 <__unpack_f>
  802d88:	d8c00817 	ldw	r3,32(sp)
  802d8c:	00800044 	movi	r2,1
  802d90:	10c00936 	bltu	r2,r3,802db8 <__mulsf3+0x58>
  802d94:	d8c00917 	ldw	r3,36(sp)
  802d98:	d8800517 	ldw	r2,20(sp)
  802d9c:	d9000804 	addi	r4,sp,32
  802da0:	1884c03a 	cmpne	r2,r3,r2
  802da4:	d8800915 	stw	r2,36(sp)
  802da8:	0803fc40 	call	803fc4 <__pack_f>
  802dac:	dfc00e17 	ldw	ra,56(sp)
  802db0:	dec00f04 	addi	sp,sp,60
  802db4:	f800283a 	ret
  802db8:	d9000417 	ldw	r4,16(sp)
  802dbc:	11000936 	bltu	r2,r4,802de4 <__mulsf3+0x84>
  802dc0:	d8800517 	ldw	r2,20(sp)
  802dc4:	d8c00917 	ldw	r3,36(sp)
  802dc8:	d9000404 	addi	r4,sp,16
  802dcc:	1884c03a 	cmpne	r2,r3,r2
  802dd0:	d8800515 	stw	r2,20(sp)
  802dd4:	0803fc40 	call	803fc4 <__pack_f>
  802dd8:	dfc00e17 	ldw	ra,56(sp)
  802ddc:	dec00f04 	addi	sp,sp,60
  802de0:	f800283a 	ret
  802de4:	00800104 	movi	r2,4
  802de8:	1880051e 	bne	r3,r2,802e00 <__mulsf3+0xa0>
  802dec:	00800084 	movi	r2,2
  802df0:	20bfe81e 	bne	r4,r2,802d94 <__mulsf3+0x34>
  802df4:	01002034 	movhi	r4,128
  802df8:	211adf04 	addi	r4,r4,27516
  802dfc:	003fea06 	br	802da8 <__mulsf3+0x48>
  802e00:	2080031e 	bne	r4,r2,802e10 <__mulsf3+0xb0>
  802e04:	00800084 	movi	r2,2
  802e08:	18bffa26 	beq	r3,r2,802df4 <__mulsf3+0x94>
  802e0c:	003fec06 	br	802dc0 <__mulsf3+0x60>
  802e10:	00800084 	movi	r2,2
  802e14:	18bfdf26 	beq	r3,r2,802d94 <__mulsf3+0x34>
  802e18:	20bfe926 	beq	r4,r2,802dc0 <__mulsf3+0x60>
  802e1c:	d9000717 	ldw	r4,28(sp)
  802e20:	d9800b17 	ldw	r6,44(sp)
  802e24:	000b883a 	mov	r5,zero
  802e28:	000f883a 	mov	r7,zero
  802e2c:	0803e080 	call	803e08 <__muldi3>
  802e30:	d9000617 	ldw	r4,24(sp)
  802e34:	d9400a17 	ldw	r5,40(sp)
  802e38:	d9c00917 	ldw	r7,36(sp)
  802e3c:	290b883a 	add	r5,r5,r4
  802e40:	d9000517 	ldw	r4,20(sp)
  802e44:	29800084 	addi	r6,r5,2
  802e48:	d9800215 	stw	r6,8(sp)
  802e4c:	3908c03a 	cmpne	r4,r7,r4
  802e50:	d9000115 	stw	r4,4(sp)
  802e54:	1809883a 	mov	r4,r3
  802e58:	1800070e 	bge	r3,zero,802e78 <__mulsf3+0x118>
  802e5c:	1900004c 	andi	r4,r3,1
  802e60:	294000c4 	addi	r5,r5,3
  802e64:	20000226 	beq	r4,zero,802e70 <__mulsf3+0x110>
  802e68:	1004d07a 	srli	r2,r2,1
  802e6c:	10a00034 	orhi	r2,r2,32768
  802e70:	1808d07a 	srli	r4,r3,1
  802e74:	d9400215 	stw	r5,8(sp)
  802e78:	01900034 	movhi	r6,16384
  802e7c:	31bfffc4 	addi	r6,r6,-1
  802e80:	31000c36 	bltu	r6,r4,802eb4 <__mulsf3+0x154>
  802e84:	d8c00217 	ldw	r3,8(sp)
  802e88:	18ffffc4 	addi	r3,r3,-1
  802e8c:	00000306 	br	802e9c <__mulsf3+0x13c>
  802e90:	1085883a 	add	r2,r2,r2
  802e94:	18ffffc4 	addi	r3,r3,-1
  802e98:	31000536 	bltu	r6,r4,802eb0 <__mulsf3+0x150>
  802e9c:	2109883a 	add	r4,r4,r4
  802ea0:	180b883a 	mov	r5,r3
  802ea4:	103ffa0e 	bge	r2,zero,802e90 <__mulsf3+0x130>
  802ea8:	21000054 	ori	r4,r4,1
  802eac:	003ff806 	br	802e90 <__mulsf3+0x130>
  802eb0:	d9400215 	stw	r5,8(sp)
  802eb4:	21401fcc 	andi	r5,r4,127
  802eb8:	00c01004 	movi	r3,64
  802ebc:	28c00526 	beq	r5,r3,802ed4 <__mulsf3+0x174>
  802ec0:	008000c4 	movi	r2,3
  802ec4:	d9000315 	stw	r4,12(sp)
  802ec8:	d8800015 	stw	r2,0(sp)
  802ecc:	d809883a 	mov	r4,sp
  802ed0:	003fb506 	br	802da8 <__mulsf3+0x48>
  802ed4:	20c0200c 	andi	r3,r4,128
  802ed8:	183ff91e 	bne	r3,zero,802ec0 <__mulsf3+0x160>
  802edc:	103ff826 	beq	r2,zero,802ec0 <__mulsf3+0x160>
  802ee0:	21001004 	addi	r4,r4,64
  802ee4:	00bfe004 	movi	r2,-128
  802ee8:	2088703a 	and	r4,r4,r2
  802eec:	003ff406 	br	802ec0 <__mulsf3+0x160>

00802ef0 <__fixsfsi>:
  802ef0:	defffa04 	addi	sp,sp,-24
  802ef4:	d9000415 	stw	r4,16(sp)
  802ef8:	d80b883a 	mov	r5,sp
  802efc:	d9000404 	addi	r4,sp,16
  802f00:	dfc00515 	stw	ra,20(sp)
  802f04:	08040f00 	call	8040f0 <__unpack_f>
  802f08:	d8800017 	ldw	r2,0(sp)
  802f0c:	00c00084 	movi	r3,2
  802f10:	10c01826 	beq	r2,r3,802f74 <__fixsfsi+0x84>
  802f14:	00c00044 	movi	r3,1
  802f18:	1880162e 	bgeu	r3,r2,802f74 <__fixsfsi+0x84>
  802f1c:	00c00104 	movi	r3,4
  802f20:	10c00426 	beq	r2,r3,802f34 <__fixsfsi+0x44>
  802f24:	d8800217 	ldw	r2,8(sp)
  802f28:	10001216 	blt	r2,zero,802f74 <__fixsfsi+0x84>
  802f2c:	00c00784 	movi	r3,30
  802f30:	1880070e 	bge	r3,r2,802f50 <__fixsfsi+0x60>
  802f34:	d8800117 	ldw	r2,4(sp)
  802f38:	1000121e 	bne	r2,zero,802f84 <__fixsfsi+0x94>
  802f3c:	00a00034 	movhi	r2,32768
  802f40:	10bfffc4 	addi	r2,r2,-1
  802f44:	dfc00517 	ldw	ra,20(sp)
  802f48:	dec00604 	addi	sp,sp,24
  802f4c:	f800283a 	ret
  802f50:	1885c83a 	sub	r2,r3,r2
  802f54:	d8c00317 	ldw	r3,12(sp)
  802f58:	1884d83a 	srl	r2,r3,r2
  802f5c:	d8c00117 	ldw	r3,4(sp)
  802f60:	183ff826 	beq	r3,zero,802f44 <__fixsfsi+0x54>
  802f64:	0085c83a 	sub	r2,zero,r2
  802f68:	dfc00517 	ldw	ra,20(sp)
  802f6c:	dec00604 	addi	sp,sp,24
  802f70:	f800283a 	ret
  802f74:	0005883a 	mov	r2,zero
  802f78:	dfc00517 	ldw	ra,20(sp)
  802f7c:	dec00604 	addi	sp,sp,24
  802f80:	f800283a 	ret
  802f84:	00a00034 	movhi	r2,32768
  802f88:	dfc00517 	ldw	ra,20(sp)
  802f8c:	dec00604 	addi	sp,sp,24
  802f90:	f800283a 	ret

00802f94 <__extendsfdf2>:
  802f94:	defff904 	addi	sp,sp,-28
  802f98:	d9000515 	stw	r4,20(sp)
  802f9c:	d9400104 	addi	r5,sp,4
  802fa0:	d9000504 	addi	r4,sp,20
  802fa4:	dfc00615 	stw	ra,24(sp)
  802fa8:	08040f00 	call	8040f0 <__unpack_f>
  802fac:	d9c00417 	ldw	r7,16(sp)
  802fb0:	d9000117 	ldw	r4,4(sp)
  802fb4:	d9400217 	ldw	r5,8(sp)
  802fb8:	3804d0ba 	srli	r2,r7,2
  802fbc:	d9800317 	ldw	r6,12(sp)
  802fc0:	380e97ba 	slli	r7,r7,30
  802fc4:	d8800015 	stw	r2,0(sp)
  802fc8:	0803c180 	call	803c18 <__make_dp>
  802fcc:	dfc00617 	ldw	ra,24(sp)
  802fd0:	dec00704 	addi	sp,sp,28
  802fd4:	f800283a 	ret

00802fd8 <__floatunsisf>:
  802fd8:	defffa04 	addi	sp,sp,-24
  802fdc:	dc000415 	stw	r16,16(sp)
  802fe0:	dfc00515 	stw	ra,20(sp)
  802fe4:	d8000115 	stw	zero,4(sp)
  802fe8:	2021883a 	mov	r16,r4
  802fec:	20001326 	beq	r4,zero,80303c <__floatunsisf+0x64>
  802ff0:	008000c4 	movi	r2,3
  802ff4:	d8800015 	stw	r2,0(sp)
  802ff8:	00800784 	movi	r2,30
  802ffc:	d8800215 	stw	r2,8(sp)
  803000:	0803f180 	call	803f18 <__clzsi2>
  803004:	10ffffc4 	addi	r3,r2,-1
  803008:	18001416 	blt	r3,zero,80305c <__floatunsisf+0x84>
  80300c:	18002526 	beq	r3,zero,8030a4 <__floatunsisf+0xcc>
  803010:	80e0983a 	sll	r16,r16,r3
  803014:	00c007c4 	movi	r3,31
  803018:	1885c83a 	sub	r2,r3,r2
  80301c:	dc000315 	stw	r16,12(sp)
  803020:	d8800215 	stw	r2,8(sp)
  803024:	d809883a 	mov	r4,sp
  803028:	0803fc40 	call	803fc4 <__pack_f>
  80302c:	dfc00517 	ldw	ra,20(sp)
  803030:	dc000417 	ldw	r16,16(sp)
  803034:	dec00604 	addi	sp,sp,24
  803038:	f800283a 	ret
  80303c:	00800084 	movi	r2,2
  803040:	d809883a 	mov	r4,sp
  803044:	d8800015 	stw	r2,0(sp)
  803048:	0803fc40 	call	803fc4 <__pack_f>
  80304c:	dfc00517 	ldw	ra,20(sp)
  803050:	dc000417 	ldw	r16,16(sp)
  803054:	dec00604 	addi	sp,sp,24
  803058:	f800283a 	ret
  80305c:	00c7c83a 	sub	r3,zero,r3
  803060:	01000044 	movi	r4,1
  803064:	20c8983a 	sll	r4,r4,r3
  803068:	80c6d83a 	srl	r3,r16,r3
  80306c:	213fffc4 	addi	r4,r4,-1
  803070:	2420703a 	and	r16,r4,r16
  803074:	8020c03a 	cmpne	r16,r16,zero
  803078:	010007c4 	movi	r4,31
  80307c:	80c6b03a 	or	r3,r16,r3
  803080:	2085c83a 	sub	r2,r4,r2
  803084:	d809883a 	mov	r4,sp
  803088:	d8c00315 	stw	r3,12(sp)
  80308c:	d8800215 	stw	r2,8(sp)
  803090:	0803fc40 	call	803fc4 <__pack_f>
  803094:	dfc00517 	ldw	ra,20(sp)
  803098:	dc000417 	ldw	r16,16(sp)
  80309c:	dec00604 	addi	sp,sp,24
  8030a0:	f800283a 	ret
  8030a4:	dc000315 	stw	r16,12(sp)
  8030a8:	003fde06 	br	803024 <__floatunsisf+0x4c>

008030ac <_fpadd_parts>:
  8030ac:	2005883a 	mov	r2,r4
  8030b0:	21000017 	ldw	r4,0(r4)
  8030b4:	01c00044 	movi	r7,1
  8030b8:	3900622e 	bgeu	r7,r4,803244 <_fpadd_parts+0x198>
  8030bc:	28c00017 	ldw	r3,0(r5)
  8030c0:	38c05f2e 	bgeu	r7,r3,803240 <_fpadd_parts+0x194>
  8030c4:	01c00104 	movi	r7,4
  8030c8:	21c0c626 	beq	r4,r7,8033e4 <_fpadd_parts+0x338>
  8030cc:	19c05c26 	beq	r3,r7,803240 <_fpadd_parts+0x194>
  8030d0:	01c00084 	movi	r7,2
  8030d4:	19c06b26 	beq	r3,r7,803284 <_fpadd_parts+0x1d8>
  8030d8:	21c05926 	beq	r4,r7,803240 <_fpadd_parts+0x194>
  8030dc:	11c00217 	ldw	r7,8(r2)
  8030e0:	2ac00217 	ldw	r11,8(r5)
  8030e4:	13000317 	ldw	r12,12(r2)
  8030e8:	13400417 	ldw	r13,16(r2)
  8030ec:	3ac9c83a 	sub	r4,r7,r11
  8030f0:	2a000317 	ldw	r8,12(r5)
  8030f4:	2a400417 	ldw	r9,16(r5)
  8030f8:	2015883a 	mov	r10,r4
  8030fc:	20007516 	blt	r4,zero,8032d4 <_fpadd_parts+0x228>
  803100:	00c00fc4 	movi	r3,63
  803104:	1a805016 	blt	r3,r10,803248 <_fpadd_parts+0x19c>
  803108:	0100870e 	bge	zero,r4,803328 <_fpadd_parts+0x27c>
  80310c:	50fff804 	addi	r3,r10,-32
  803110:	18009916 	blt	r3,zero,803378 <_fpadd_parts+0x2cc>
  803114:	48d6d83a 	srl	r11,r9,r3
  803118:	001d883a 	mov	r14,zero
  80311c:	18009e16 	blt	r3,zero,803398 <_fpadd_parts+0x2ec>
  803120:	01000044 	movi	r4,1
  803124:	20c6983a 	sll	r3,r4,r3
  803128:	0015883a 	mov	r10,zero
  80312c:	513fffc4 	addi	r4,r10,-1
  803130:	2295403a 	cmpgeu	r10,r4,r10
  803134:	1a87c83a 	sub	r3,r3,r10
  803138:	1a52703a 	and	r9,r3,r9
  80313c:	2210703a 	and	r8,r4,r8
  803140:	4250b03a 	or	r8,r8,r9
  803144:	4010c03a 	cmpne	r8,r8,zero
  803148:	42d0b03a 	or	r8,r8,r11
  80314c:	7013883a 	mov	r9,r14
  803150:	11000117 	ldw	r4,4(r2)
  803154:	28800117 	ldw	r2,4(r5)
  803158:	20804126 	beq	r4,r2,803260 <_fpadd_parts+0x1b4>
  80315c:	20006326 	beq	r4,zero,8032ec <_fpadd_parts+0x240>
  803160:	4305c83a 	sub	r2,r8,r12
  803164:	4091803a 	cmpltu	r8,r8,r2
  803168:	4b47c83a 	sub	r3,r9,r13
  80316c:	1a07c83a 	sub	r3,r3,r8
  803170:	18006316 	blt	r3,zero,803300 <_fpadd_parts+0x254>
  803174:	30000115 	stw	zero,4(r6)
  803178:	31c00215 	stw	r7,8(r6)
  80317c:	30800315 	stw	r2,12(r6)
  803180:	30c00415 	stw	r3,16(r6)
  803184:	11ffffc4 	addi	r7,r2,-1
  803188:	388b403a 	cmpgeu	r5,r7,r2
  80318c:	194bc83a 	sub	r5,r3,r5
  803190:	01040034 	movhi	r4,4096
  803194:	213fffc4 	addi	r4,r4,-1
  803198:	21401736 	bltu	r4,r5,8031f8 <_fpadd_parts+0x14c>
  80319c:	29008226 	beq	r5,r4,8033a8 <_fpadd_parts+0x2fc>
  8031a0:	31400217 	ldw	r5,8(r6)
  8031a4:	02840034 	movhi	r10,4096
  8031a8:	52bfffc4 	addi	r10,r10,-1
  8031ac:	033fff84 	movi	r12,-2
  8031b0:	297fffc4 	addi	r5,r5,-1
  8031b4:	00000106 	br	8031bc <_fpadd_parts+0x110>
  8031b8:	3a804a26 	beq	r7,r10,8032e4 <_fpadd_parts+0x238>
  8031bc:	1089883a 	add	r4,r2,r2
  8031c0:	2091803a 	cmpltu	r8,r4,r2
  8031c4:	18c7883a 	add	r3,r3,r3
  8031c8:	227fffc4 	addi	r9,r4,-1
  8031cc:	40d1883a 	add	r8,r8,r3
  8031d0:	490f403a 	cmpgeu	r7,r9,r4
  8031d4:	41cfc83a 	sub	r7,r8,r7
  8031d8:	2817883a 	mov	r11,r5
  8031dc:	2005883a 	mov	r2,r4
  8031e0:	4007883a 	mov	r3,r8
  8031e4:	297fffc4 	addi	r5,r5,-1
  8031e8:	51fff32e 	bgeu	r10,r7,8031b8 <_fpadd_parts+0x10c>
  8031ec:	31000315 	stw	r4,12(r6)
  8031f0:	32000415 	stw	r8,16(r6)
  8031f4:	32c00215 	stw	r11,8(r6)
  8031f8:	010000c4 	movi	r4,3
  8031fc:	31000015 	stw	r4,0(r6)
  803200:	01080034 	movhi	r4,8192
  803204:	213fffc4 	addi	r4,r4,-1
  803208:	20c00b2e 	bgeu	r4,r3,803238 <_fpadd_parts+0x18c>
  80320c:	180e97fa 	slli	r7,r3,31
  803210:	1008d07a 	srli	r4,r2,1
  803214:	31400217 	ldw	r5,8(r6)
  803218:	1806d07a 	srli	r3,r3,1
  80321c:	1080004c 	andi	r2,r2,1
  803220:	3908b03a 	or	r4,r7,r4
  803224:	1108b03a 	or	r4,r2,r4
  803228:	29400044 	addi	r5,r5,1
  80322c:	31000315 	stw	r4,12(r6)
  803230:	30c00415 	stw	r3,16(r6)
  803234:	31400215 	stw	r5,8(r6)
  803238:	3005883a 	mov	r2,r6
  80323c:	f800283a 	ret
  803240:	2805883a 	mov	r2,r5
  803244:	f800283a 	ret
  803248:	59c01e0e 	bge	r11,r7,8032c4 <_fpadd_parts+0x218>
  80324c:	11000117 	ldw	r4,4(r2)
  803250:	28800117 	ldw	r2,4(r5)
  803254:	0011883a 	mov	r8,zero
  803258:	0013883a 	mov	r9,zero
  80325c:	20bfbf1e 	bne	r4,r2,80315c <_fpadd_parts+0xb0>
  803260:	4305883a 	add	r2,r8,r12
  803264:	1207803a 	cmpltu	r3,r2,r8
  803268:	4b53883a 	add	r9,r9,r13
  80326c:	1a47883a 	add	r3,r3,r9
  803270:	31000115 	stw	r4,4(r6)
  803274:	31c00215 	stw	r7,8(r6)
  803278:	30800315 	stw	r2,12(r6)
  80327c:	30c00415 	stw	r3,16(r6)
  803280:	003fdd06 	br	8031f8 <_fpadd_parts+0x14c>
  803284:	20ffef1e 	bne	r4,r3,803244 <_fpadd_parts+0x198>
  803288:	31000015 	stw	r4,0(r6)
  80328c:	10c00117 	ldw	r3,4(r2)
  803290:	30c00115 	stw	r3,4(r6)
  803294:	10c00217 	ldw	r3,8(r2)
  803298:	11000117 	ldw	r4,4(r2)
  80329c:	29400117 	ldw	r5,4(r5)
  8032a0:	30c00215 	stw	r3,8(r6)
  8032a4:	10c00317 	ldw	r3,12(r2)
  8032a8:	2908703a 	and	r4,r5,r4
  8032ac:	30c00315 	stw	r3,12(r6)
  8032b0:	10c00417 	ldw	r3,16(r2)
  8032b4:	31000115 	stw	r4,4(r6)
  8032b8:	3005883a 	mov	r2,r6
  8032bc:	30c00415 	stw	r3,16(r6)
  8032c0:	f800283a 	ret
  8032c4:	580f883a 	mov	r7,r11
  8032c8:	0019883a 	mov	r12,zero
  8032cc:	001b883a 	mov	r13,zero
  8032d0:	003f9f06 	br	803150 <_fpadd_parts+0xa4>
  8032d4:	0115c83a 	sub	r10,zero,r4
  8032d8:	00c00fc4 	movi	r3,63
  8032dc:	1abfda16 	blt	r3,r10,803248 <_fpadd_parts+0x19c>
  8032e0:	003f8906 	br	803108 <_fpadd_parts+0x5c>
  8032e4:	627fb52e 	bgeu	r12,r9,8031bc <_fpadd_parts+0x110>
  8032e8:	003fc006 	br	8031ec <_fpadd_parts+0x140>
  8032ec:	6205c83a 	sub	r2,r12,r8
  8032f0:	6099803a 	cmpltu	r12,r12,r2
  8032f4:	6a47c83a 	sub	r3,r13,r9
  8032f8:	1b07c83a 	sub	r3,r3,r12
  8032fc:	183f9d0e 	bge	r3,zero,803174 <_fpadd_parts+0xc8>
  803300:	0085c83a 	sub	r2,zero,r2
  803304:	1008c03a 	cmpne	r4,r2,zero
  803308:	00c7c83a 	sub	r3,zero,r3
  80330c:	1907c83a 	sub	r3,r3,r4
  803310:	01000044 	movi	r4,1
  803314:	31000115 	stw	r4,4(r6)
  803318:	31c00215 	stw	r7,8(r6)
  80331c:	30800315 	stw	r2,12(r6)
  803320:	30c00415 	stw	r3,16(r6)
  803324:	003f9706 	br	803184 <_fpadd_parts+0xd8>
  803328:	203f8926 	beq	r4,zero,803150 <_fpadd_parts+0xa4>
  80332c:	50fff804 	addi	r3,r10,-32
  803330:	3a8f883a 	add	r7,r7,r10
  803334:	18002316 	blt	r3,zero,8033c4 <_fpadd_parts+0x318>
  803338:	68d6d83a 	srl	r11,r13,r3
  80333c:	001d883a 	mov	r14,zero
  803340:	18001c16 	blt	r3,zero,8033b4 <_fpadd_parts+0x308>
  803344:	01000044 	movi	r4,1
  803348:	20c6983a 	sll	r3,r4,r3
  80334c:	0015883a 	mov	r10,zero
  803350:	513fffc4 	addi	r4,r10,-1
  803354:	2295403a 	cmpgeu	r10,r4,r10
  803358:	1a87c83a 	sub	r3,r3,r10
  80335c:	1b5a703a 	and	r13,r3,r13
  803360:	2318703a 	and	r12,r4,r12
  803364:	6358b03a 	or	r12,r12,r13
  803368:	6018c03a 	cmpne	r12,r12,zero
  80336c:	62d8b03a 	or	r12,r12,r11
  803370:	701b883a 	mov	r13,r14
  803374:	003f7606 	br	803150 <_fpadd_parts+0xa4>
  803378:	4808907a 	slli	r4,r9,1
  80337c:	02c007c4 	movi	r11,31
  803380:	5a97c83a 	sub	r11,r11,r10
  803384:	22c8983a 	sll	r4,r4,r11
  803388:	4296d83a 	srl	r11,r8,r10
  80338c:	4a9cd83a 	srl	r14,r9,r10
  803390:	22d6b03a 	or	r11,r4,r11
  803394:	003f6106 	br	80311c <_fpadd_parts+0x70>
  803398:	00c00044 	movi	r3,1
  80339c:	1a94983a 	sll	r10,r3,r10
  8033a0:	0007883a 	mov	r3,zero
  8033a4:	003f6106 	br	80312c <_fpadd_parts+0x80>
  8033a8:	013fff84 	movi	r4,-2
  8033ac:	21ff7c2e 	bgeu	r4,r7,8031a0 <_fpadd_parts+0xf4>
  8033b0:	003f9106 	br	8031f8 <_fpadd_parts+0x14c>
  8033b4:	00c00044 	movi	r3,1
  8033b8:	1a94983a 	sll	r10,r3,r10
  8033bc:	0007883a 	mov	r3,zero
  8033c0:	003fe306 	br	803350 <_fpadd_parts+0x2a4>
  8033c4:	6816907a 	slli	r11,r13,1
  8033c8:	010007c4 	movi	r4,31
  8033cc:	2289c83a 	sub	r4,r4,r10
  8033d0:	5908983a 	sll	r4,r11,r4
  8033d4:	6296d83a 	srl	r11,r12,r10
  8033d8:	6a9cd83a 	srl	r14,r13,r10
  8033dc:	22d6b03a 	or	r11,r4,r11
  8033e0:	003fd706 	br	803340 <_fpadd_parts+0x294>
  8033e4:	193f971e 	bne	r3,r4,803244 <_fpadd_parts+0x198>
  8033e8:	11000117 	ldw	r4,4(r2)
  8033ec:	28c00117 	ldw	r3,4(r5)
  8033f0:	20ff9426 	beq	r4,r3,803244 <_fpadd_parts+0x198>
  8033f4:	00802034 	movhi	r2,128
  8033f8:	109ae304 	addi	r2,r2,27532
  8033fc:	f800283a 	ret

00803400 <__adddf3>:
  803400:	deffec04 	addi	sp,sp,-80
  803404:	d9001115 	stw	r4,68(sp)
  803408:	d9401215 	stw	r5,72(sp)
  80340c:	d9001104 	addi	r4,sp,68
  803410:	d9400a04 	addi	r5,sp,40
  803414:	dfc01315 	stw	ra,76(sp)
  803418:	d9c01015 	stw	r7,64(sp)
  80341c:	d9800f15 	stw	r6,60(sp)
  803420:	08044080 	call	804408 <__unpack_d>
  803424:	d9000f04 	addi	r4,sp,60
  803428:	d9400504 	addi	r5,sp,20
  80342c:	08044080 	call	804408 <__unpack_d>
  803430:	d9000a04 	addi	r4,sp,40
  803434:	d9400504 	addi	r5,sp,20
  803438:	d80d883a 	mov	r6,sp
  80343c:	08030ac0 	call	8030ac <_fpadd_parts>
  803440:	1009883a 	mov	r4,r2
  803444:	08041e40 	call	8041e4 <__pack_d>
  803448:	dfc01317 	ldw	ra,76(sp)
  80344c:	dec01404 	addi	sp,sp,80
  803450:	f800283a 	ret

00803454 <__subdf3>:
  803454:	deffec04 	addi	sp,sp,-80
  803458:	d9001115 	stw	r4,68(sp)
  80345c:	d9401215 	stw	r5,72(sp)
  803460:	d9001104 	addi	r4,sp,68
  803464:	d9400a04 	addi	r5,sp,40
  803468:	dfc01315 	stw	ra,76(sp)
  80346c:	d9c01015 	stw	r7,64(sp)
  803470:	d9800f15 	stw	r6,60(sp)
  803474:	08044080 	call	804408 <__unpack_d>
  803478:	d9000f04 	addi	r4,sp,60
  80347c:	d9400504 	addi	r5,sp,20
  803480:	08044080 	call	804408 <__unpack_d>
  803484:	d8800617 	ldw	r2,24(sp)
  803488:	d9000a04 	addi	r4,sp,40
  80348c:	d9400504 	addi	r5,sp,20
  803490:	d80d883a 	mov	r6,sp
  803494:	1080005c 	xori	r2,r2,1
  803498:	d8800615 	stw	r2,24(sp)
  80349c:	08030ac0 	call	8030ac <_fpadd_parts>
  8034a0:	1009883a 	mov	r4,r2
  8034a4:	08041e40 	call	8041e4 <__pack_d>
  8034a8:	dfc01317 	ldw	ra,76(sp)
  8034ac:	dec01404 	addi	sp,sp,80
  8034b0:	f800283a 	ret

008034b4 <__muldf3>:
  8034b4:	deffe404 	addi	sp,sp,-112
  8034b8:	d9001115 	stw	r4,68(sp)
  8034bc:	d9401215 	stw	r5,72(sp)
  8034c0:	d9001104 	addi	r4,sp,68
  8034c4:	d9400a04 	addi	r5,sp,40
  8034c8:	dfc01b15 	stw	ra,108(sp)
  8034cc:	d9800f15 	stw	r6,60(sp)
  8034d0:	d9c01015 	stw	r7,64(sp)
  8034d4:	ddc01a15 	stw	r23,104(sp)
  8034d8:	dd801915 	stw	r22,100(sp)
  8034dc:	dd401815 	stw	r21,96(sp)
  8034e0:	dd001715 	stw	r20,92(sp)
  8034e4:	dcc01615 	stw	r19,88(sp)
  8034e8:	dc801515 	stw	r18,84(sp)
  8034ec:	dc401415 	stw	r17,80(sp)
  8034f0:	dc001315 	stw	r16,76(sp)
  8034f4:	08044080 	call	804408 <__unpack_d>
  8034f8:	d9000f04 	addi	r4,sp,60
  8034fc:	d9400504 	addi	r5,sp,20
  803500:	08044080 	call	804408 <__unpack_d>
  803504:	d8c00a17 	ldw	r3,40(sp)
  803508:	00800044 	movi	r2,1
  80350c:	10c01136 	bltu	r2,r3,803554 <__muldf3+0xa0>
  803510:	d8c00b17 	ldw	r3,44(sp)
  803514:	d8800617 	ldw	r2,24(sp)
  803518:	d9000a04 	addi	r4,sp,40
  80351c:	1884c03a 	cmpne	r2,r3,r2
  803520:	d8800b15 	stw	r2,44(sp)
  803524:	08041e40 	call	8041e4 <__pack_d>
  803528:	dfc01b17 	ldw	ra,108(sp)
  80352c:	ddc01a17 	ldw	r23,104(sp)
  803530:	dd801917 	ldw	r22,100(sp)
  803534:	dd401817 	ldw	r21,96(sp)
  803538:	dd001717 	ldw	r20,92(sp)
  80353c:	dcc01617 	ldw	r19,88(sp)
  803540:	dc801517 	ldw	r18,84(sp)
  803544:	dc401417 	ldw	r17,80(sp)
  803548:	dc001317 	ldw	r16,76(sp)
  80354c:	dec01c04 	addi	sp,sp,112
  803550:	f800283a 	ret
  803554:	d9000517 	ldw	r4,20(sp)
  803558:	11000636 	bltu	r2,r4,803574 <__muldf3+0xc0>
  80355c:	d8800617 	ldw	r2,24(sp)
  803560:	d8c00b17 	ldw	r3,44(sp)
  803564:	d9000504 	addi	r4,sp,20
  803568:	1884c03a 	cmpne	r2,r3,r2
  80356c:	d8800615 	stw	r2,24(sp)
  803570:	003fec06 	br	803524 <__muldf3+0x70>
  803574:	00800104 	movi	r2,4
  803578:	1880051e 	bne	r3,r2,803590 <__muldf3+0xdc>
  80357c:	00800084 	movi	r2,2
  803580:	20bfe31e 	bne	r4,r2,803510 <__muldf3+0x5c>
  803584:	01002034 	movhi	r4,128
  803588:	211ae304 	addi	r4,r4,27532
  80358c:	003fe506 	br	803524 <__muldf3+0x70>
  803590:	2080031e 	bne	r4,r2,8035a0 <__muldf3+0xec>
  803594:	00800084 	movi	r2,2
  803598:	18bffa26 	beq	r3,r2,803584 <__muldf3+0xd0>
  80359c:	003fef06 	br	80355c <__muldf3+0xa8>
  8035a0:	00800084 	movi	r2,2
  8035a4:	18bfda26 	beq	r3,r2,803510 <__muldf3+0x5c>
  8035a8:	20bfec26 	beq	r4,r2,80355c <__muldf3+0xa8>
  8035ac:	dc000d17 	ldw	r16,52(sp)
  8035b0:	dd000817 	ldw	r20,32(sp)
  8035b4:	dc800917 	ldw	r18,36(sp)
  8035b8:	8009883a 	mov	r4,r16
  8035bc:	000b883a 	mov	r5,zero
  8035c0:	a00d883a 	mov	r6,r20
  8035c4:	000f883a 	mov	r7,zero
  8035c8:	0803e080 	call	803e08 <__muldi3>
  8035cc:	dc400e17 	ldw	r17,56(sp)
  8035d0:	9009883a 	mov	r4,r18
  8035d4:	800d883a 	mov	r6,r16
  8035d8:	000b883a 	mov	r5,zero
  8035dc:	000f883a 	mov	r7,zero
  8035e0:	102f883a 	mov	r23,r2
  8035e4:	1827883a 	mov	r19,r3
  8035e8:	0803e080 	call	803e08 <__muldi3>
  8035ec:	900d883a 	mov	r6,r18
  8035f0:	8809883a 	mov	r4,r17
  8035f4:	000b883a 	mov	r5,zero
  8035f8:	000f883a 	mov	r7,zero
  8035fc:	102b883a 	mov	r21,r2
  803600:	1821883a 	mov	r16,r3
  803604:	0803e080 	call	803e08 <__muldi3>
  803608:	8809883a 	mov	r4,r17
  80360c:	000b883a 	mov	r5,zero
  803610:	a00d883a 	mov	r6,r20
  803614:	000f883a 	mov	r7,zero
  803618:	102d883a 	mov	r22,r2
  80361c:	1825883a 	mov	r18,r3
  803620:	0803e080 	call	803e08 <__muldi3>
  803624:	154b883a 	add	r5,r2,r21
  803628:	2889803a 	cmpltu	r4,r5,r2
  80362c:	1c07883a 	add	r3,r3,r16
  803630:	20c9883a 	add	r4,r4,r3
  803634:	24004b36 	bltu	r4,r16,803764 <__muldf3+0x2b0>
  803638:	8100011e 	bne	r16,r4,803640 <__muldf3+0x18c>
  80363c:	2d404936 	bltu	r5,r21,803764 <__muldf3+0x2b0>
  803640:	0011883a 	mov	r8,zero
  803644:	0007883a 	mov	r3,zero
  803648:	2ccb883a 	add	r5,r5,r19
  80364c:	b80d883a 	mov	r6,r23
  803650:	2cc0012e 	bgeu	r5,r19,803658 <__muldf3+0x1a4>
  803654:	02000044 	movi	r8,1
  803658:	258f883a 	add	r7,r4,r22
  80365c:	3909803a 	cmpltu	r4,r7,r4
  803660:	da400c17 	ldw	r9,48(sp)
  803664:	2489883a 	add	r4,r4,r18
  803668:	d8800717 	ldw	r2,28(sp)
  80366c:	20c9883a 	add	r4,r4,r3
  803670:	da800b17 	ldw	r10,44(sp)
  803674:	d8c00617 	ldw	r3,24(sp)
  803678:	3a11883a 	add	r8,r7,r8
  80367c:	4885883a 	add	r2,r9,r2
  803680:	50c6c03a 	cmpne	r3,r10,r3
  803684:	41cf803a 	cmpltu	r7,r8,r7
  803688:	12400104 	addi	r9,r2,4
  80368c:	d8c00115 	stw	r3,4(sp)
  803690:	3909883a 	add	r4,r7,r4
  803694:	da400215 	stw	r9,8(sp)
  803698:	03480034 	movhi	r13,8192
  80369c:	6b7fffc4 	addi	r13,r13,-1
  8036a0:	4007883a 	mov	r3,r8
  8036a4:	6900102e 	bgeu	r13,r4,8036e8 <__muldf3+0x234>
  8036a8:	10800144 	addi	r2,r2,5
  8036ac:	180ed07a 	srli	r7,r3,1
  8036b0:	18c0004c 	andi	r3,r3,1
  8036b4:	201097fa 	slli	r8,r4,31
  8036b8:	281697fa 	slli	r11,r5,31
  8036bc:	2008d07a 	srli	r4,r4,1
  8036c0:	3014d07a 	srli	r10,r6,1
  8036c4:	2812d07a 	srli	r9,r5,1
  8036c8:	1019883a 	mov	r12,r2
  8036cc:	18000226 	beq	r3,zero,8036d8 <__muldf3+0x224>
  8036d0:	5a8cb03a 	or	r6,r11,r10
  8036d4:	49600034 	orhi	r5,r9,32768
  8036d8:	41c6b03a 	or	r3,r8,r7
  8036dc:	10800044 	addi	r2,r2,1
  8036e0:	693ff236 	bltu	r13,r4,8036ac <__muldf3+0x1f8>
  8036e4:	db000215 	stw	r12,8(sp)
  8036e8:	03440034 	movhi	r13,4096
  8036ec:	6b7fffc4 	addi	r13,r13,-1
  8036f0:	69001336 	bltu	r13,r4,803740 <__muldf3+0x28c>
  8036f4:	d8800217 	ldw	r2,8(sp)
  8036f8:	10bfffc4 	addi	r2,r2,-1
  8036fc:	18d3883a 	add	r9,r3,r3
  803700:	48c7803a 	cmpltu	r3,r9,r3
  803704:	2109883a 	add	r4,r4,r4
  803708:	190f883a 	add	r7,r3,r4
  80370c:	3191883a 	add	r8,r6,r6
  803710:	4197803a 	cmpltu	r11,r8,r6
  803714:	2955883a 	add	r10,r5,r5
  803718:	1019883a 	mov	r12,r2
  80371c:	4807883a 	mov	r3,r9
  803720:	3809883a 	mov	r4,r7
  803724:	2800010e 	bge	r5,zero,80372c <__muldf3+0x278>
  803728:	48c00054 	ori	r3,r9,1
  80372c:	400d883a 	mov	r6,r8
  803730:	5a8b883a 	add	r5,r11,r10
  803734:	10bfffc4 	addi	r2,r2,-1
  803738:	69fff02e 	bgeu	r13,r7,8036fc <__muldf3+0x248>
  80373c:	db000215 	stw	r12,8(sp)
  803740:	18803fcc 	andi	r2,r3,255
  803744:	01c02004 	movi	r7,128
  803748:	11c00926 	beq	r2,r7,803770 <__muldf3+0x2bc>
  80374c:	008000c4 	movi	r2,3
  803750:	d9000415 	stw	r4,16(sp)
  803754:	d8c00315 	stw	r3,12(sp)
  803758:	d8800015 	stw	r2,0(sp)
  80375c:	d809883a 	mov	r4,sp
  803760:	003f7006 	br	803524 <__muldf3+0x70>
  803764:	0011883a 	mov	r8,zero
  803768:	00c00044 	movi	r3,1
  80376c:	003fb606 	br	803648 <__muldf3+0x194>
  803770:	19c0400c 	andi	r7,r3,256
  803774:	383ff51e 	bne	r7,zero,80374c <__muldf3+0x298>
  803778:	314ab03a 	or	r5,r6,r5
  80377c:	283ff326 	beq	r5,zero,80374c <__muldf3+0x298>
  803780:	1885883a 	add	r2,r3,r2
  803784:	10cb803a 	cmpltu	r5,r2,r3
  803788:	00ffc004 	movi	r3,-256
  80378c:	10c6703a 	and	r3,r2,r3
  803790:	2909883a 	add	r4,r5,r4
  803794:	003fed06 	br	80374c <__muldf3+0x298>

00803798 <__divdf3>:
  803798:	defff104 	addi	sp,sp,-60
  80379c:	d9000c15 	stw	r4,48(sp)
  8037a0:	d9400d15 	stw	r5,52(sp)
  8037a4:	d9000c04 	addi	r4,sp,48
  8037a8:	d9400504 	addi	r5,sp,20
  8037ac:	dfc00e15 	stw	ra,56(sp)
  8037b0:	d9800a15 	stw	r6,40(sp)
  8037b4:	d9c00b15 	stw	r7,44(sp)
  8037b8:	08044080 	call	804408 <__unpack_d>
  8037bc:	d9000a04 	addi	r4,sp,40
  8037c0:	d80b883a 	mov	r5,sp
  8037c4:	08044080 	call	804408 <__unpack_d>
  8037c8:	d8c00517 	ldw	r3,20(sp)
  8037cc:	00800044 	movi	r2,1
  8037d0:	10c00536 	bltu	r2,r3,8037e8 <__divdf3+0x50>
  8037d4:	d9000504 	addi	r4,sp,20
  8037d8:	08041e40 	call	8041e4 <__pack_d>
  8037dc:	dfc00e17 	ldw	ra,56(sp)
  8037e0:	dec00f04 	addi	sp,sp,60
  8037e4:	f800283a 	ret
  8037e8:	d9000017 	ldw	r4,0(sp)
  8037ec:	11000536 	bltu	r2,r4,803804 <__divdf3+0x6c>
  8037f0:	d809883a 	mov	r4,sp
  8037f4:	08041e40 	call	8041e4 <__pack_d>
  8037f8:	dfc00e17 	ldw	ra,56(sp)
  8037fc:	dec00f04 	addi	sp,sp,60
  803800:	f800283a 	ret
  803804:	d9800617 	ldw	r6,24(sp)
  803808:	d9400117 	ldw	r5,4(sp)
  80380c:	00800104 	movi	r2,4
  803810:	314af03a 	xor	r5,r6,r5
  803814:	d9400615 	stw	r5,24(sp)
  803818:	18800226 	beq	r3,r2,803824 <__divdf3+0x8c>
  80381c:	01400084 	movi	r5,2
  803820:	1940041e 	bne	r3,r5,803834 <__divdf3+0x9c>
  803824:	193feb1e 	bne	r3,r4,8037d4 <__divdf3+0x3c>
  803828:	01002034 	movhi	r4,128
  80382c:	211ae304 	addi	r4,r4,27532
  803830:	003fe906 	br	8037d8 <__divdf3+0x40>
  803834:	20803326 	beq	r4,r2,803904 <__divdf3+0x16c>
  803838:	21403726 	beq	r4,r5,803918 <__divdf3+0x180>
  80383c:	d8800217 	ldw	r2,8(sp)
  803840:	d9000717 	ldw	r4,28(sp)
  803844:	d8c00917 	ldw	r3,36(sp)
  803848:	da000417 	ldw	r8,16(sp)
  80384c:	2089c83a 	sub	r4,r4,r2
  803850:	d9000715 	stw	r4,28(sp)
  803854:	d8800817 	ldw	r2,32(sp)
  803858:	dbc00317 	ldw	r15,12(sp)
  80385c:	1a000236 	bltu	r3,r8,803868 <__divdf3+0xd0>
  803860:	40c0081e 	bne	r8,r3,803884 <__divdf3+0xec>
  803864:	13c0072e 	bgeu	r2,r15,803884 <__divdf3+0xec>
  803868:	108b883a 	add	r5,r2,r2
  80386c:	288d803a 	cmpltu	r6,r5,r2
  803870:	18c7883a 	add	r3,r3,r3
  803874:	213fffc4 	addi	r4,r4,-1
  803878:	2805883a 	mov	r2,r5
  80387c:	30c7883a 	add	r3,r6,r3
  803880:	d9000715 	stw	r4,28(sp)
  803884:	01400f44 	movi	r5,61
  803888:	000f883a 	mov	r7,zero
  80388c:	01040034 	movhi	r4,4096
  803890:	0019883a 	mov	r12,zero
  803894:	001b883a 	mov	r13,zero
  803898:	201697fa 	slli	r11,r4,31
  80389c:	3814d07a 	srli	r10,r7,1
  8038a0:	297fffc4 	addi	r5,r5,-1
  8038a4:	1a000936 	bltu	r3,r8,8038cc <__divdf3+0x134>
  8038a8:	13cdc83a 	sub	r6,r2,r15
  8038ac:	1193803a 	cmpltu	r9,r2,r6
  8038b0:	1a1dc83a 	sub	r14,r3,r8
  8038b4:	40c0011e 	bne	r8,r3,8038bc <__divdf3+0x124>
  8038b8:	13c00436 	bltu	r2,r15,8038cc <__divdf3+0x134>
  8038bc:	3005883a 	mov	r2,r6
  8038c0:	7247c83a 	sub	r3,r14,r9
  8038c4:	61d8b03a 	or	r12,r12,r7
  8038c8:	691ab03a 	or	r13,r13,r4
  8038cc:	108d883a 	add	r6,r2,r2
  8038d0:	3093803a 	cmpltu	r9,r6,r2
  8038d4:	18c7883a 	add	r3,r3,r3
  8038d8:	5a8eb03a 	or	r7,r11,r10
  8038dc:	2008d07a 	srli	r4,r4,1
  8038e0:	3005883a 	mov	r2,r6
  8038e4:	48c7883a 	add	r3,r9,r3
  8038e8:	283feb1e 	bne	r5,zero,803898 <__divdf3+0x100>
  8038ec:	61003fcc 	andi	r4,r12,255
  8038f0:	01402004 	movi	r5,128
  8038f4:	21400b26 	beq	r4,r5,803924 <__divdf3+0x18c>
  8038f8:	db000815 	stw	r12,32(sp)
  8038fc:	db400915 	stw	r13,36(sp)
  803900:	003fb406 	br	8037d4 <__divdf3+0x3c>
  803904:	d8000815 	stw	zero,32(sp)
  803908:	d8000915 	stw	zero,36(sp)
  80390c:	d8000715 	stw	zero,28(sp)
  803910:	d9000504 	addi	r4,sp,20
  803914:	003fb006 	br	8037d8 <__divdf3+0x40>
  803918:	d8800515 	stw	r2,20(sp)
  80391c:	d9000504 	addi	r4,sp,20
  803920:	003fad06 	br	8037d8 <__divdf3+0x40>
  803924:	6140400c 	andi	r5,r12,256
  803928:	283ff31e 	bne	r5,zero,8038f8 <__divdf3+0x160>
  80392c:	30c4b03a 	or	r2,r6,r3
  803930:	103ff126 	beq	r2,zero,8038f8 <__divdf3+0x160>
  803934:	6109883a 	add	r4,r12,r4
  803938:	2305803a 	cmpltu	r2,r4,r12
  80393c:	033fc004 	movi	r12,-256
  803940:	2318703a 	and	r12,r4,r12
  803944:	135b883a 	add	r13,r2,r13
  803948:	003feb06 	br	8038f8 <__divdf3+0x160>

0080394c <__eqdf2>:
  80394c:	defff104 	addi	sp,sp,-60
  803950:	d9000c15 	stw	r4,48(sp)
  803954:	d9400d15 	stw	r5,52(sp)
  803958:	d9000c04 	addi	r4,sp,48
  80395c:	d9400504 	addi	r5,sp,20
  803960:	dfc00e15 	stw	ra,56(sp)
  803964:	d9800a15 	stw	r6,40(sp)
  803968:	d9c00b15 	stw	r7,44(sp)
  80396c:	08044080 	call	804408 <__unpack_d>
  803970:	d9000a04 	addi	r4,sp,40
  803974:	d80b883a 	mov	r5,sp
  803978:	08044080 	call	804408 <__unpack_d>
  80397c:	d8c00517 	ldw	r3,20(sp)
  803980:	00800044 	movi	r2,1
  803984:	10c0052e 	bgeu	r2,r3,80399c <__eqdf2+0x50>
  803988:	d8c00017 	ldw	r3,0(sp)
  80398c:	10c0032e 	bgeu	r2,r3,80399c <__eqdf2+0x50>
  803990:	d9000504 	addi	r4,sp,20
  803994:	d80b883a 	mov	r5,sp
  803998:	080450c0 	call	80450c <__fpcmp_parts_d>
  80399c:	dfc00e17 	ldw	ra,56(sp)
  8039a0:	dec00f04 	addi	sp,sp,60
  8039a4:	f800283a 	ret

008039a8 <__gtdf2>:
  8039a8:	defff104 	addi	sp,sp,-60
  8039ac:	d9000c15 	stw	r4,48(sp)
  8039b0:	d9400d15 	stw	r5,52(sp)
  8039b4:	d9000c04 	addi	r4,sp,48
  8039b8:	d9400504 	addi	r5,sp,20
  8039bc:	dfc00e15 	stw	ra,56(sp)
  8039c0:	d9800a15 	stw	r6,40(sp)
  8039c4:	d9c00b15 	stw	r7,44(sp)
  8039c8:	08044080 	call	804408 <__unpack_d>
  8039cc:	d9000a04 	addi	r4,sp,40
  8039d0:	d80b883a 	mov	r5,sp
  8039d4:	08044080 	call	804408 <__unpack_d>
  8039d8:	d8c00517 	ldw	r3,20(sp)
  8039dc:	00800044 	movi	r2,1
  8039e0:	10c0082e 	bgeu	r2,r3,803a04 <__gtdf2+0x5c>
  8039e4:	d8c00017 	ldw	r3,0(sp)
  8039e8:	10c0062e 	bgeu	r2,r3,803a04 <__gtdf2+0x5c>
  8039ec:	d9000504 	addi	r4,sp,20
  8039f0:	d80b883a 	mov	r5,sp
  8039f4:	080450c0 	call	80450c <__fpcmp_parts_d>
  8039f8:	dfc00e17 	ldw	ra,56(sp)
  8039fc:	dec00f04 	addi	sp,sp,60
  803a00:	f800283a 	ret
  803a04:	00bfffc4 	movi	r2,-1
  803a08:	003ffb06 	br	8039f8 <__gtdf2+0x50>

00803a0c <__gedf2>:
  803a0c:	defff104 	addi	sp,sp,-60
  803a10:	d9000c15 	stw	r4,48(sp)
  803a14:	d9400d15 	stw	r5,52(sp)
  803a18:	d9000c04 	addi	r4,sp,48
  803a1c:	d9400504 	addi	r5,sp,20
  803a20:	dfc00e15 	stw	ra,56(sp)
  803a24:	d9800a15 	stw	r6,40(sp)
  803a28:	d9c00b15 	stw	r7,44(sp)
  803a2c:	08044080 	call	804408 <__unpack_d>
  803a30:	d9000a04 	addi	r4,sp,40
  803a34:	d80b883a 	mov	r5,sp
  803a38:	08044080 	call	804408 <__unpack_d>
  803a3c:	d8c00517 	ldw	r3,20(sp)
  803a40:	00800044 	movi	r2,1
  803a44:	10c0082e 	bgeu	r2,r3,803a68 <__gedf2+0x5c>
  803a48:	d8c00017 	ldw	r3,0(sp)
  803a4c:	10c0062e 	bgeu	r2,r3,803a68 <__gedf2+0x5c>
  803a50:	d9000504 	addi	r4,sp,20
  803a54:	d80b883a 	mov	r5,sp
  803a58:	080450c0 	call	80450c <__fpcmp_parts_d>
  803a5c:	dfc00e17 	ldw	ra,56(sp)
  803a60:	dec00f04 	addi	sp,sp,60
  803a64:	f800283a 	ret
  803a68:	00bfffc4 	movi	r2,-1
  803a6c:	003ffb06 	br	803a5c <__gedf2+0x50>

00803a70 <__floatsidf>:
  803a70:	2004d7fa 	srli	r2,r4,31
  803a74:	defff904 	addi	sp,sp,-28
  803a78:	00c000c4 	movi	r3,3
  803a7c:	dfc00615 	stw	ra,24(sp)
  803a80:	dc000515 	stw	r16,20(sp)
  803a84:	d8c00015 	stw	r3,0(sp)
  803a88:	d8800115 	stw	r2,4(sp)
  803a8c:	2000081e 	bne	r4,zero,803ab0 <__floatsidf+0x40>
  803a90:	00800084 	movi	r2,2
  803a94:	d8800015 	stw	r2,0(sp)
  803a98:	d809883a 	mov	r4,sp
  803a9c:	08041e40 	call	8041e4 <__pack_d>
  803aa0:	dfc00617 	ldw	ra,24(sp)
  803aa4:	dc000517 	ldw	r16,20(sp)
  803aa8:	dec00704 	addi	sp,sp,28
  803aac:	f800283a 	ret
  803ab0:	00c00f04 	movi	r3,60
  803ab4:	d8c00215 	stw	r3,8(sp)
  803ab8:	10000f1e 	bne	r2,zero,803af8 <__floatsidf+0x88>
  803abc:	2021883a 	mov	r16,r4
  803ac0:	8009883a 	mov	r4,r16
  803ac4:	0803f180 	call	803f18 <__clzsi2>
  803ac8:	11000744 	addi	r4,r2,29
  803acc:	0100110e 	bge	zero,r4,803b14 <__floatsidf+0xa4>
  803ad0:	10ffff44 	addi	r3,r2,-3
  803ad4:	18001216 	blt	r3,zero,803b20 <__floatsidf+0xb0>
  803ad8:	80c6983a 	sll	r3,r16,r3
  803adc:	0009883a 	mov	r4,zero
  803ae0:	014007c4 	movi	r5,31
  803ae4:	2885c83a 	sub	r2,r5,r2
  803ae8:	d9000315 	stw	r4,12(sp)
  803aec:	d8c00415 	stw	r3,16(sp)
  803af0:	d8800215 	stw	r2,8(sp)
  803af4:	003fe806 	br	803a98 <__floatsidf+0x28>
  803af8:	00a00034 	movhi	r2,32768
  803afc:	20800e26 	beq	r4,r2,803b38 <__floatsidf+0xc8>
  803b00:	0121c83a 	sub	r16,zero,r4
  803b04:	8009883a 	mov	r4,r16
  803b08:	0803f180 	call	803f18 <__clzsi2>
  803b0c:	11000744 	addi	r4,r2,29
  803b10:	013fef16 	blt	zero,r4,803ad0 <__floatsidf+0x60>
  803b14:	dc000315 	stw	r16,12(sp)
  803b18:	d8000415 	stw	zero,16(sp)
  803b1c:	003fde06 	br	803a98 <__floatsidf+0x28>
  803b20:	800ad07a 	srli	r5,r16,1
  803b24:	00c007c4 	movi	r3,31
  803b28:	1907c83a 	sub	r3,r3,r4
  803b2c:	28c6d83a 	srl	r3,r5,r3
  803b30:	8108983a 	sll	r4,r16,r4
  803b34:	003fea06 	br	803ae0 <__floatsidf+0x70>
  803b38:	0005883a 	mov	r2,zero
  803b3c:	00f07834 	movhi	r3,49632
  803b40:	003fd706 	br	803aa0 <__floatsidf+0x30>

00803b44 <__fixdfsi>:
  803b44:	defff804 	addi	sp,sp,-32
  803b48:	d9000515 	stw	r4,20(sp)
  803b4c:	d9400615 	stw	r5,24(sp)
  803b50:	d9000504 	addi	r4,sp,20
  803b54:	d80b883a 	mov	r5,sp
  803b58:	dfc00715 	stw	ra,28(sp)
  803b5c:	08044080 	call	804408 <__unpack_d>
  803b60:	d8800017 	ldw	r2,0(sp)
  803b64:	00c00084 	movi	r3,2
  803b68:	10c01c26 	beq	r2,r3,803bdc <__fixdfsi+0x98>
  803b6c:	00c00044 	movi	r3,1
  803b70:	18801a2e 	bgeu	r3,r2,803bdc <__fixdfsi+0x98>
  803b74:	00c00104 	movi	r3,4
  803b78:	10c01126 	beq	r2,r3,803bc0 <__fixdfsi+0x7c>
  803b7c:	d8800217 	ldw	r2,8(sp)
  803b80:	10001616 	blt	r2,zero,803bdc <__fixdfsi+0x98>
  803b84:	00c00784 	movi	r3,30
  803b88:	18800d16 	blt	r3,r2,803bc0 <__fixdfsi+0x7c>
  803b8c:	00c00f04 	movi	r3,60
  803b90:	1885c83a 	sub	r2,r3,r2
  803b94:	10fff804 	addi	r3,r2,-32
  803b98:	d9400317 	ldw	r5,12(sp)
  803b9c:	d9000417 	ldw	r4,16(sp)
  803ba0:	18001616 	blt	r3,zero,803bfc <__fixdfsi+0xb8>
  803ba4:	20c4d83a 	srl	r2,r4,r3
  803ba8:	d8c00117 	ldw	r3,4(sp)
  803bac:	18000126 	beq	r3,zero,803bb4 <__fixdfsi+0x70>
  803bb0:	0085c83a 	sub	r2,zero,r2
  803bb4:	dfc00717 	ldw	ra,28(sp)
  803bb8:	dec00804 	addi	sp,sp,32
  803bbc:	f800283a 	ret
  803bc0:	d8800117 	ldw	r2,4(sp)
  803bc4:	1000091e 	bne	r2,zero,803bec <__fixdfsi+0xa8>
  803bc8:	00a00034 	movhi	r2,32768
  803bcc:	10bfffc4 	addi	r2,r2,-1
  803bd0:	dfc00717 	ldw	ra,28(sp)
  803bd4:	dec00804 	addi	sp,sp,32
  803bd8:	f800283a 	ret
  803bdc:	0005883a 	mov	r2,zero
  803be0:	dfc00717 	ldw	ra,28(sp)
  803be4:	dec00804 	addi	sp,sp,32
  803be8:	f800283a 	ret
  803bec:	00a00034 	movhi	r2,32768
  803bf0:	dfc00717 	ldw	ra,28(sp)
  803bf4:	dec00804 	addi	sp,sp,32
  803bf8:	f800283a 	ret
  803bfc:	2008907a 	slli	r4,r4,1
  803c00:	018007c4 	movi	r6,31
  803c04:	308dc83a 	sub	r6,r6,r2
  803c08:	2188983a 	sll	r4,r4,r6
  803c0c:	2884d83a 	srl	r2,r5,r2
  803c10:	2084b03a 	or	r2,r4,r2
  803c14:	003fe406 	br	803ba8 <__fixdfsi+0x64>

00803c18 <__make_dp>:
  803c18:	defff904 	addi	sp,sp,-28
  803c1c:	d8800717 	ldw	r2,28(sp)
  803c20:	d9000015 	stw	r4,0(sp)
  803c24:	d809883a 	mov	r4,sp
  803c28:	dfc00515 	stw	ra,20(sp)
  803c2c:	d9c00615 	stw	r7,24(sp)
  803c30:	d9400115 	stw	r5,4(sp)
  803c34:	d9800215 	stw	r6,8(sp)
  803c38:	d9c00315 	stw	r7,12(sp)
  803c3c:	d8800415 	stw	r2,16(sp)
  803c40:	08041e40 	call	8041e4 <__pack_d>
  803c44:	dfc00517 	ldw	ra,20(sp)
  803c48:	dec00704 	addi	sp,sp,28
  803c4c:	f800283a 	ret

00803c50 <__truncdfsf2>:
  803c50:	defff804 	addi	sp,sp,-32
  803c54:	d9000515 	stw	r4,20(sp)
  803c58:	d9400615 	stw	r5,24(sp)
  803c5c:	d9000504 	addi	r4,sp,20
  803c60:	d80b883a 	mov	r5,sp
  803c64:	dfc00715 	stw	ra,28(sp)
  803c68:	08044080 	call	804408 <__unpack_d>
  803c6c:	d8800317 	ldw	r2,12(sp)
  803c70:	d8c00417 	ldw	r3,16(sp)
  803c74:	01100034 	movhi	r4,16384
  803c78:	213fffc4 	addi	r4,r4,-1
  803c7c:	100ed7ba 	srli	r7,r2,30
  803c80:	180690ba 	slli	r3,r3,2
  803c84:	1104703a 	and	r2,r2,r4
  803c88:	19ceb03a 	or	r7,r3,r7
  803c8c:	10000126 	beq	r2,zero,803c94 <__truncdfsf2+0x44>
  803c90:	39c00054 	ori	r7,r7,1
  803c94:	d9000017 	ldw	r4,0(sp)
  803c98:	d9400117 	ldw	r5,4(sp)
  803c9c:	d9800217 	ldw	r6,8(sp)
  803ca0:	08041b80 	call	8041b8 <__make_fp>
  803ca4:	dfc00717 	ldw	ra,28(sp)
  803ca8:	dec00804 	addi	sp,sp,32
  803cac:	f800283a 	ret

00803cb0 <udivmodsi4>:
  803cb0:	2005883a 	mov	r2,r4
  803cb4:	2900182e 	bgeu	r5,r4,803d18 <udivmodsi4+0x68>
  803cb8:	28001716 	blt	r5,zero,803d18 <udivmodsi4+0x68>
  803cbc:	01000804 	movi	r4,32
  803cc0:	00c00044 	movi	r3,1
  803cc4:	00000206 	br	803cd0 <udivmodsi4+0x20>
  803cc8:	20001126 	beq	r4,zero,803d10 <udivmodsi4+0x60>
  803ccc:	28000516 	blt	r5,zero,803ce4 <udivmodsi4+0x34>
  803cd0:	294b883a 	add	r5,r5,r5
  803cd4:	213fffc4 	addi	r4,r4,-1
  803cd8:	18c7883a 	add	r3,r3,r3
  803cdc:	28bffa36 	bltu	r5,r2,803cc8 <udivmodsi4+0x18>
  803ce0:	18000b26 	beq	r3,zero,803d10 <udivmodsi4+0x60>
  803ce4:	0009883a 	mov	r4,zero
  803ce8:	11400236 	bltu	r2,r5,803cf4 <udivmodsi4+0x44>
  803cec:	1145c83a 	sub	r2,r2,r5
  803cf0:	20c8b03a 	or	r4,r4,r3
  803cf4:	1806d07a 	srli	r3,r3,1
  803cf8:	280ad07a 	srli	r5,r5,1
  803cfc:	183ffa1e 	bne	r3,zero,803ce8 <udivmodsi4+0x38>
  803d00:	3000021e 	bne	r6,zero,803d0c <udivmodsi4+0x5c>
  803d04:	2005883a 	mov	r2,r4
  803d08:	f800283a 	ret
  803d0c:	f800283a 	ret
  803d10:	0009883a 	mov	r4,zero
  803d14:	003ffa06 	br	803d00 <udivmodsi4+0x50>
  803d18:	00c00044 	movi	r3,1
  803d1c:	0009883a 	mov	r4,zero
  803d20:	003ff106 	br	803ce8 <udivmodsi4+0x38>

00803d24 <__divsi3>:
  803d24:	defffe04 	addi	sp,sp,-8
  803d28:	dfc00115 	stw	ra,4(sp)
  803d2c:	dc000015 	stw	r16,0(sp)
  803d30:	20000a16 	blt	r4,zero,803d5c <__divsi3+0x38>
  803d34:	0021883a 	mov	r16,zero
  803d38:	28000b16 	blt	r5,zero,803d68 <__divsi3+0x44>
  803d3c:	000d883a 	mov	r6,zero
  803d40:	0803cb00 	call	803cb0 <udivmodsi4>
  803d44:	80000126 	beq	r16,zero,803d4c <__divsi3+0x28>
  803d48:	0085c83a 	sub	r2,zero,r2
  803d4c:	dfc00117 	ldw	ra,4(sp)
  803d50:	dc000017 	ldw	r16,0(sp)
  803d54:	dec00204 	addi	sp,sp,8
  803d58:	f800283a 	ret
  803d5c:	0109c83a 	sub	r4,zero,r4
  803d60:	04000044 	movi	r16,1
  803d64:	283ff50e 	bge	r5,zero,803d3c <__divsi3+0x18>
  803d68:	014bc83a 	sub	r5,zero,r5
  803d6c:	8400005c 	xori	r16,r16,1
  803d70:	003ff206 	br	803d3c <__divsi3+0x18>

00803d74 <__modsi3>:
  803d74:	deffff04 	addi	sp,sp,-4
  803d78:	dfc00015 	stw	ra,0(sp)
  803d7c:	20000516 	blt	r4,zero,803d94 <__modsi3+0x20>
  803d80:	28000c16 	blt	r5,zero,803db4 <__modsi3+0x40>
  803d84:	01800044 	movi	r6,1
  803d88:	dfc00017 	ldw	ra,0(sp)
  803d8c:	dec00104 	addi	sp,sp,4
  803d90:	0803cb01 	jmpi	803cb0 <udivmodsi4>
  803d94:	0109c83a 	sub	r4,zero,r4
  803d98:	28000b16 	blt	r5,zero,803dc8 <__modsi3+0x54>
  803d9c:	01800044 	movi	r6,1
  803da0:	0803cb00 	call	803cb0 <udivmodsi4>
  803da4:	0085c83a 	sub	r2,zero,r2
  803da8:	dfc00017 	ldw	ra,0(sp)
  803dac:	dec00104 	addi	sp,sp,4
  803db0:	f800283a 	ret
  803db4:	014bc83a 	sub	r5,zero,r5
  803db8:	01800044 	movi	r6,1
  803dbc:	dfc00017 	ldw	ra,0(sp)
  803dc0:	dec00104 	addi	sp,sp,4
  803dc4:	0803cb01 	jmpi	803cb0 <udivmodsi4>
  803dc8:	014bc83a 	sub	r5,zero,r5
  803dcc:	003ff306 	br	803d9c <__modsi3+0x28>

00803dd0 <__udivsi3>:
  803dd0:	000d883a 	mov	r6,zero
  803dd4:	0803cb01 	jmpi	803cb0 <udivmodsi4>

00803dd8 <__umodsi3>:
  803dd8:	01800044 	movi	r6,1
  803ddc:	0803cb01 	jmpi	803cb0 <udivmodsi4>

00803de0 <__mulsi3>:
  803de0:	0005883a 	mov	r2,zero
  803de4:	20000726 	beq	r4,zero,803e04 <__mulsi3+0x24>
  803de8:	20c0004c 	andi	r3,r4,1
  803dec:	2008d07a 	srli	r4,r4,1
  803df0:	18000126 	beq	r3,zero,803df8 <__mulsi3+0x18>
  803df4:	1145883a 	add	r2,r2,r5
  803df8:	294b883a 	add	r5,r5,r5
  803dfc:	203ffa1e 	bne	r4,zero,803de8 <__mulsi3+0x8>
  803e00:	f800283a 	ret
  803e04:	f800283a 	ret

00803e08 <__muldi3>:
  803e08:	defff604 	addi	sp,sp,-40
  803e0c:	dd400515 	stw	r21,20(sp)
  803e10:	dd000415 	stw	r20,16(sp)
  803e14:	257fffcc 	andi	r21,r4,65535
  803e18:	353fffcc 	andi	r20,r6,65535
  803e1c:	dcc00315 	stw	r19,12(sp)
  803e20:	3026d43a 	srli	r19,r6,16
  803e24:	dd800615 	stw	r22,24(sp)
  803e28:	dc800215 	stw	r18,8(sp)
  803e2c:	dc400115 	stw	r17,4(sp)
  803e30:	2024d43a 	srli	r18,r4,16
  803e34:	2023883a 	mov	r17,r4
  803e38:	282d883a 	mov	r22,r5
  803e3c:	a009883a 	mov	r4,r20
  803e40:	a80b883a 	mov	r5,r21
  803e44:	dfc00915 	stw	ra,36(sp)
  803e48:	df000815 	stw	fp,32(sp)
  803e4c:	ddc00715 	stw	r23,28(sp)
  803e50:	3839883a 	mov	fp,r7
  803e54:	dc000015 	stw	r16,0(sp)
  803e58:	3021883a 	mov	r16,r6
  803e5c:	0803de00 	call	803de0 <__mulsi3>
  803e60:	a80b883a 	mov	r5,r21
  803e64:	9809883a 	mov	r4,r19
  803e68:	102f883a 	mov	r23,r2
  803e6c:	0803de00 	call	803de0 <__mulsi3>
  803e70:	a009883a 	mov	r4,r20
  803e74:	900b883a 	mov	r5,r18
  803e78:	102b883a 	mov	r21,r2
  803e7c:	0803de00 	call	803de0 <__mulsi3>
  803e80:	9809883a 	mov	r4,r19
  803e84:	900b883a 	mov	r5,r18
  803e88:	1029883a 	mov	r20,r2
  803e8c:	0803de00 	call	803de0 <__mulsi3>
  803e90:	1007883a 	mov	r3,r2
  803e94:	b804d43a 	srli	r2,r23,16
  803e98:	a549883a 	add	r4,r20,r21
  803e9c:	2089883a 	add	r4,r4,r2
  803ea0:	2500022e 	bgeu	r4,r20,803eac <__muldi3+0xa4>
  803ea4:	00800074 	movhi	r2,1
  803ea8:	1887883a 	add	r3,r3,r2
  803eac:	200cd43a 	srli	r6,r4,16
  803eb0:	2004943a 	slli	r2,r4,16
  803eb4:	e00b883a 	mov	r5,fp
  803eb8:	8809883a 	mov	r4,r17
  803ebc:	bdffffcc 	andi	r23,r23,65535
  803ec0:	19a3883a 	add	r17,r3,r6
  803ec4:	15ef883a 	add	r23,r2,r23
  803ec8:	0803de00 	call	803de0 <__mulsi3>
  803ecc:	8009883a 	mov	r4,r16
  803ed0:	b00b883a 	mov	r5,r22
  803ed4:	1025883a 	mov	r18,r2
  803ed8:	0803de00 	call	803de0 <__mulsi3>
  803edc:	9085883a 	add	r2,r18,r2
  803ee0:	1447883a 	add	r3,r2,r17
  803ee4:	b805883a 	mov	r2,r23
  803ee8:	dfc00917 	ldw	ra,36(sp)
  803eec:	df000817 	ldw	fp,32(sp)
  803ef0:	ddc00717 	ldw	r23,28(sp)
  803ef4:	dd800617 	ldw	r22,24(sp)
  803ef8:	dd400517 	ldw	r21,20(sp)
  803efc:	dd000417 	ldw	r20,16(sp)
  803f00:	dcc00317 	ldw	r19,12(sp)
  803f04:	dc800217 	ldw	r18,8(sp)
  803f08:	dc400117 	ldw	r17,4(sp)
  803f0c:	dc000017 	ldw	r16,0(sp)
  803f10:	dec00a04 	addi	sp,sp,40
  803f14:	f800283a 	ret

00803f18 <__clzsi2>:
  803f18:	00bfffd4 	movui	r2,65535
  803f1c:	11000b36 	bltu	r2,r4,803f4c <__clzsi2+0x34>
  803f20:	00803fc4 	movi	r2,255
  803f24:	11001e2e 	bgeu	r2,r4,803fa0 <__clzsi2+0x88>
  803f28:	00c00204 	movi	r3,8
  803f2c:	20c8d83a 	srl	r4,r4,r3
  803f30:	00c02034 	movhi	r3,128
  803f34:	18dae804 	addi	r3,r3,27552
  803f38:	00800604 	movi	r2,24
  803f3c:	1909883a 	add	r4,r3,r4
  803f40:	20c00003 	ldbu	r3,0(r4)
  803f44:	10c5c83a 	sub	r2,r2,r3
  803f48:	f800283a 	ret
  803f4c:	00804034 	movhi	r2,256
  803f50:	10bfffc4 	addi	r2,r2,-1
  803f54:	11000936 	bltu	r2,r4,803f7c <__clzsi2+0x64>
  803f58:	00800404 	movi	r2,16
  803f5c:	1007883a 	mov	r3,r2
  803f60:	20c8d83a 	srl	r4,r4,r3
  803f64:	00c02034 	movhi	r3,128
  803f68:	18dae804 	addi	r3,r3,27552
  803f6c:	1909883a 	add	r4,r3,r4
  803f70:	20c00003 	ldbu	r3,0(r4)
  803f74:	10c5c83a 	sub	r2,r2,r3
  803f78:	f800283a 	ret
  803f7c:	00c00604 	movi	r3,24
  803f80:	20c8d83a 	srl	r4,r4,r3
  803f84:	00c02034 	movhi	r3,128
  803f88:	18dae804 	addi	r3,r3,27552
  803f8c:	00800204 	movi	r2,8
  803f90:	1909883a 	add	r4,r3,r4
  803f94:	20c00003 	ldbu	r3,0(r4)
  803f98:	10c5c83a 	sub	r2,r2,r3
  803f9c:	f800283a 	ret
  803fa0:	0007883a 	mov	r3,zero
  803fa4:	20c8d83a 	srl	r4,r4,r3
  803fa8:	00c02034 	movhi	r3,128
  803fac:	18dae804 	addi	r3,r3,27552
  803fb0:	00800804 	movi	r2,32
  803fb4:	1909883a 	add	r4,r3,r4
  803fb8:	20c00003 	ldbu	r3,0(r4)
  803fbc:	10c5c83a 	sub	r2,r2,r3
  803fc0:	f800283a 	ret

00803fc4 <__pack_f>:
  803fc4:	21400017 	ldw	r5,0(r4)
  803fc8:	01800044 	movi	r6,1
  803fcc:	20c00317 	ldw	r3,12(r4)
  803fd0:	21c00117 	ldw	r7,4(r4)
  803fd4:	3140282e 	bgeu	r6,r5,804078 <__pack_f+0xb4>
  803fd8:	00800104 	movi	r2,4
  803fdc:	28802326 	beq	r5,r2,80406c <__pack_f+0xa8>
  803fe0:	00800084 	movi	r2,2
  803fe4:	28800f26 	beq	r5,r2,804024 <__pack_f+0x60>
  803fe8:	18000e26 	beq	r3,zero,804024 <__pack_f+0x60>
  803fec:	21000217 	ldw	r4,8(r4)
  803ff0:	00bfe084 	movi	r2,-126
  803ff4:	20802616 	blt	r4,r2,804090 <__pack_f+0xcc>
  803ff8:	00801fc4 	movi	r2,127
  803ffc:	11001b16 	blt	r2,r4,80406c <__pack_f+0xa8>
  804000:	188a703a 	and	r5,r3,r2
  804004:	00801004 	movi	r2,64
  804008:	28801126 	beq	r5,r2,804050 <__pack_f+0x8c>
  80400c:	18c00fc4 	addi	r3,r3,63
  804010:	18001316 	blt	r3,zero,804060 <__pack_f+0x9c>
  804014:	21001fc4 	addi	r4,r4,127
  804018:	180690ba 	slli	r3,r3,2
  80401c:	1806d27a 	srli	r3,r3,9
  804020:	00000206 	br	80402c <__pack_f+0x68>
  804024:	0009883a 	mov	r4,zero
  804028:	0007883a 	mov	r3,zero
  80402c:	21003fcc 	andi	r4,r4,255
  804030:	200895fa 	slli	r4,r4,23
  804034:	380a97fa 	slli	r5,r7,31
  804038:	00802034 	movhi	r2,128
  80403c:	10bfffc4 	addi	r2,r2,-1
  804040:	1886703a 	and	r3,r3,r2
  804044:	1904b03a 	or	r2,r3,r4
  804048:	1144b03a 	or	r2,r2,r5
  80404c:	f800283a 	ret
  804050:	1880200c 	andi	r2,r3,128
  804054:	103fee26 	beq	r2,zero,804010 <__pack_f+0x4c>
  804058:	18c01004 	addi	r3,r3,64
  80405c:	183fed0e 	bge	r3,zero,804014 <__pack_f+0x50>
  804060:	1806d07a 	srli	r3,r3,1
  804064:	21002004 	addi	r4,r4,128
  804068:	003feb06 	br	804018 <__pack_f+0x54>
  80406c:	013fffc4 	movi	r4,-1
  804070:	0007883a 	mov	r3,zero
  804074:	003fed06 	br	80402c <__pack_f+0x68>
  804078:	18c00434 	orhi	r3,r3,16
  80407c:	00802034 	movhi	r2,128
  804080:	10bfffc4 	addi	r2,r2,-1
  804084:	1886703a 	and	r3,r3,r2
  804088:	013fffc4 	movi	r4,-1
  80408c:	003fe706 	br	80402c <__pack_f+0x68>
  804090:	1105c83a 	sub	r2,r2,r4
  804094:	01000644 	movi	r4,25
  804098:	20801216 	blt	r4,r2,8040e4 <__pack_f+0x120>
  80409c:	3088983a 	sll	r4,r6,r2
  8040a0:	1884d83a 	srl	r2,r3,r2
  8040a4:	213fffc4 	addi	r4,r4,-1
  8040a8:	20c6703a 	and	r3,r4,r3
  8040ac:	1806c03a 	cmpne	r3,r3,zero
  8040b0:	1884b03a 	or	r2,r3,r2
  8040b4:	11001fcc 	andi	r4,r2,127
  8040b8:	00c01004 	movi	r3,64
  8040bc:	20c00a1e 	bne	r4,r3,8040e8 <__pack_f+0x124>
  8040c0:	10c0200c 	andi	r3,r2,128
  8040c4:	18000126 	beq	r3,zero,8040cc <__pack_f+0x108>
  8040c8:	10801004 	addi	r2,r2,64
  8040cc:	100690ba 	slli	r3,r2,2
  8040d0:	01100034 	movhi	r4,16384
  8040d4:	1105403a 	cmpgeu	r2,r2,r4
  8040d8:	1806d27a 	srli	r3,r3,9
  8040dc:	1009883a 	mov	r4,r2
  8040e0:	003fd206 	br	80402c <__pack_f+0x68>
  8040e4:	0005883a 	mov	r2,zero
  8040e8:	10800fc4 	addi	r2,r2,63
  8040ec:	003ff706 	br	8040cc <__pack_f+0x108>

008040f0 <__unpack_f>:
  8040f0:	20c00017 	ldw	r3,0(r4)
  8040f4:	00802034 	movhi	r2,128
  8040f8:	10bfffc4 	addi	r2,r2,-1
  8040fc:	1808d5fa 	srli	r4,r3,23
  804100:	180cd7fa 	srli	r6,r3,31
  804104:	1884703a 	and	r2,r3,r2
  804108:	21003fcc 	andi	r4,r4,255
  80410c:	29800115 	stw	r6,4(r5)
  804110:	2000111e 	bne	r4,zero,804158 <__unpack_f+0x68>
  804114:	10001a26 	beq	r2,zero,804180 <__unpack_f+0x90>
  804118:	00ffe084 	movi	r3,-126
  80411c:	100491fa 	slli	r2,r2,7
  804120:	28c00215 	stw	r3,8(r5)
  804124:	00c000c4 	movi	r3,3
  804128:	28c00015 	stw	r3,0(r5)
  80412c:	01900034 	movhi	r6,16384
  804130:	31bfffc4 	addi	r6,r6,-1
  804134:	30801036 	bltu	r6,r2,804178 <__unpack_f+0x88>
  804138:	00ffe044 	movi	r3,-127
  80413c:	1085883a 	add	r2,r2,r2
  804140:	1809883a 	mov	r4,r3
  804144:	18ffffc4 	addi	r3,r3,-1
  804148:	30bffc2e 	bgeu	r6,r2,80413c <__unpack_f+0x4c>
  80414c:	29000215 	stw	r4,8(r5)
  804150:	28800315 	stw	r2,12(r5)
  804154:	f800283a 	ret
  804158:	01803fc4 	movi	r6,255
  80415c:	21800b26 	beq	r4,r6,80418c <__unpack_f+0x9c>
  804160:	100491fa 	slli	r2,r2,7
  804164:	213fe044 	addi	r4,r4,-127
  804168:	00c000c4 	movi	r3,3
  80416c:	10900034 	orhi	r2,r2,16384
  804170:	29000215 	stw	r4,8(r5)
  804174:	28c00015 	stw	r3,0(r5)
  804178:	28800315 	stw	r2,12(r5)
  80417c:	f800283a 	ret
  804180:	00800084 	movi	r2,2
  804184:	28800015 	stw	r2,0(r5)
  804188:	f800283a 	ret
  80418c:	10000526 	beq	r2,zero,8041a4 <__unpack_f+0xb4>
  804190:	18c0042c 	andhi	r3,r3,16
  804194:	18000626 	beq	r3,zero,8041b0 <__unpack_f+0xc0>
  804198:	00c00044 	movi	r3,1
  80419c:	28c00015 	stw	r3,0(r5)
  8041a0:	003ff506 	br	804178 <__unpack_f+0x88>
  8041a4:	00800104 	movi	r2,4
  8041a8:	28800015 	stw	r2,0(r5)
  8041ac:	f800283a 	ret
  8041b0:	28000015 	stw	zero,0(r5)
  8041b4:	003ff006 	br	804178 <__unpack_f+0x88>

008041b8 <__make_fp>:
  8041b8:	defffb04 	addi	sp,sp,-20
  8041bc:	d9000015 	stw	r4,0(sp)
  8041c0:	d809883a 	mov	r4,sp
  8041c4:	dfc00415 	stw	ra,16(sp)
  8041c8:	d9400115 	stw	r5,4(sp)
  8041cc:	d9800215 	stw	r6,8(sp)
  8041d0:	d9c00315 	stw	r7,12(sp)
  8041d4:	0803fc40 	call	803fc4 <__pack_f>
  8041d8:	dfc00417 	ldw	ra,16(sp)
  8041dc:	dec00504 	addi	sp,sp,20
  8041e0:	f800283a 	ret

008041e4 <__pack_d>:
  8041e4:	20800017 	ldw	r2,0(r4)
  8041e8:	defff804 	addi	sp,sp,-32
  8041ec:	dcc00315 	stw	r19,12(sp)
  8041f0:	dc800215 	stw	r18,8(sp)
  8041f4:	dfc00715 	stw	ra,28(sp)
  8041f8:	dd800615 	stw	r22,24(sp)
  8041fc:	dd400515 	stw	r21,20(sp)
  804200:	dd000415 	stw	r20,16(sp)
  804204:	dc400115 	stw	r17,4(sp)
  804208:	dc000015 	stw	r16,0(sp)
  80420c:	04800044 	movi	r18,1
  804210:	24400317 	ldw	r17,12(r4)
  804214:	24000417 	ldw	r16,16(r4)
  804218:	24c00117 	ldw	r19,4(r4)
  80421c:	9080422e 	bgeu	r18,r2,804328 <__pack_d+0x144>
  804220:	00c00104 	movi	r3,4
  804224:	10c03c26 	beq	r2,r3,804318 <__pack_d+0x134>
  804228:	00c00084 	movi	r3,2
  80422c:	10c01926 	beq	r2,r3,804294 <__pack_d+0xb0>
  804230:	8c04b03a 	or	r2,r17,r16
  804234:	10001726 	beq	r2,zero,804294 <__pack_d+0xb0>
  804238:	21000217 	ldw	r4,8(r4)
  80423c:	00bf0084 	movi	r2,-1022
  804240:	20804016 	blt	r4,r2,804344 <__pack_d+0x160>
  804244:	0080ffc4 	movi	r2,1023
  804248:	11003316 	blt	r2,r4,804318 <__pack_d+0x134>
  80424c:	88803fcc 	andi	r2,r17,255
  804250:	00c02004 	movi	r3,128
  804254:	10c02926 	beq	r2,r3,8042fc <__pack_d+0x118>
  804258:	88801fc4 	addi	r2,r17,127
  80425c:	1463803a 	cmpltu	r17,r2,r17
  804260:	8c21883a 	add	r16,r17,r16
  804264:	1023883a 	mov	r17,r2
  804268:	00880034 	movhi	r2,8192
  80426c:	10bfffc4 	addi	r2,r2,-1
  804270:	14001c36 	bltu	r2,r16,8042e4 <__pack_d+0x100>
  804274:	2100ffc4 	addi	r4,r4,1023
  804278:	8006963a 	slli	r3,r16,24
  80427c:	8804d23a 	srli	r2,r17,8
  804280:	8020913a 	slli	r16,r16,4
  804284:	2101ffcc 	andi	r4,r4,2047
  804288:	1884b03a 	or	r2,r3,r2
  80428c:	8020d33a 	srli	r16,r16,12
  804290:	00000306 	br	8042a0 <__pack_d+0xbc>
  804294:	0009883a 	mov	r4,zero
  804298:	0005883a 	mov	r2,zero
  80429c:	0021883a 	mov	r16,zero
  8042a0:	2008953a 	slli	r4,r4,20
  8042a4:	982697fa 	slli	r19,r19,31
  8042a8:	00c00434 	movhi	r3,16
  8042ac:	18ffffc4 	addi	r3,r3,-1
  8042b0:	80e0703a 	and	r16,r16,r3
  8042b4:	8106b03a 	or	r3,r16,r4
  8042b8:	1cc6b03a 	or	r3,r3,r19
  8042bc:	dfc00717 	ldw	ra,28(sp)
  8042c0:	dd800617 	ldw	r22,24(sp)
  8042c4:	dd400517 	ldw	r21,20(sp)
  8042c8:	dd000417 	ldw	r20,16(sp)
  8042cc:	dcc00317 	ldw	r19,12(sp)
  8042d0:	dc800217 	ldw	r18,8(sp)
  8042d4:	dc400117 	ldw	r17,4(sp)
  8042d8:	dc000017 	ldw	r16,0(sp)
  8042dc:	dec00804 	addi	sp,sp,32
  8042e0:	f800283a 	ret
  8042e4:	800697fa 	slli	r3,r16,31
  8042e8:	8804d07a 	srli	r2,r17,1
  8042ec:	21010004 	addi	r4,r4,1024
  8042f0:	8020d07a 	srli	r16,r16,1
  8042f4:	18a2b03a 	or	r17,r3,r2
  8042f8:	003fdf06 	br	804278 <__pack_d+0x94>
  8042fc:	88c0400c 	andi	r3,r17,256
  804300:	183fd926 	beq	r3,zero,804268 <__pack_d+0x84>
  804304:	8885883a 	add	r2,r17,r2
  804308:	1463803a 	cmpltu	r17,r2,r17
  80430c:	8c21883a 	add	r16,r17,r16
  804310:	1023883a 	mov	r17,r2
  804314:	003fd406 	br	804268 <__pack_d+0x84>
  804318:	0101ffc4 	movi	r4,2047
  80431c:	0005883a 	mov	r2,zero
  804320:	0021883a 	mov	r16,zero
  804324:	003fde06 	br	8042a0 <__pack_d+0xbc>
  804328:	84000234 	orhi	r16,r16,8
  80432c:	00c00434 	movhi	r3,16
  804330:	18ffffc4 	addi	r3,r3,-1
  804334:	8805883a 	mov	r2,r17
  804338:	80e0703a 	and	r16,r16,r3
  80433c:	0101ffc4 	movi	r4,2047
  804340:	003fd706 	br	8042a0 <__pack_d+0xbc>
  804344:	1129c83a 	sub	r20,r2,r4
  804348:	00800e04 	movi	r2,56
  80434c:	15002716 	blt	r2,r20,8043ec <__pack_d+0x208>
  804350:	800b883a 	mov	r5,r16
  804354:	a00d883a 	mov	r6,r20
  804358:	8809883a 	mov	r4,r17
  80435c:	08045dc0 	call	8045dc <__lshrdi3>
  804360:	9009883a 	mov	r4,r18
  804364:	000b883a 	mov	r5,zero
  804368:	a00d883a 	mov	r6,r20
  80436c:	102d883a 	mov	r22,r2
  804370:	182b883a 	mov	r21,r3
  804374:	08046200 	call	804620 <__ashldi3>
  804378:	1009003a 	cmpeq	r4,r2,zero
  80437c:	1907c83a 	sub	r3,r3,r4
  804380:	10bfffc4 	addi	r2,r2,-1
  804384:	1c20703a 	and	r16,r3,r16
  804388:	1444703a 	and	r2,r2,r17
  80438c:	1404b03a 	or	r2,r2,r16
  804390:	1004c03a 	cmpne	r2,r2,zero
  804394:	1584b03a 	or	r2,r2,r22
  804398:	11003fcc 	andi	r4,r2,255
  80439c:	01402004 	movi	r5,128
  8043a0:	a807883a 	mov	r3,r21
  8043a4:	2140131e 	bne	r4,r5,8043f4 <__pack_d+0x210>
  8043a8:	1140400c 	andi	r5,r2,256
  8043ac:	28000426 	beq	r5,zero,8043c0 <__pack_d+0x1dc>
  8043b0:	1109883a 	add	r4,r2,r4
  8043b4:	2085803a 	cmpltu	r2,r4,r2
  8043b8:	1547883a 	add	r3,r2,r21
  8043bc:	2005883a 	mov	r2,r4
  8043c0:	1808963a 	slli	r4,r3,24
  8043c4:	1004d23a 	srli	r2,r2,8
  8043c8:	1820913a 	slli	r16,r3,4
  8043cc:	01440034 	movhi	r5,4096
  8043d0:	297fffc4 	addi	r5,r5,-1
  8043d4:	2084b03a 	or	r2,r4,r2
  8043d8:	8020d33a 	srli	r16,r16,12
  8043dc:	01000044 	movi	r4,1
  8043e0:	28ffaf36 	bltu	r5,r3,8042a0 <__pack_d+0xbc>
  8043e4:	0009883a 	mov	r4,zero
  8043e8:	003fad06 	br	8042a0 <__pack_d+0xbc>
  8043ec:	0005883a 	mov	r2,zero
  8043f0:	0007883a 	mov	r3,zero
  8043f4:	11001fc4 	addi	r4,r2,127
  8043f8:	2085803a 	cmpltu	r2,r4,r2
  8043fc:	10c7883a 	add	r3,r2,r3
  804400:	2005883a 	mov	r2,r4
  804404:	003fee06 	br	8043c0 <__pack_d+0x1dc>

00804408 <__unpack_d>:
  804408:	21800117 	ldw	r6,4(r4)
  80440c:	20c00017 	ldw	r3,0(r4)
  804410:	3004d7fa 	srli	r2,r6,31
  804414:	3008d53a 	srli	r4,r6,20
  804418:	28800115 	stw	r2,4(r5)
  80441c:	2101ffcc 	andi	r4,r4,2047
  804420:	00800434 	movhi	r2,16
  804424:	10bfffc4 	addi	r2,r2,-1
  804428:	3084703a 	and	r2,r6,r2
  80442c:	20001a1e 	bne	r4,zero,804498 <__unpack_d+0x90>
  804430:	1888b03a 	or	r4,r3,r2
  804434:	20002626 	beq	r4,zero,8044d0 <__unpack_d+0xc8>
  804438:	1808d63a 	srli	r4,r3,24
  80443c:	1004923a 	slli	r2,r2,8
  804440:	01bf0084 	movi	r6,-1022
  804444:	29800215 	stw	r6,8(r5)
  804448:	2084b03a 	or	r2,r4,r2
  80444c:	010000c4 	movi	r4,3
  804450:	29000015 	stw	r4,0(r5)
  804454:	02040034 	movhi	r8,4096
  804458:	423fffc4 	addi	r8,r8,-1
  80445c:	1806923a 	slli	r3,r3,8
  804460:	40801836 	bltu	r8,r2,8044c4 <__unpack_d+0xbc>
  804464:	013f0044 	movi	r4,-1023
  804468:	18cd883a 	add	r6,r3,r3
  80446c:	30c7803a 	cmpltu	r3,r6,r3
  804470:	1085883a 	add	r2,r2,r2
  804474:	1885883a 	add	r2,r3,r2
  804478:	200f883a 	mov	r7,r4
  80447c:	3007883a 	mov	r3,r6
  804480:	213fffc4 	addi	r4,r4,-1
  804484:	40bff82e 	bgeu	r8,r2,804468 <__unpack_d+0x60>
  804488:	29c00215 	stw	r7,8(r5)
  80448c:	28c00315 	stw	r3,12(r5)
  804490:	28800415 	stw	r2,16(r5)
  804494:	f800283a 	ret
  804498:	01c1ffc4 	movi	r7,2047
  80449c:	21c00f26 	beq	r4,r7,8044dc <__unpack_d+0xd4>
  8044a0:	180cd63a 	srli	r6,r3,24
  8044a4:	1004923a 	slli	r2,r2,8
  8044a8:	213f0044 	addi	r4,r4,-1023
  8044ac:	1806923a 	slli	r3,r3,8
  8044b0:	3084b03a 	or	r2,r6,r2
  8044b4:	29000215 	stw	r4,8(r5)
  8044b8:	010000c4 	movi	r4,3
  8044bc:	10840034 	orhi	r2,r2,4096
  8044c0:	29000015 	stw	r4,0(r5)
  8044c4:	28c00315 	stw	r3,12(r5)
  8044c8:	28800415 	stw	r2,16(r5)
  8044cc:	f800283a 	ret
  8044d0:	00800084 	movi	r2,2
  8044d4:	28800015 	stw	r2,0(r5)
  8044d8:	f800283a 	ret
  8044dc:	1888b03a 	or	r4,r3,r2
  8044e0:	20000526 	beq	r4,zero,8044f8 <__unpack_d+0xf0>
  8044e4:	3180022c 	andhi	r6,r6,8
  8044e8:	30000626 	beq	r6,zero,804504 <__unpack_d+0xfc>
  8044ec:	01000044 	movi	r4,1
  8044f0:	29000015 	stw	r4,0(r5)
  8044f4:	003ff306 	br	8044c4 <__unpack_d+0xbc>
  8044f8:	00800104 	movi	r2,4
  8044fc:	28800015 	stw	r2,0(r5)
  804500:	f800283a 	ret
  804504:	28000015 	stw	zero,0(r5)
  804508:	003fee06 	br	8044c4 <__unpack_d+0xbc>

0080450c <__fpcmp_parts_d>:
  80450c:	20c00017 	ldw	r3,0(r4)
  804510:	00800044 	movi	r2,1
  804514:	10c0142e 	bgeu	r2,r3,804568 <__fpcmp_parts_d+0x5c>
  804518:	29800017 	ldw	r6,0(r5)
  80451c:	1180122e 	bgeu	r2,r6,804568 <__fpcmp_parts_d+0x5c>
  804520:	01c00104 	movi	r7,4
  804524:	19c02826 	beq	r3,r7,8045c8 <__fpcmp_parts_d+0xbc>
  804528:	31c00926 	beq	r6,r7,804550 <__fpcmp_parts_d+0x44>
  80452c:	01c00084 	movi	r7,2
  804530:	19c00626 	beq	r3,r7,80454c <__fpcmp_parts_d+0x40>
  804534:	31c00a26 	beq	r6,r7,804560 <__fpcmp_parts_d+0x54>
  804538:	20c00117 	ldw	r3,4(r4)
  80453c:	29800117 	ldw	r6,4(r5)
  804540:	19800b26 	beq	r3,r6,804570 <__fpcmp_parts_d+0x64>
  804544:	1800041e 	bne	r3,zero,804558 <__fpcmp_parts_d+0x4c>
  804548:	f800283a 	ret
  80454c:	30c01a26 	beq	r6,r3,8045b8 <__fpcmp_parts_d+0xac>
  804550:	28800117 	ldw	r2,4(r5)
  804554:	1000041e 	bne	r2,zero,804568 <__fpcmp_parts_d+0x5c>
  804558:	00bfffc4 	movi	r2,-1
  80455c:	f800283a 	ret
  804560:	20800117 	ldw	r2,4(r4)
  804564:	103ffc1e 	bne	r2,zero,804558 <__fpcmp_parts_d+0x4c>
  804568:	00800044 	movi	r2,1
  80456c:	f800283a 	ret
  804570:	21c00217 	ldw	r7,8(r4)
  804574:	29800217 	ldw	r6,8(r5)
  804578:	31c0020e 	bge	r6,r7,804584 <__fpcmp_parts_d+0x78>
  80457c:	183ff61e 	bne	r3,zero,804558 <__fpcmp_parts_d+0x4c>
  804580:	f800283a 	ret
  804584:	39800a16 	blt	r7,r6,8045b0 <__fpcmp_parts_d+0xa4>
  804588:	20800417 	ldw	r2,16(r4)
  80458c:	29800417 	ldw	r6,16(r5)
  804590:	21c00317 	ldw	r7,12(r4)
  804594:	29000317 	ldw	r4,12(r5)
  804598:	30800936 	bltu	r6,r2,8045c0 <__fpcmp_parts_d+0xb4>
  80459c:	1180011e 	bne	r2,r6,8045a4 <__fpcmp_parts_d+0x98>
  8045a0:	21c00736 	bltu	r4,r7,8045c0 <__fpcmp_parts_d+0xb4>
  8045a4:	11800236 	bltu	r2,r6,8045b0 <__fpcmp_parts_d+0xa4>
  8045a8:	3080031e 	bne	r6,r2,8045b8 <__fpcmp_parts_d+0xac>
  8045ac:	3900022e 	bgeu	r7,r4,8045b8 <__fpcmp_parts_d+0xac>
  8045b0:	183fe926 	beq	r3,zero,804558 <__fpcmp_parts_d+0x4c>
  8045b4:	003fec06 	br	804568 <__fpcmp_parts_d+0x5c>
  8045b8:	0005883a 	mov	r2,zero
  8045bc:	f800283a 	ret
  8045c0:	183fe926 	beq	r3,zero,804568 <__fpcmp_parts_d+0x5c>
  8045c4:	003fe406 	br	804558 <__fpcmp_parts_d+0x4c>
  8045c8:	30ffe51e 	bne	r6,r3,804560 <__fpcmp_parts_d+0x54>
  8045cc:	28c00117 	ldw	r3,4(r5)
  8045d0:	20800117 	ldw	r2,4(r4)
  8045d4:	1885c83a 	sub	r2,r3,r2
  8045d8:	f800283a 	ret

008045dc <__lshrdi3>:
  8045dc:	2005883a 	mov	r2,r4
  8045e0:	2807883a 	mov	r3,r5
  8045e4:	30000826 	beq	r6,zero,804608 <__lshrdi3+0x2c>
  8045e8:	01000804 	movi	r4,32
  8045ec:	2189c83a 	sub	r4,r4,r6
  8045f0:	0100060e 	bge	zero,r4,80460c <__lshrdi3+0x30>
  8045f4:	1184d83a 	srl	r2,r2,r6
  8045f8:	2908983a 	sll	r4,r5,r4
  8045fc:	298cd83a 	srl	r6,r5,r6
  804600:	2084b03a 	or	r2,r4,r2
  804604:	3007883a 	mov	r3,r6
  804608:	f800283a 	ret
  80460c:	0105c83a 	sub	r2,zero,r4
  804610:	000d883a 	mov	r6,zero
  804614:	2884d83a 	srl	r2,r5,r2
  804618:	3007883a 	mov	r3,r6
  80461c:	003ffa06 	br	804608 <__lshrdi3+0x2c>

00804620 <__ashldi3>:
  804620:	2005883a 	mov	r2,r4
  804624:	2807883a 	mov	r3,r5
  804628:	30000826 	beq	r6,zero,80464c <__ashldi3+0x2c>
  80462c:	01000804 	movi	r4,32
  804630:	2189c83a 	sub	r4,r4,r6
  804634:	0100060e 	bge	zero,r4,804650 <__ashldi3+0x30>
  804638:	1108d83a 	srl	r4,r2,r4
  80463c:	2986983a 	sll	r3,r5,r6
  804640:	118c983a 	sll	r6,r2,r6
  804644:	20c6b03a 	or	r3,r4,r3
  804648:	3005883a 	mov	r2,r6
  80464c:	f800283a 	ret
  804650:	0107c83a 	sub	r3,zero,r4
  804654:	000d883a 	mov	r6,zero
  804658:	10c6983a 	sll	r3,r2,r3
  80465c:	3005883a 	mov	r2,r6
  804660:	003ffa06 	br	80464c <__ashldi3+0x2c>

00804664 <_printf_r>:
  804664:	defffd04 	addi	sp,sp,-12
  804668:	dfc00015 	stw	ra,0(sp)
  80466c:	d9800115 	stw	r6,4(sp)
  804670:	d9c00215 	stw	r7,8(sp)
  804674:	20800217 	ldw	r2,8(r4)
  804678:	00c02034 	movhi	r3,128
  80467c:	18d3c004 	addi	r3,r3,20224
  804680:	280d883a 	mov	r6,r5
  804684:	10c00115 	stw	r3,4(r2)
  804688:	100b883a 	mov	r5,r2
  80468c:	d9c00104 	addi	r7,sp,4
  804690:	08047a80 	call	8047a8 <___vfprintf_internal_r>
  804694:	dfc00017 	ldw	ra,0(sp)
  804698:	dec00304 	addi	sp,sp,12
  80469c:	f800283a 	ret

008046a0 <printf>:
  8046a0:	defffc04 	addi	sp,sp,-16
  8046a4:	dfc00015 	stw	ra,0(sp)
  8046a8:	d9400115 	stw	r5,4(sp)
  8046ac:	d9800215 	stw	r6,8(sp)
  8046b0:	d9c00315 	stw	r7,12(sp)
  8046b4:	00802034 	movhi	r2,128
  8046b8:	109be204 	addi	r2,r2,28552
  8046bc:	10800017 	ldw	r2,0(r2)
  8046c0:	00c02034 	movhi	r3,128
  8046c4:	18d3c004 	addi	r3,r3,20224
  8046c8:	200b883a 	mov	r5,r4
  8046cc:	10800217 	ldw	r2,8(r2)
  8046d0:	d9800104 	addi	r6,sp,4
  8046d4:	10c00115 	stw	r3,4(r2)
  8046d8:	1009883a 	mov	r4,r2
  8046dc:	0804edc0 	call	804edc <__vfprintf_internal>
  8046e0:	dfc00017 	ldw	ra,0(sp)
  8046e4:	dec00404 	addi	sp,sp,16
  8046e8:	f800283a 	ret

008046ec <_puts_r>:
  8046ec:	defffd04 	addi	sp,sp,-12
  8046f0:	dc000015 	stw	r16,0(sp)
  8046f4:	2021883a 	mov	r16,r4
  8046f8:	2809883a 	mov	r4,r5
  8046fc:	dfc00215 	stw	ra,8(sp)
  804700:	dc400115 	stw	r17,4(sp)
  804704:	2823883a 	mov	r17,r5
  804708:	08047800 	call	804780 <strlen>
  80470c:	81400217 	ldw	r5,8(r16)
  804710:	00c02034 	movhi	r3,128
  804714:	18d3c004 	addi	r3,r3,20224
  804718:	880d883a 	mov	r6,r17
  80471c:	8009883a 	mov	r4,r16
  804720:	28c00115 	stw	r3,4(r5)
  804724:	100f883a 	mov	r7,r2
  804728:	183ee83a 	callr	r3
  80472c:	047fffc4 	movi	r17,-1
  804730:	14400926 	beq	r2,r17,804758 <_puts_r+0x6c>
  804734:	81400217 	ldw	r5,8(r16)
  804738:	8009883a 	mov	r4,r16
  80473c:	01802034 	movhi	r6,128
  804740:	319b2804 	addi	r6,r6,27808
  804744:	28800117 	ldw	r2,4(r5)
  804748:	01c00044 	movi	r7,1
  80474c:	103ee83a 	callr	r2
  804750:	14400126 	beq	r2,r17,804758 <_puts_r+0x6c>
  804754:	0005883a 	mov	r2,zero
  804758:	dfc00217 	ldw	ra,8(sp)
  80475c:	dc400117 	ldw	r17,4(sp)
  804760:	dc000017 	ldw	r16,0(sp)
  804764:	dec00304 	addi	sp,sp,12
  804768:	f800283a 	ret

0080476c <puts>:
  80476c:	00802034 	movhi	r2,128
  804770:	109be204 	addi	r2,r2,28552
  804774:	200b883a 	mov	r5,r4
  804778:	11000017 	ldw	r4,0(r2)
  80477c:	08046ec1 	jmpi	8046ec <_puts_r>

00804780 <strlen>:
  804780:	20800007 	ldb	r2,0(r4)
  804784:	10000626 	beq	r2,zero,8047a0 <strlen+0x20>
  804788:	2005883a 	mov	r2,r4
  80478c:	10800044 	addi	r2,r2,1
  804790:	10c00007 	ldb	r3,0(r2)
  804794:	183ffd1e 	bne	r3,zero,80478c <strlen+0xc>
  804798:	1105c83a 	sub	r2,r2,r4
  80479c:	f800283a 	ret
  8047a0:	0005883a 	mov	r2,zero
  8047a4:	f800283a 	ret

008047a8 <___vfprintf_internal_r>:
  8047a8:	deffe004 	addi	sp,sp,-128
  8047ac:	d8c00804 	addi	r3,sp,32
  8047b0:	ddc01d15 	stw	r23,116(sp)
  8047b4:	dd401b15 	stw	r21,108(sp)
  8047b8:	dd001a15 	stw	r20,104(sp)
  8047bc:	dcc01915 	stw	r19,100(sp)
  8047c0:	dc801815 	stw	r18,96(sp)
  8047c4:	dc001615 	stw	r16,88(sp)
  8047c8:	dfc01f15 	stw	ra,124(sp)
  8047cc:	df001e15 	stw	fp,120(sp)
  8047d0:	dd801c15 	stw	r22,112(sp)
  8047d4:	dc401715 	stw	r17,92(sp)
  8047d8:	d9000f15 	stw	r4,60(sp)
  8047dc:	d9c00e15 	stw	r7,56(sp)
  8047e0:	3021883a 	mov	r16,r6
  8047e4:	0025883a 	mov	r18,zero
  8047e8:	d8001415 	stw	zero,80(sp)
  8047ec:	d8000d15 	stw	zero,52(sp)
  8047f0:	0029883a 	mov	r20,zero
  8047f4:	d8000b15 	stw	zero,44(sp)
  8047f8:	d8000c15 	stw	zero,48(sp)
  8047fc:	d8001315 	stw	zero,76(sp)
  804800:	d8001015 	stw	zero,64(sp)
  804804:	002b883a 	mov	r21,zero
  804808:	04c00044 	movi	r19,1
  80480c:	d8c00a15 	stw	r3,40(sp)
  804810:	282f883a 	mov	r23,r5
  804814:	80c00003 	ldbu	r3,0(r16)
  804818:	84000044 	addi	r16,r16,1
  80481c:	18803fcc 	andi	r2,r3,255
  804820:	1080201c 	xori	r2,r2,128
  804824:	10bfe004 	addi	r2,r2,-128
  804828:	10001426 	beq	r2,zero,80487c <___vfprintf_internal_r+0xd4>
  80482c:	acc03026 	beq	r21,r19,8048f0 <___vfprintf_internal_r+0x148>
  804830:	9d401f16 	blt	r19,r21,8048b0 <___vfprintf_internal_r+0x108>
  804834:	a83ff71e 	bne	r21,zero,804814 <___vfprintf_internal_r+0x6c>
  804838:	01000944 	movi	r4,37
  80483c:	1100d926 	beq	r2,r4,804ba4 <___vfprintf_internal_r+0x3fc>
  804840:	b8800117 	ldw	r2,4(r23)
  804844:	d9000f17 	ldw	r4,60(sp)
  804848:	d8c00905 	stb	r3,36(sp)
  80484c:	b80b883a 	mov	r5,r23
  804850:	d9800904 	addi	r6,sp,36
  804854:	01c00044 	movi	r7,1
  804858:	103ee83a 	callr	r2
  80485c:	1000a31e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804860:	80c00003 	ldbu	r3,0(r16)
  804864:	94800044 	addi	r18,r18,1
  804868:	84000044 	addi	r16,r16,1
  80486c:	18803fcc 	andi	r2,r3,255
  804870:	1080201c 	xori	r2,r2,128
  804874:	10bfe004 	addi	r2,r2,-128
  804878:	103fec1e 	bne	r2,zero,80482c <___vfprintf_internal_r+0x84>
  80487c:	9005883a 	mov	r2,r18
  804880:	dfc01f17 	ldw	ra,124(sp)
  804884:	df001e17 	ldw	fp,120(sp)
  804888:	ddc01d17 	ldw	r23,116(sp)
  80488c:	dd801c17 	ldw	r22,112(sp)
  804890:	dd401b17 	ldw	r21,108(sp)
  804894:	dd001a17 	ldw	r20,104(sp)
  804898:	dcc01917 	ldw	r19,100(sp)
  80489c:	dc801817 	ldw	r18,96(sp)
  8048a0:	dc401717 	ldw	r17,92(sp)
  8048a4:	dc001617 	ldw	r16,88(sp)
  8048a8:	dec02004 	addi	sp,sp,128
  8048ac:	f800283a 	ret
  8048b0:	01000084 	movi	r4,2
  8048b4:	a9001226 	beq	r21,r4,804900 <___vfprintf_internal_r+0x158>
  8048b8:	010000c4 	movi	r4,3
  8048bc:	a93fd51e 	bne	r21,r4,804814 <___vfprintf_internal_r+0x6c>
  8048c0:	1c7ff404 	addi	r17,r3,-48
  8048c4:	8c403fcc 	andi	r17,r17,255
  8048c8:	01000244 	movi	r4,9
  8048cc:	24401b36 	bltu	r4,r17,80493c <___vfprintf_internal_r+0x194>
  8048d0:	d9000b17 	ldw	r4,44(sp)
  8048d4:	00bfffc4 	movi	r2,-1
  8048d8:	2080ea26 	beq	r4,r2,804c84 <___vfprintf_internal_r+0x4dc>
  8048dc:	01400284 	movi	r5,10
  8048e0:	0803de00 	call	803de0 <__mulsi3>
  8048e4:	88a3883a 	add	r17,r17,r2
  8048e8:	dc400b15 	stw	r17,44(sp)
  8048ec:	003fc906 	br	804814 <___vfprintf_internal_r+0x6c>
  8048f0:	01000c04 	movi	r4,48
  8048f4:	1100de26 	beq	r2,r4,804c70 <___vfprintf_internal_r+0x4c8>
  8048f8:	01000944 	movi	r4,37
  8048fc:	1100fd26 	beq	r2,r4,804cf4 <___vfprintf_internal_r+0x54c>
  804900:	1c7ff404 	addi	r17,r3,-48
  804904:	8c403fcc 	andi	r17,r17,255
  804908:	01000244 	movi	r4,9
  80490c:	24400936 	bltu	r4,r17,804934 <___vfprintf_internal_r+0x18c>
  804910:	d9000c17 	ldw	r4,48(sp)
  804914:	00bfffc4 	movi	r2,-1
  804918:	2080d826 	beq	r4,r2,804c7c <___vfprintf_internal_r+0x4d4>
  80491c:	01400284 	movi	r5,10
  804920:	0803de00 	call	803de0 <__mulsi3>
  804924:	88a3883a 	add	r17,r17,r2
  804928:	dc400c15 	stw	r17,48(sp)
  80492c:	05400084 	movi	r21,2
  804930:	003fb806 	br	804814 <___vfprintf_internal_r+0x6c>
  804934:	01000b84 	movi	r4,46
  804938:	1100a726 	beq	r2,r4,804bd8 <___vfprintf_internal_r+0x430>
  80493c:	01401b04 	movi	r5,108
  804940:	1140a326 	beq	r2,r5,804bd0 <___vfprintf_internal_r+0x428>
  804944:	d9000b17 	ldw	r4,44(sp)
  804948:	00bfffc4 	movi	r2,-1
  80494c:	2080e626 	beq	r4,r2,804ce8 <___vfprintf_internal_r+0x540>
  804950:	d8001015 	stw	zero,64(sp)
  804954:	18ffea04 	addi	r3,r3,-88
  804958:	18c03fcc 	andi	r3,r3,255
  80495c:	00800804 	movi	r2,32
  804960:	10c0022e 	bgeu	r2,r3,80496c <___vfprintf_internal_r+0x1c4>
  804964:	002b883a 	mov	r21,zero
  804968:	003faa06 	br	804814 <___vfprintf_internal_r+0x6c>
  80496c:	18c7883a 	add	r3,r3,r3
  804970:	18c7883a 	add	r3,r3,r3
  804974:	01402034 	movhi	r5,128
  804978:	29526204 	addi	r5,r5,18824
  80497c:	1947883a 	add	r3,r3,r5
  804980:	18800017 	ldw	r2,0(r3)
  804984:	1000683a 	jmp	r2
  804988:	00804d20 	cmpeqi	r2,zero,308
  80498c:	00804964 	muli	r2,zero,293
  804990:	00804964 	muli	r2,zero,293
  804994:	00804964 	muli	r2,zero,293
  804998:	00804964 	muli	r2,zero,293
  80499c:	00804964 	muli	r2,zero,293
  8049a0:	00804964 	muli	r2,zero,293
  8049a4:	00804964 	muli	r2,zero,293
  8049a8:	00804964 	muli	r2,zero,293
  8049ac:	00804964 	muli	r2,zero,293
  8049b0:	00804964 	muli	r2,zero,293
  8049b4:	00804d30 	cmpltui	r2,zero,308
  8049b8:	00804a0c 	andi	r2,zero,296
  8049bc:	00804964 	muli	r2,zero,293
  8049c0:	00804964 	muli	r2,zero,293
  8049c4:	00804964 	muli	r2,zero,293
  8049c8:	00804964 	muli	r2,zero,293
  8049cc:	00804a0c 	andi	r2,zero,296
  8049d0:	00804964 	muli	r2,zero,293
  8049d4:	00804964 	muli	r2,zero,293
  8049d8:	00804964 	muli	r2,zero,293
  8049dc:	00804964 	muli	r2,zero,293
  8049e0:	00804964 	muli	r2,zero,293
  8049e4:	00804af4 	movhi	r2,299
  8049e8:	00804964 	muli	r2,zero,293
  8049ec:	00804964 	muli	r2,zero,293
  8049f0:	00804964 	muli	r2,zero,293
  8049f4:	00804d7c 	xorhi	r2,zero,309
  8049f8:	00804964 	muli	r2,zero,293
  8049fc:	00804af8 	rdprs	r2,zero,299
  804a00:	00804964 	muli	r2,zero,293
  804a04:	00804964 	muli	r2,zero,293
  804a08:	00804d28 	cmpgeui	r2,zero,308
  804a0c:	d8c00d17 	ldw	r3,52(sp)
  804a10:	18003926 	beq	r3,zero,804af8 <___vfprintf_internal_r+0x350>
  804a14:	d9000e17 	ldw	r4,56(sp)
  804a18:	00c00044 	movi	r3,1
  804a1c:	25400017 	ldw	r21,0(r4)
  804a20:	21000104 	addi	r4,r4,4
  804a24:	d9000e15 	stw	r4,56(sp)
  804a28:	d8c00d15 	stw	r3,52(sp)
  804a2c:	a8012116 	blt	r21,zero,804eb4 <___vfprintf_internal_r+0x70c>
  804a30:	d8001215 	stw	zero,72(sp)
  804a34:	d823883a 	mov	r17,sp
  804a38:	a800371e 	bne	r21,zero,804b18 <___vfprintf_internal_r+0x370>
  804a3c:	d9400b17 	ldw	r5,44(sp)
  804a40:	d809883a 	mov	r4,sp
  804a44:	01400b0e 	bge	zero,r5,804a74 <___vfprintf_internal_r+0x2cc>
  804a48:	d8800b17 	ldw	r2,44(sp)
  804a4c:	d823883a 	mov	r17,sp
  804a50:	00c00c04 	movi	r3,48
  804a54:	00000206 	br	804a60 <___vfprintf_internal_r+0x2b8>
  804a58:	d9400a17 	ldw	r5,40(sp)
  804a5c:	89400426 	beq	r17,r5,804a70 <___vfprintf_internal_r+0x2c8>
  804a60:	88c00005 	stb	r3,0(r17)
  804a64:	10bfffc4 	addi	r2,r2,-1
  804a68:	8c400044 	addi	r17,r17,1
  804a6c:	103ffa1e 	bne	r2,zero,804a58 <___vfprintf_internal_r+0x2b0>
  804a70:	892bc83a 	sub	r21,r17,r4
  804a74:	d8c01217 	ldw	r3,72(sp)
  804a78:	d9000c17 	ldw	r4,48(sp)
  804a7c:	a8c5883a 	add	r2,r21,r3
  804a80:	d8c01017 	ldw	r3,64(sp)
  804a84:	2085c83a 	sub	r2,r4,r2
  804a88:	d8801115 	stw	r2,68(sp)
  804a8c:	18007f26 	beq	r3,zero,804c8c <___vfprintf_internal_r+0x4e4>
  804a90:	d8c01217 	ldw	r3,72(sp)
  804a94:	1800fa1e 	bne	r3,zero,804e80 <___vfprintf_internal_r+0x6d8>
  804a98:	d8c01117 	ldw	r3,68(sp)
  804a9c:	00c0620e 	bge	zero,r3,804c28 <___vfprintf_internal_r+0x480>
  804aa0:	00800c04 	movi	r2,48
  804aa4:	d88008c5 	stb	r2,35(sp)
  804aa8:	b805883a 	mov	r2,r23
  804aac:	dc001215 	stw	r16,72(sp)
  804ab0:	882f883a 	mov	r23,r17
  804ab4:	1f3fffc4 	addi	fp,r3,-1
  804ab8:	05bfffc4 	movi	r22,-1
  804abc:	dc000f17 	ldw	r16,60(sp)
  804ac0:	1023883a 	mov	r17,r2
  804ac4:	00000206 	br	804ad0 <___vfprintf_internal_r+0x328>
  804ac8:	e73fffc4 	addi	fp,fp,-1
  804acc:	e580fc26 	beq	fp,r22,804ec0 <___vfprintf_internal_r+0x718>
  804ad0:	88800117 	ldw	r2,4(r17)
  804ad4:	8009883a 	mov	r4,r16
  804ad8:	880b883a 	mov	r5,r17
  804adc:	d98008c4 	addi	r6,sp,35
  804ae0:	01c00044 	movi	r7,1
  804ae4:	103ee83a 	callr	r2
  804ae8:	103ff726 	beq	r2,zero,804ac8 <___vfprintf_internal_r+0x320>
  804aec:	04bfffc4 	movi	r18,-1
  804af0:	003f6206 	br	80487c <___vfprintf_internal_r+0xd4>
  804af4:	05000204 	movi	r20,8
  804af8:	d9400e17 	ldw	r5,56(sp)
  804afc:	2d400017 	ldw	r21,0(r5)
  804b00:	29400104 	addi	r5,r5,4
  804b04:	d9400e15 	stw	r5,56(sp)
  804b08:	d8000d15 	stw	zero,52(sp)
  804b0c:	d8001215 	stw	zero,72(sp)
  804b10:	d823883a 	mov	r17,sp
  804b14:	a83fc926 	beq	r21,zero,804a3c <___vfprintf_internal_r+0x294>
  804b18:	05800244 	movi	r22,9
  804b1c:	dc001115 	stw	r16,68(sp)
  804b20:	df001417 	ldw	fp,80(sp)
  804b24:	00000506 	br	804b3c <___vfprintf_internal_r+0x394>
  804b28:	15400c04 	addi	r21,r2,48
  804b2c:	8d400005 	stb	r21,0(r17)
  804b30:	802b883a 	mov	r21,r16
  804b34:	8c400044 	addi	r17,r17,1
  804b38:	80000f26 	beq	r16,zero,804b78 <___vfprintf_internal_r+0x3d0>
  804b3c:	a809883a 	mov	r4,r21
  804b40:	a00b883a 	mov	r5,r20
  804b44:	0803dd00 	call	803dd0 <__udivsi3>
  804b48:	a009883a 	mov	r4,r20
  804b4c:	100b883a 	mov	r5,r2
  804b50:	1021883a 	mov	r16,r2
  804b54:	0803de00 	call	803de0 <__mulsi3>
  804b58:	a885c83a 	sub	r2,r21,r2
  804b5c:	b0bff20e 	bge	r22,r2,804b28 <___vfprintf_internal_r+0x380>
  804b60:	e0000e26 	beq	fp,zero,804b9c <___vfprintf_internal_r+0x3f4>
  804b64:	15400dc4 	addi	r21,r2,55
  804b68:	8d400005 	stb	r21,0(r17)
  804b6c:	802b883a 	mov	r21,r16
  804b70:	8c400044 	addi	r17,r17,1
  804b74:	803ff11e 	bne	r16,zero,804b3c <___vfprintf_internal_r+0x394>
  804b78:	d9000b17 	ldw	r4,44(sp)
  804b7c:	8eebc83a 	sub	r21,r17,sp
  804b80:	dc001117 	ldw	r16,68(sp)
  804b84:	2545c83a 	sub	r2,r4,r21
  804b88:	d809883a 	mov	r4,sp
  804b8c:	00bfb90e 	bge	zero,r2,804a74 <___vfprintf_internal_r+0x2cc>
  804b90:	d8c00a17 	ldw	r3,40(sp)
  804b94:	88ffae36 	bltu	r17,r3,804a50 <___vfprintf_internal_r+0x2a8>
  804b98:	003fb606 	br	804a74 <___vfprintf_internal_r+0x2cc>
  804b9c:	154015c4 	addi	r21,r2,87
  804ba0:	003fe206 	br	804b2c <___vfprintf_internal_r+0x384>
  804ba4:	00c00044 	movi	r3,1
  804ba8:	013fffc4 	movi	r4,-1
  804bac:	d8c00d15 	stw	r3,52(sp)
  804bb0:	d9000b15 	stw	r4,44(sp)
  804bb4:	d8001415 	stw	zero,80(sp)
  804bb8:	05000284 	movi	r20,10
  804bbc:	d9000c15 	stw	r4,48(sp)
  804bc0:	d8001315 	stw	zero,76(sp)
  804bc4:	d8001015 	stw	zero,64(sp)
  804bc8:	182b883a 	mov	r21,r3
  804bcc:	003f1106 	br	804814 <___vfprintf_internal_r+0x6c>
  804bd0:	00c00044 	movi	r3,1
  804bd4:	d8c01315 	stw	r3,76(sp)
  804bd8:	054000c4 	movi	r21,3
  804bdc:	003f0d06 	br	804814 <___vfprintf_internal_r+0x6c>
  804be0:	d8c01117 	ldw	r3,68(sp)
  804be4:	dc001517 	ldw	r16,84(sp)
  804be8:	8805883a 	mov	r2,r17
  804bec:	90e5883a 	add	r18,r18,r3
  804bf0:	b823883a 	mov	r17,r23
  804bf4:	102f883a 	mov	r23,r2
  804bf8:	d8c01217 	ldw	r3,72(sp)
  804bfc:	18000a26 	beq	r3,zero,804c28 <___vfprintf_internal_r+0x480>
  804c00:	b8800117 	ldw	r2,4(r23)
  804c04:	d9000f17 	ldw	r4,60(sp)
  804c08:	00c00b44 	movi	r3,45
  804c0c:	d8c00905 	stb	r3,36(sp)
  804c10:	b80b883a 	mov	r5,r23
  804c14:	d9800904 	addi	r6,sp,36
  804c18:	01c00044 	movi	r7,1
  804c1c:	103ee83a 	callr	r2
  804c20:	103fb21e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804c24:	94800044 	addi	r18,r18,1
  804c28:	8d6dc83a 	sub	r22,r17,r21
  804c2c:	057f4d0e 	bge	zero,r21,804964 <___vfprintf_internal_r+0x1bc>
  804c30:	dd400f17 	ldw	r21,60(sp)
  804c34:	00000206 	br	804c40 <___vfprintf_internal_r+0x498>
  804c38:	94800044 	addi	r18,r18,1
  804c3c:	8dbf4926 	beq	r17,r22,804964 <___vfprintf_internal_r+0x1bc>
  804c40:	8c7fffc4 	addi	r17,r17,-1
  804c44:	88c00003 	ldbu	r3,0(r17)
  804c48:	b8800117 	ldw	r2,4(r23)
  804c4c:	a809883a 	mov	r4,r21
  804c50:	d8c00905 	stb	r3,36(sp)
  804c54:	b80b883a 	mov	r5,r23
  804c58:	d9800904 	addi	r6,sp,36
  804c5c:	01c00044 	movi	r7,1
  804c60:	103ee83a 	callr	r2
  804c64:	103ff426 	beq	r2,zero,804c38 <___vfprintf_internal_r+0x490>
  804c68:	04bfffc4 	movi	r18,-1
  804c6c:	003f0306 	br	80487c <___vfprintf_internal_r+0xd4>
  804c70:	dd401015 	stw	r21,64(sp)
  804c74:	05400084 	movi	r21,2
  804c78:	003ee606 	br	804814 <___vfprintf_internal_r+0x6c>
  804c7c:	0005883a 	mov	r2,zero
  804c80:	003f2806 	br	804924 <___vfprintf_internal_r+0x17c>
  804c84:	0005883a 	mov	r2,zero
  804c88:	003f1606 	br	8048e4 <___vfprintf_internal_r+0x13c>
  804c8c:	d8c01117 	ldw	r3,68(sp)
  804c90:	00ffd90e 	bge	zero,r3,804bf8 <___vfprintf_internal_r+0x450>
  804c94:	00800804 	movi	r2,32
  804c98:	d8800885 	stb	r2,34(sp)
  804c9c:	b805883a 	mov	r2,r23
  804ca0:	dc001515 	stw	r16,84(sp)
  804ca4:	882f883a 	mov	r23,r17
  804ca8:	1f3fffc4 	addi	fp,r3,-1
  804cac:	05bfffc4 	movi	r22,-1
  804cb0:	dc000f17 	ldw	r16,60(sp)
  804cb4:	1023883a 	mov	r17,r2
  804cb8:	00000206 	br	804cc4 <___vfprintf_internal_r+0x51c>
  804cbc:	e73fffc4 	addi	fp,fp,-1
  804cc0:	e5bfc726 	beq	fp,r22,804be0 <___vfprintf_internal_r+0x438>
  804cc4:	88800117 	ldw	r2,4(r17)
  804cc8:	8009883a 	mov	r4,r16
  804ccc:	880b883a 	mov	r5,r17
  804cd0:	d9800884 	addi	r6,sp,34
  804cd4:	01c00044 	movi	r7,1
  804cd8:	103ee83a 	callr	r2
  804cdc:	103ff726 	beq	r2,zero,804cbc <___vfprintf_internal_r+0x514>
  804ce0:	04bfffc4 	movi	r18,-1
  804ce4:	003ee506 	br	80487c <___vfprintf_internal_r+0xd4>
  804ce8:	01000044 	movi	r4,1
  804cec:	d9000b15 	stw	r4,44(sp)
  804cf0:	003f1806 	br	804954 <___vfprintf_internal_r+0x1ac>
  804cf4:	b8c00117 	ldw	r3,4(r23)
  804cf8:	d9000f17 	ldw	r4,60(sp)
  804cfc:	d8800905 	stb	r2,36(sp)
  804d00:	b80b883a 	mov	r5,r23
  804d04:	d9800904 	addi	r6,sp,36
  804d08:	a80f883a 	mov	r7,r21
  804d0c:	183ee83a 	callr	r3
  804d10:	103f761e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804d14:	94800044 	addi	r18,r18,1
  804d18:	002b883a 	mov	r21,zero
  804d1c:	003ebd06 	br	804814 <___vfprintf_internal_r+0x6c>
  804d20:	00c00044 	movi	r3,1
  804d24:	d8c01415 	stw	r3,80(sp)
  804d28:	05000404 	movi	r20,16
  804d2c:	003f7206 	br	804af8 <___vfprintf_internal_r+0x350>
  804d30:	d9000c17 	ldw	r4,48(sp)
  804d34:	9900420e 	bge	r19,r4,804e40 <___vfprintf_internal_r+0x698>
  804d38:	df000f17 	ldw	fp,60(sp)
  804d3c:	25bfffc4 	addi	r22,r4,-1
  804d40:	00800804 	movi	r2,32
  804d44:	d8800845 	stb	r2,33(sp)
  804d48:	b023883a 	mov	r17,r22
  804d4c:	057fffc4 	movi	r21,-1
  804d50:	8c7fffc4 	addi	r17,r17,-1
  804d54:	8d403926 	beq	r17,r21,804e3c <___vfprintf_internal_r+0x694>
  804d58:	b8800117 	ldw	r2,4(r23)
  804d5c:	e009883a 	mov	r4,fp
  804d60:	b80b883a 	mov	r5,r23
  804d64:	d9800844 	addi	r6,sp,33
  804d68:	01c00044 	movi	r7,1
  804d6c:	103ee83a 	callr	r2
  804d70:	103ff726 	beq	r2,zero,804d50 <___vfprintf_internal_r+0x5a8>
  804d74:	04bfffc4 	movi	r18,-1
  804d78:	003ec006 	br	80487c <___vfprintf_internal_r+0xd4>
  804d7c:	d9000e17 	ldw	r4,56(sp)
  804d80:	d8c00e17 	ldw	r3,56(sp)
  804d84:	21000017 	ldw	r4,0(r4)
  804d88:	18c00104 	addi	r3,r3,4
  804d8c:	d8c00e15 	stw	r3,56(sp)
  804d90:	d9001215 	stw	r4,72(sp)
  804d94:	08047800 	call	804780 <strlen>
  804d98:	d9000c17 	ldw	r4,48(sp)
  804d9c:	102d883a 	mov	r22,r2
  804da0:	20b9c83a 	sub	fp,r4,r2
  804da4:	07001b0e 	bge	zero,fp,804e14 <___vfprintf_internal_r+0x66c>
  804da8:	00800804 	movi	r2,32
  804dac:	d8800805 	stb	r2,32(sp)
  804db0:	b805883a 	mov	r2,r23
  804db4:	dc001115 	stw	r16,68(sp)
  804db8:	b02f883a 	mov	r23,r22
  804dbc:	e47fffc4 	addi	r17,fp,-1
  804dc0:	902d883a 	mov	r22,r18
  804dc4:	057fffc4 	movi	r21,-1
  804dc8:	dc000f17 	ldw	r16,60(sp)
  804dcc:	1025883a 	mov	r18,r2
  804dd0:	00000206 	br	804ddc <___vfprintf_internal_r+0x634>
  804dd4:	8c7fffc4 	addi	r17,r17,-1
  804dd8:	8d400826 	beq	r17,r21,804dfc <___vfprintf_internal_r+0x654>
  804ddc:	90800117 	ldw	r2,4(r18)
  804de0:	8009883a 	mov	r4,r16
  804de4:	900b883a 	mov	r5,r18
  804de8:	d9800804 	addi	r6,sp,32
  804dec:	01c00044 	movi	r7,1
  804df0:	103ee83a 	callr	r2
  804df4:	103ff726 	beq	r2,zero,804dd4 <___vfprintf_internal_r+0x62c>
  804df8:	003f3c06 	br	804aec <___vfprintf_internal_r+0x344>
  804dfc:	dc001117 	ldw	r16,68(sp)
  804e00:	9005883a 	mov	r2,r18
  804e04:	b025883a 	mov	r18,r22
  804e08:	9725883a 	add	r18,r18,fp
  804e0c:	b82d883a 	mov	r22,r23
  804e10:	102f883a 	mov	r23,r2
  804e14:	b8800117 	ldw	r2,4(r23)
  804e18:	d9000f17 	ldw	r4,60(sp)
  804e1c:	d9801217 	ldw	r6,72(sp)
  804e20:	b80b883a 	mov	r5,r23
  804e24:	b00f883a 	mov	r7,r22
  804e28:	103ee83a 	callr	r2
  804e2c:	103f2f1e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804e30:	95a5883a 	add	r18,r18,r22
  804e34:	002b883a 	mov	r21,zero
  804e38:	003e7606 	br	804814 <___vfprintf_internal_r+0x6c>
  804e3c:	95a5883a 	add	r18,r18,r22
  804e40:	d9400e17 	ldw	r5,56(sp)
  804e44:	b8800117 	ldw	r2,4(r23)
  804e48:	d9000f17 	ldw	r4,60(sp)
  804e4c:	28c00017 	ldw	r3,0(r5)
  804e50:	d9800904 	addi	r6,sp,36
  804e54:	b80b883a 	mov	r5,r23
  804e58:	d8c00905 	stb	r3,36(sp)
  804e5c:	d8c00e17 	ldw	r3,56(sp)
  804e60:	01c00044 	movi	r7,1
  804e64:	1c400104 	addi	r17,r3,4
  804e68:	103ee83a 	callr	r2
  804e6c:	103f1f1e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804e70:	94800044 	addi	r18,r18,1
  804e74:	dc400e15 	stw	r17,56(sp)
  804e78:	002b883a 	mov	r21,zero
  804e7c:	003e6506 	br	804814 <___vfprintf_internal_r+0x6c>
  804e80:	b8800117 	ldw	r2,4(r23)
  804e84:	d9000f17 	ldw	r4,60(sp)
  804e88:	00c00b44 	movi	r3,45
  804e8c:	d8c00905 	stb	r3,36(sp)
  804e90:	b80b883a 	mov	r5,r23
  804e94:	d9800904 	addi	r6,sp,36
  804e98:	01c00044 	movi	r7,1
  804e9c:	103ee83a 	callr	r2
  804ea0:	103f121e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x344>
  804ea4:	d8c01117 	ldw	r3,68(sp)
  804ea8:	94800044 	addi	r18,r18,1
  804eac:	00fefc16 	blt	zero,r3,804aa0 <___vfprintf_internal_r+0x2f8>
  804eb0:	003f5d06 	br	804c28 <___vfprintf_internal_r+0x480>
  804eb4:	056bc83a 	sub	r21,zero,r21
  804eb8:	d8c01215 	stw	r3,72(sp)
  804ebc:	003f1406 	br	804b10 <___vfprintf_internal_r+0x368>
  804ec0:	d8c01117 	ldw	r3,68(sp)
  804ec4:	8805883a 	mov	r2,r17
  804ec8:	dc001217 	ldw	r16,72(sp)
  804ecc:	b823883a 	mov	r17,r23
  804ed0:	90e5883a 	add	r18,r18,r3
  804ed4:	102f883a 	mov	r23,r2
  804ed8:	003f5306 	br	804c28 <___vfprintf_internal_r+0x480>

00804edc <__vfprintf_internal>:
  804edc:	00802034 	movhi	r2,128
  804ee0:	109be204 	addi	r2,r2,28552
  804ee4:	2007883a 	mov	r3,r4
  804ee8:	11000017 	ldw	r4,0(r2)
  804eec:	2805883a 	mov	r2,r5
  804ef0:	300f883a 	mov	r7,r6
  804ef4:	180b883a 	mov	r5,r3
  804ef8:	100d883a 	mov	r6,r2
  804efc:	08047a81 	jmpi	8047a8 <___vfprintf_internal_r>

00804f00 <__sfvwrite_small_dev>:
  804f00:	2880000b 	ldhu	r2,0(r5)
  804f04:	defffa04 	addi	sp,sp,-24
  804f08:	dcc00315 	stw	r19,12(sp)
  804f0c:	10c0020c 	andi	r3,r2,8
  804f10:	18ffffcc 	andi	r3,r3,65535
  804f14:	18e0001c 	xori	r3,r3,32768
  804f18:	dc800215 	stw	r18,8(sp)
  804f1c:	dc400115 	stw	r17,4(sp)
  804f20:	dfc00515 	stw	ra,20(sp)
  804f24:	dd000415 	stw	r20,16(sp)
  804f28:	dc000015 	stw	r16,0(sp)
  804f2c:	18e00004 	addi	r3,r3,-32768
  804f30:	2825883a 	mov	r18,r5
  804f34:	2027883a 	mov	r19,r4
  804f38:	3023883a 	mov	r17,r6
  804f3c:	18002626 	beq	r3,zero,804fd8 <__sfvwrite_small_dev+0xd8>
  804f40:	2940008f 	ldh	r5,2(r5)
  804f44:	28001016 	blt	r5,zero,804f88 <__sfvwrite_small_dev+0x88>
  804f48:	01c01a0e 	bge	zero,r7,804fb4 <__sfvwrite_small_dev+0xb4>
  804f4c:	3821883a 	mov	r16,r7
  804f50:	05010004 	movi	r20,1024
  804f54:	00000306 	br	804f64 <__sfvwrite_small_dev+0x64>
  804f58:	88a3883a 	add	r17,r17,r2
  804f5c:	0400150e 	bge	zero,r16,804fb4 <__sfvwrite_small_dev+0xb4>
  804f60:	9140008f 	ldh	r5,2(r18)
  804f64:	880d883a 	mov	r6,r17
  804f68:	9809883a 	mov	r4,r19
  804f6c:	800f883a 	mov	r7,r16
  804f70:	a400010e 	bge	r20,r16,804f78 <__sfvwrite_small_dev+0x78>
  804f74:	01c10004 	movi	r7,1024
  804f78:	0804fe00 	call	804fe0 <_write_r>
  804f7c:	80a1c83a 	sub	r16,r16,r2
  804f80:	00bff516 	blt	zero,r2,804f58 <__sfvwrite_small_dev+0x58>
  804f84:	9080000b 	ldhu	r2,0(r18)
  804f88:	10801014 	ori	r2,r2,64
  804f8c:	9080000d 	sth	r2,0(r18)
  804f90:	00bfffc4 	movi	r2,-1
  804f94:	dfc00517 	ldw	ra,20(sp)
  804f98:	dd000417 	ldw	r20,16(sp)
  804f9c:	dcc00317 	ldw	r19,12(sp)
  804fa0:	dc800217 	ldw	r18,8(sp)
  804fa4:	dc400117 	ldw	r17,4(sp)
  804fa8:	dc000017 	ldw	r16,0(sp)
  804fac:	dec00604 	addi	sp,sp,24
  804fb0:	f800283a 	ret
  804fb4:	0005883a 	mov	r2,zero
  804fb8:	dfc00517 	ldw	ra,20(sp)
  804fbc:	dd000417 	ldw	r20,16(sp)
  804fc0:	dcc00317 	ldw	r19,12(sp)
  804fc4:	dc800217 	ldw	r18,8(sp)
  804fc8:	dc400117 	ldw	r17,4(sp)
  804fcc:	dc000017 	ldw	r16,0(sp)
  804fd0:	dec00604 	addi	sp,sp,24
  804fd4:	f800283a 	ret
  804fd8:	00bfffc4 	movi	r2,-1
  804fdc:	003fed06 	br	804f94 <__sfvwrite_small_dev+0x94>

00804fe0 <_write_r>:
  804fe0:	defffd04 	addi	sp,sp,-12
  804fe4:	dc400115 	stw	r17,4(sp)
  804fe8:	dc000015 	stw	r16,0(sp)
  804fec:	2023883a 	mov	r17,r4
  804ff0:	04002034 	movhi	r16,128
  804ff4:	841ca504 	addi	r16,r16,29332
  804ff8:	2809883a 	mov	r4,r5
  804ffc:	300b883a 	mov	r5,r6
  805000:	380d883a 	mov	r6,r7
  805004:	dfc00215 	stw	ra,8(sp)
  805008:	80000015 	stw	zero,0(r16)
  80500c:	08052200 	call	805220 <write>
  805010:	00ffffc4 	movi	r3,-1
  805014:	10c00526 	beq	r2,r3,80502c <_write_r+0x4c>
  805018:	dfc00217 	ldw	ra,8(sp)
  80501c:	dc400117 	ldw	r17,4(sp)
  805020:	dc000017 	ldw	r16,0(sp)
  805024:	dec00304 	addi	sp,sp,12
  805028:	f800283a 	ret
  80502c:	80c00017 	ldw	r3,0(r16)
  805030:	183ff926 	beq	r3,zero,805018 <_write_r+0x38>
  805034:	88c00015 	stw	r3,0(r17)
  805038:	dfc00217 	ldw	ra,8(sp)
  80503c:	dc400117 	ldw	r17,4(sp)
  805040:	dc000017 	ldw	r16,0(sp)
  805044:	dec00304 	addi	sp,sp,12
  805048:	f800283a 	ret

0080504c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80504c:	defffc04 	addi	sp,sp,-16
  805050:	df000315 	stw	fp,12(sp)
  805054:	df000304 	addi	fp,sp,12
  805058:	e13ffd15 	stw	r4,-12(fp)
  80505c:	e17ffe15 	stw	r5,-8(fp)
  805060:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  805064:	e0fffe17 	ldw	r3,-8(fp)
  805068:	e0bffd17 	ldw	r2,-12(fp)
  80506c:	18800e26 	beq	r3,r2,8050a8 <alt_load_section+0x5c>
  {
    while( to != end )
  805070:	00000a06 	br	80509c <alt_load_section+0x50>
    {
      *to++ = *from++;
  805074:	e0bffd17 	ldw	r2,-12(fp)
  805078:	10c00017 	ldw	r3,0(r2)
  80507c:	e0bffe17 	ldw	r2,-8(fp)
  805080:	10c00015 	stw	r3,0(r2)
  805084:	e0bffe17 	ldw	r2,-8(fp)
  805088:	10800104 	addi	r2,r2,4
  80508c:	e0bffe15 	stw	r2,-8(fp)
  805090:	e0bffd17 	ldw	r2,-12(fp)
  805094:	10800104 	addi	r2,r2,4
  805098:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80509c:	e0fffe17 	ldw	r3,-8(fp)
  8050a0:	e0bfff17 	ldw	r2,-4(fp)
  8050a4:	18bff31e 	bne	r3,r2,805074 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8050a8:	e037883a 	mov	sp,fp
  8050ac:	df000017 	ldw	fp,0(sp)
  8050b0:	dec00104 	addi	sp,sp,4
  8050b4:	f800283a 	ret

008050b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8050b8:	defffe04 	addi	sp,sp,-8
  8050bc:	dfc00115 	stw	ra,4(sp)
  8050c0:	df000015 	stw	fp,0(sp)
  8050c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8050c8:	01002034 	movhi	r4,128
  8050cc:	211bec04 	addi	r4,r4,28592
  8050d0:	01402034 	movhi	r5,128
  8050d4:	295b3404 	addi	r5,r5,27856
  8050d8:	01802034 	movhi	r6,128
  8050dc:	319bec04 	addi	r6,r6,28592
  8050e0:	080504c0 	call	80504c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8050e4:	01002034 	movhi	r4,128
  8050e8:	21000804 	addi	r4,r4,32
  8050ec:	01402034 	movhi	r5,128
  8050f0:	29400804 	addi	r5,r5,32
  8050f4:	01802034 	movhi	r6,128
  8050f8:	31806e04 	addi	r6,r6,440
  8050fc:	080504c0 	call	80504c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  805100:	01002034 	movhi	r4,128
  805104:	211a5704 	addi	r4,r4,26972
  805108:	01402034 	movhi	r5,128
  80510c:	295a5704 	addi	r5,r5,26972
  805110:	01802034 	movhi	r6,128
  805114:	319b3404 	addi	r6,r6,27856
  805118:	080504c0 	call	80504c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80511c:	08059800 	call	805980 <alt_dcache_flush_all>
  alt_icache_flush_all();
  805120:	0805ab80 	call	805ab8 <alt_icache_flush_all>
}
  805124:	e037883a 	mov	sp,fp
  805128:	dfc00117 	ldw	ra,4(sp)
  80512c:	df000017 	ldw	fp,0(sp)
  805130:	dec00204 	addi	sp,sp,8
  805134:	f800283a 	ret

00805138 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  805138:	defffd04 	addi	sp,sp,-12
  80513c:	dfc00215 	stw	ra,8(sp)
  805140:	df000115 	stw	fp,4(sp)
  805144:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  805148:	0009883a 	mov	r4,zero
  80514c:	08053480 	call	805348 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  805150:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  805154:	080537c0 	call	80537c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  805158:	01002034 	movhi	r4,128
  80515c:	211b2904 	addi	r4,r4,27812
  805160:	01402034 	movhi	r5,128
  805164:	295b2904 	addi	r5,r5,27812
  805168:	01802034 	movhi	r6,128
  80516c:	319b2904 	addi	r6,r6,27812
  805170:	0805e900 	call	805e90 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  805174:	d120c517 	ldw	r4,-31980(gp)
  805178:	d0e0c617 	ldw	r3,-31976(gp)
  80517c:	d0a0c717 	ldw	r2,-31972(gp)
  805180:	180b883a 	mov	r5,r3
  805184:	100d883a 	mov	r6,r2
  805188:	08008cc0 	call	8008cc <main>
  80518c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  805190:	01000044 	movi	r4,1
  805194:	08058b40 	call	8058b4 <close>
  exit (result);
  805198:	e13fff17 	ldw	r4,-4(fp)
  80519c:	08066e00 	call	8066e0 <exit>

008051a0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8051a0:	defffd04 	addi	sp,sp,-12
  8051a4:	dfc00215 	stw	ra,8(sp)
  8051a8:	df000115 	stw	fp,4(sp)
  8051ac:	df000104 	addi	fp,sp,4
  8051b0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8051b4:	e13fff17 	ldw	r4,-4(fp)
  8051b8:	08057100 	call	805710 <alt_busy_sleep>
}
  8051bc:	e037883a 	mov	sp,fp
  8051c0:	dfc00117 	ldw	ra,4(sp)
  8051c4:	df000017 	ldw	fp,0(sp)
  8051c8:	dec00204 	addi	sp,sp,8
  8051cc:	f800283a 	ret

008051d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8051d0:	defffe04 	addi	sp,sp,-8
  8051d4:	dfc00115 	stw	ra,4(sp)
  8051d8:	df000015 	stw	fp,0(sp)
  8051dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8051e0:	00802034 	movhi	r2,128
  8051e4:	109be804 	addi	r2,r2,28576
  8051e8:	10800017 	ldw	r2,0(r2)
  8051ec:	10000526 	beq	r2,zero,805204 <alt_get_errno+0x34>
  8051f0:	00802034 	movhi	r2,128
  8051f4:	109be804 	addi	r2,r2,28576
  8051f8:	10800017 	ldw	r2,0(r2)
  8051fc:	103ee83a 	callr	r2
  805200:	00000206 	br	80520c <alt_get_errno+0x3c>
  805204:	00802034 	movhi	r2,128
  805208:	109ca504 	addi	r2,r2,29332
}
  80520c:	e037883a 	mov	sp,fp
  805210:	dfc00117 	ldw	ra,4(sp)
  805214:	df000017 	ldw	fp,0(sp)
  805218:	dec00204 	addi	sp,sp,8
  80521c:	f800283a 	ret

00805220 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  805220:	defff904 	addi	sp,sp,-28
  805224:	dfc00615 	stw	ra,24(sp)
  805228:	df000515 	stw	fp,20(sp)
  80522c:	df000504 	addi	fp,sp,20
  805230:	e13ffd15 	stw	r4,-12(fp)
  805234:	e17ffe15 	stw	r5,-8(fp)
  805238:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80523c:	e0bffd17 	ldw	r2,-12(fp)
  805240:	10000716 	blt	r2,zero,805260 <write+0x40>
  805244:	e13ffd17 	ldw	r4,-12(fp)
  805248:	01400304 	movi	r5,12
  80524c:	0803de00 	call	803de0 <__mulsi3>
  805250:	00c02034 	movhi	r3,128
  805254:	18db8104 	addi	r3,r3,28164
  805258:	10c5883a 	add	r2,r2,r3
  80525c:	00000106 	br	805264 <write+0x44>
  805260:	0005883a 	mov	r2,zero
  805264:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  805268:	e0bffb17 	ldw	r2,-20(fp)
  80526c:	10001f26 	beq	r2,zero,8052ec <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  805270:	e0bffb17 	ldw	r2,-20(fp)
  805274:	10800217 	ldw	r2,8(r2)
  805278:	108000cc 	andi	r2,r2,3
  80527c:	10001726 	beq	r2,zero,8052dc <write+0xbc>
  805280:	e0bffb17 	ldw	r2,-20(fp)
  805284:	10800017 	ldw	r2,0(r2)
  805288:	10800617 	ldw	r2,24(r2)
  80528c:	10001326 	beq	r2,zero,8052dc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  805290:	e0bffb17 	ldw	r2,-20(fp)
  805294:	10800017 	ldw	r2,0(r2)
  805298:	10c00617 	ldw	r3,24(r2)
  80529c:	e0bfff17 	ldw	r2,-4(fp)
  8052a0:	e13ffb17 	ldw	r4,-20(fp)
  8052a4:	e17ffe17 	ldw	r5,-8(fp)
  8052a8:	100d883a 	mov	r6,r2
  8052ac:	183ee83a 	callr	r3
  8052b0:	e0bffc15 	stw	r2,-16(fp)
  8052b4:	e0bffc17 	ldw	r2,-16(fp)
  8052b8:	1000060e 	bge	r2,zero,8052d4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8052bc:	08051d00 	call	8051d0 <alt_get_errno>
  8052c0:	e0fffc17 	ldw	r3,-16(fp)
  8052c4:	00c7c83a 	sub	r3,zero,r3
  8052c8:	10c00015 	stw	r3,0(r2)
        return -1;
  8052cc:	00bfffc4 	movi	r2,-1
  8052d0:	00000a06 	br	8052fc <write+0xdc>
      }
      return rval;
  8052d4:	e0bffc17 	ldw	r2,-16(fp)
  8052d8:	00000806 	br	8052fc <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8052dc:	08051d00 	call	8051d0 <alt_get_errno>
  8052e0:	00c00344 	movi	r3,13
  8052e4:	10c00015 	stw	r3,0(r2)
  8052e8:	00000306 	br	8052f8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8052ec:	08051d00 	call	8051d0 <alt_get_errno>
  8052f0:	00c01444 	movi	r3,81
  8052f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  8052f8:	00bfffc4 	movi	r2,-1
}
  8052fc:	e037883a 	mov	sp,fp
  805300:	dfc00117 	ldw	ra,4(sp)
  805304:	df000017 	ldw	fp,0(sp)
  805308:	dec00204 	addi	sp,sp,8
  80530c:	f800283a 	ret

00805310 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  805310:	defffd04 	addi	sp,sp,-12
  805314:	dfc00215 	stw	ra,8(sp)
  805318:	df000115 	stw	fp,4(sp)
  80531c:	df000104 	addi	fp,sp,4
  805320:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  805324:	e13fff17 	ldw	r4,-4(fp)
  805328:	01402034 	movhi	r5,128
  80532c:	295be504 	addi	r5,r5,28564
  805330:	0805a180 	call	805a18 <alt_dev_llist_insert>
}
  805334:	e037883a 	mov	sp,fp
  805338:	dfc00117 	ldw	ra,4(sp)
  80533c:	df000017 	ldw	fp,0(sp)
  805340:	dec00204 	addi	sp,sp,8
  805344:	f800283a 	ret

00805348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  805348:	defffd04 	addi	sp,sp,-12
  80534c:	dfc00215 	stw	ra,8(sp)
  805350:	df000115 	stw	fp,4(sp)
  805354:	df000104 	addi	fp,sp,4
  805358:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80535c:	08063bc0 	call	8063bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  805360:	00800044 	movi	r2,1
  805364:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  805368:	e037883a 	mov	sp,fp
  80536c:	dfc00117 	ldw	ra,4(sp)
  805370:	df000017 	ldw	fp,0(sp)
  805374:	dec00204 	addi	sp,sp,8
  805378:	f800283a 	ret

0080537c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80537c:	defffe04 	addi	sp,sp,-8
  805380:	dfc00115 	stw	ra,4(sp)
  805384:	df000015 	stw	fp,0(sp)
  805388:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80538c:	010040b4 	movhi	r4,258
  805390:	21040004 	addi	r4,r4,4096
  805394:	000b883a 	mov	r5,zero
  805398:	01800044 	movi	r6,1
  80539c:	01c0fa04 	movi	r7,1000
  8053a0:	08056880 	call	805688 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8053a4:	01002034 	movhi	r4,128
  8053a8:	211b6c04 	addi	r4,r4,28080
  8053ac:	08053100 	call	805310 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  8053b0:	0001883a 	nop
}
  8053b4:	e037883a 	mov	sp,fp
  8053b8:	dfc00117 	ldw	ra,4(sp)
  8053bc:	df000017 	ldw	fp,0(sp)
  8053c0:	dec00204 	addi	sp,sp,8
  8053c4:	f800283a 	ret

008053c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8053c8:	defffa04 	addi	sp,sp,-24
  8053cc:	dfc00515 	stw	ra,20(sp)
  8053d0:	df000415 	stw	fp,16(sp)
  8053d4:	df000404 	addi	fp,sp,16
  8053d8:	e13ffd15 	stw	r4,-12(fp)
  8053dc:	e17ffe15 	stw	r5,-8(fp)
  8053e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8053e4:	e0bffd17 	ldw	r2,-12(fp)
  8053e8:	10800017 	ldw	r2,0(r2)
  8053ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8053f0:	e0bffc17 	ldw	r2,-16(fp)
  8053f4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  8053f8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8053fc:	10800217 	ldw	r2,8(r2)
  805400:	1809883a 	mov	r4,r3
  805404:	e17ffe17 	ldw	r5,-8(fp)
  805408:	e1bfff17 	ldw	r6,-4(fp)
  80540c:	100f883a 	mov	r7,r2
  805410:	08054880 	call	805488 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  805414:	e037883a 	mov	sp,fp
  805418:	dfc00117 	ldw	ra,4(sp)
  80541c:	df000017 	ldw	fp,0(sp)
  805420:	dec00204 	addi	sp,sp,8
  805424:	f800283a 	ret

00805428 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  805428:	defffa04 	addi	sp,sp,-24
  80542c:	dfc00515 	stw	ra,20(sp)
  805430:	df000415 	stw	fp,16(sp)
  805434:	df000404 	addi	fp,sp,16
  805438:	e13ffd15 	stw	r4,-12(fp)
  80543c:	e17ffe15 	stw	r5,-8(fp)
  805440:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  805444:	e0bffd17 	ldw	r2,-12(fp)
  805448:	10800017 	ldw	r2,0(r2)
  80544c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  805450:	e0bffc17 	ldw	r2,-16(fp)
  805454:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  805458:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80545c:	10800217 	ldw	r2,8(r2)
  805460:	1809883a 	mov	r4,r3
  805464:	e17ffe17 	ldw	r5,-8(fp)
  805468:	e1bfff17 	ldw	r6,-4(fp)
  80546c:	100f883a 	mov	r7,r2
  805470:	080557c0 	call	80557c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  805474:	e037883a 	mov	sp,fp
  805478:	dfc00117 	ldw	ra,4(sp)
  80547c:	df000017 	ldw	fp,0(sp)
  805480:	dec00204 	addi	sp,sp,8
  805484:	f800283a 	ret

00805488 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  805488:	defff704 	addi	sp,sp,-36
  80548c:	df000815 	stw	fp,32(sp)
  805490:	df000804 	addi	fp,sp,32
  805494:	e13ffc15 	stw	r4,-16(fp)
  805498:	e17ffd15 	stw	r5,-12(fp)
  80549c:	e1bffe15 	stw	r6,-8(fp)
  8054a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8054a4:	e0bffc17 	ldw	r2,-16(fp)
  8054a8:	10800017 	ldw	r2,0(r2)
  8054ac:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  8054b0:	e0bffd17 	ldw	r2,-12(fp)
  8054b4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  8054b8:	e0bffe17 	ldw	r2,-8(fp)
  8054bc:	e0fffd17 	ldw	r3,-12(fp)
  8054c0:	1885883a 	add	r2,r3,r2
  8054c4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  8054c8:	00001406 	br	80551c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8054cc:	e0bff917 	ldw	r2,-28(fp)
  8054d0:	10800037 	ldwio	r2,0(r2)
  8054d4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8054d8:	e0bffb17 	ldw	r2,-20(fp)
  8054dc:	10a0000c 	andi	r2,r2,32768
  8054e0:	10000826 	beq	r2,zero,805504 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8054e4:	e0bffb17 	ldw	r2,-20(fp)
  8054e8:	1007883a 	mov	r3,r2
  8054ec:	e0bff817 	ldw	r2,-32(fp)
  8054f0:	10c00005 	stb	r3,0(r2)
  8054f4:	e0bff817 	ldw	r2,-32(fp)
  8054f8:	10800044 	addi	r2,r2,1
  8054fc:	e0bff815 	stw	r2,-32(fp)
  805500:	00000606 	br	80551c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  805504:	e0fff817 	ldw	r3,-32(fp)
  805508:	e0bffd17 	ldw	r2,-12(fp)
  80550c:	1880071e 	bne	r3,r2,80552c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
  805510:	e0bfff17 	ldw	r2,-4(fp)
  805514:	1090000c 	andi	r2,r2,16384
  805518:	1000061e 	bne	r2,zero,805534 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  80551c:	e0fff817 	ldw	r3,-32(fp)
  805520:	e0bffa17 	ldw	r2,-24(fp)
  805524:	18bfe936 	bltu	r3,r2,8054cc <altera_avalon_jtag_uart_read+0x44>
  805528:	00000306 	br	805538 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  80552c:	0001883a 	nop
  805530:	00000106 	br	805538 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
  805534:	0001883a 	nop
    
  }

  if (ptr != buffer)
  805538:	e0fff817 	ldw	r3,-32(fp)
  80553c:	e0bffd17 	ldw	r2,-12(fp)
  805540:	18800426 	beq	r3,r2,805554 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  805544:	e0fff817 	ldw	r3,-32(fp)
  805548:	e0bffd17 	ldw	r2,-12(fp)
  80554c:	1885c83a 	sub	r2,r3,r2
  805550:	00000606 	br	80556c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	1090000c 	andi	r2,r2,16384
  80555c:	10000226 	beq	r2,zero,805568 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  805560:	00bffd44 	movi	r2,-11
  805564:	00000106 	br	80556c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
  805568:	00bffec4 	movi	r2,-5
}
  80556c:	e037883a 	mov	sp,fp
  805570:	df000017 	ldw	fp,0(sp)
  805574:	dec00104 	addi	sp,sp,4
  805578:	f800283a 	ret

0080557c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80557c:	defff904 	addi	sp,sp,-28
  805580:	df000615 	stw	fp,24(sp)
  805584:	df000604 	addi	fp,sp,24
  805588:	e13ffc15 	stw	r4,-16(fp)
  80558c:	e17ffd15 	stw	r5,-12(fp)
  805590:	e1bffe15 	stw	r6,-8(fp)
  805594:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  805598:	e0bffc17 	ldw	r2,-16(fp)
  80559c:	10800017 	ldw	r2,0(r2)
  8055a0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  8055a4:	e0bffe17 	ldw	r2,-8(fp)
  8055a8:	e0fffd17 	ldw	r3,-12(fp)
  8055ac:	1885883a 	add	r2,r3,r2
  8055b0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  8055b4:	00000f06 	br	8055f4 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8055b8:	e0bffa17 	ldw	r2,-24(fp)
  8055bc:	10800104 	addi	r2,r2,4
  8055c0:	10800037 	ldwio	r2,0(r2)
  8055c4:	10bfffec 	andhi	r2,r2,65535
  8055c8:	10000a26 	beq	r2,zero,8055f4 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8055cc:	e0bffa17 	ldw	r2,-24(fp)
  8055d0:	e0fffd17 	ldw	r3,-12(fp)
  8055d4:	18c00003 	ldbu	r3,0(r3)
  8055d8:	18c03fcc 	andi	r3,r3,255
  8055dc:	18c0201c 	xori	r3,r3,128
  8055e0:	18ffe004 	addi	r3,r3,-128
  8055e4:	e13ffd17 	ldw	r4,-12(fp)
  8055e8:	21000044 	addi	r4,r4,1
  8055ec:	e13ffd15 	stw	r4,-12(fp)
  8055f0:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8055f4:	e0fffd17 	ldw	r3,-12(fp)
  8055f8:	e0bffb17 	ldw	r2,-20(fp)
  8055fc:	18bfee36 	bltu	r3,r2,8055b8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  805600:	e0bffe17 	ldw	r2,-8(fp)
}
  805604:	e037883a 	mov	sp,fp
  805608:	df000017 	ldw	fp,0(sp)
  80560c:	dec00104 	addi	sp,sp,4
  805610:	f800283a 	ret

00805614 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  805614:	defffa04 	addi	sp,sp,-24
  805618:	dfc00515 	stw	ra,20(sp)
  80561c:	df000415 	stw	fp,16(sp)
  805620:	df000404 	addi	fp,sp,16
  805624:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  805628:	0007883a 	mov	r3,zero
  80562c:	e0bfff17 	ldw	r2,-4(fp)
  805630:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10800104 	addi	r2,r2,4
  80563c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805640:	0005303a 	rdctl	r2,status
  805644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805648:	e0fffd17 	ldw	r3,-12(fp)
  80564c:	00bfff84 	movi	r2,-2
  805650:	1884703a 	and	r2,r3,r2
  805654:	1001703a 	wrctl	status,r2
  
  return context;
  805658:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80565c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  805660:	08062b80 	call	8062b8 <alt_tick>
  805664:	e0bffc17 	ldw	r2,-16(fp)
  805668:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80566c:	e0bffe17 	ldw	r2,-8(fp)
  805670:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  805674:	e037883a 	mov	sp,fp
  805678:	dfc00117 	ldw	ra,4(sp)
  80567c:	df000017 	ldw	fp,0(sp)
  805680:	dec00204 	addi	sp,sp,8
  805684:	f800283a 	ret

00805688 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  805688:	defff804 	addi	sp,sp,-32
  80568c:	dfc00715 	stw	ra,28(sp)
  805690:	df000615 	stw	fp,24(sp)
  805694:	df000604 	addi	fp,sp,24
  805698:	e13ffc15 	stw	r4,-16(fp)
  80569c:	e17ffd15 	stw	r5,-12(fp)
  8056a0:	e1bffe15 	stw	r6,-8(fp)
  8056a4:	e1ffff15 	stw	r7,-4(fp)
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8056b0:	00802034 	movhi	r2,128
  8056b4:	109caa04 	addi	r2,r2,29352
  8056b8:	10800017 	ldw	r2,0(r2)
  8056bc:	1000041e 	bne	r2,zero,8056d0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  8056c0:	00802034 	movhi	r2,128
  8056c4:	109caa04 	addi	r2,r2,29352
  8056c8:	e0fffb17 	ldw	r3,-20(fp)
  8056cc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8056d0:	e0bffc17 	ldw	r2,-16(fp)
  8056d4:	10800104 	addi	r2,r2,4
  8056d8:	00c001c4 	movi	r3,7
  8056dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8056e0:	d8000015 	stw	zero,0(sp)
  8056e4:	e13ffd17 	ldw	r4,-12(fp)
  8056e8:	e17ffe17 	ldw	r5,-8(fp)
  8056ec:	01802034 	movhi	r6,128
  8056f0:	31958504 	addi	r6,r6,22036
  8056f4:	e1fffc17 	ldw	r7,-16(fp)
  8056f8:	0805ae80 	call	805ae8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8056fc:	e037883a 	mov	sp,fp
  805700:	dfc00117 	ldw	ra,4(sp)
  805704:	df000017 	ldw	fp,0(sp)
  805708:	dec00204 	addi	sp,sp,8
  80570c:	f800283a 	ret

00805710 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  805710:	defffa04 	addi	sp,sp,-24
  805714:	dfc00515 	stw	ra,20(sp)
  805718:	df000415 	stw	fp,16(sp)
  80571c:	df000404 	addi	fp,sp,16
  805720:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  805724:	008000c4 	movi	r2,3
  805728:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80572c:	e13ffd17 	ldw	r4,-12(fp)
  805730:	014003f4 	movhi	r5,15
  805734:	29509004 	addi	r5,r5,16960
  805738:	0803de00 	call	803de0 <__mulsi3>
  80573c:	010179f4 	movhi	r4,1511
  805740:	2127b004 	addi	r4,r4,-24896
  805744:	100b883a 	mov	r5,r2
  805748:	0803dd00 	call	803dd0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80574c:	01200034 	movhi	r4,32768
  805750:	213fffc4 	addi	r4,r4,-1
  805754:	100b883a 	mov	r5,r2
  805758:	0803dd00 	call	803dd0 <__udivsi3>
  80575c:	e13fff17 	ldw	r4,-4(fp)
  805760:	100b883a 	mov	r5,r2
  805764:	0803dd00 	call	803dd0 <__udivsi3>
  805768:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80576c:	e0bffe17 	ldw	r2,-8(fp)
  805770:	10002926 	beq	r2,zero,805818 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
  805774:	e03ffc15 	stw	zero,-16(fp)
  805778:	00001606 	br	8057d4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80577c:	00a00034 	movhi	r2,32768
  805780:	10bfffc4 	addi	r2,r2,-1
  805784:	10bfffc4 	addi	r2,r2,-1
  805788:	103ffe1e 	bne	r2,zero,805784 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80578c:	e13ffd17 	ldw	r4,-12(fp)
  805790:	014003f4 	movhi	r5,15
  805794:	29509004 	addi	r5,r5,16960
  805798:	0803de00 	call	803de0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80579c:	010179f4 	movhi	r4,1511
  8057a0:	2127b004 	addi	r4,r4,-24896
  8057a4:	100b883a 	mov	r5,r2
  8057a8:	0803dd00 	call	803dd0 <__udivsi3>
  8057ac:	01200034 	movhi	r4,32768
  8057b0:	213fffc4 	addi	r4,r4,-1
  8057b4:	100b883a 	mov	r5,r2
  8057b8:	0803dd00 	call	803dd0 <__udivsi3>
  8057bc:	e0ffff17 	ldw	r3,-4(fp)
  8057c0:	1885c83a 	sub	r2,r3,r2
  8057c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8057c8:	e0bffc17 	ldw	r2,-16(fp)
  8057cc:	10800044 	addi	r2,r2,1
  8057d0:	e0bffc15 	stw	r2,-16(fp)
  8057d4:	e0fffc17 	ldw	r3,-16(fp)
  8057d8:	e0bffe17 	ldw	r2,-8(fp)
  8057dc:	18bfe716 	blt	r3,r2,80577c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8057e0:	e13ffd17 	ldw	r4,-12(fp)
  8057e4:	014003f4 	movhi	r5,15
  8057e8:	29509004 	addi	r5,r5,16960
  8057ec:	0803de00 	call	803de0 <__mulsi3>
  8057f0:	010179f4 	movhi	r4,1511
  8057f4:	2127b004 	addi	r4,r4,-24896
  8057f8:	100b883a 	mov	r5,r2
  8057fc:	0803dd00 	call	803dd0 <__udivsi3>
  805800:	1009883a 	mov	r4,r2
  805804:	e17fff17 	ldw	r5,-4(fp)
  805808:	0803de00 	call	803de0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80580c:	10bfffc4 	addi	r2,r2,-1
  805810:	103ffe1e 	bne	r2,zero,80580c <alt_busy_sleep+0xfc>
  805814:	00000d06 	br	80584c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  805818:	e13ffd17 	ldw	r4,-12(fp)
  80581c:	014003f4 	movhi	r5,15
  805820:	29509004 	addi	r5,r5,16960
  805824:	0803de00 	call	803de0 <__mulsi3>
  805828:	010179f4 	movhi	r4,1511
  80582c:	2127b004 	addi	r4,r4,-24896
  805830:	100b883a 	mov	r5,r2
  805834:	0803dd00 	call	803dd0 <__udivsi3>
  805838:	1009883a 	mov	r4,r2
  80583c:	e17fff17 	ldw	r5,-4(fp)
  805840:	0803de00 	call	803de0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805844:	10bfffc4 	addi	r2,r2,-1
  805848:	00bffe16 	blt	zero,r2,805844 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80584c:	0005883a 	mov	r2,zero
}
  805850:	e037883a 	mov	sp,fp
  805854:	dfc00117 	ldw	ra,4(sp)
  805858:	df000017 	ldw	fp,0(sp)
  80585c:	dec00204 	addi	sp,sp,8
  805860:	f800283a 	ret

00805864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805864:	defffe04 	addi	sp,sp,-8
  805868:	dfc00115 	stw	ra,4(sp)
  80586c:	df000015 	stw	fp,0(sp)
  805870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805874:	00802034 	movhi	r2,128
  805878:	109be804 	addi	r2,r2,28576
  80587c:	10800017 	ldw	r2,0(r2)
  805880:	10000526 	beq	r2,zero,805898 <alt_get_errno+0x34>
  805884:	00802034 	movhi	r2,128
  805888:	109be804 	addi	r2,r2,28576
  80588c:	10800017 	ldw	r2,0(r2)
  805890:	103ee83a 	callr	r2
  805894:	00000206 	br	8058a0 <alt_get_errno+0x3c>
  805898:	00802034 	movhi	r2,128
  80589c:	109ca504 	addi	r2,r2,29332
}
  8058a0:	e037883a 	mov	sp,fp
  8058a4:	dfc00117 	ldw	ra,4(sp)
  8058a8:	df000017 	ldw	fp,0(sp)
  8058ac:	dec00204 	addi	sp,sp,8
  8058b0:	f800283a 	ret

008058b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8058b4:	defffb04 	addi	sp,sp,-20
  8058b8:	dfc00415 	stw	ra,16(sp)
  8058bc:	df000315 	stw	fp,12(sp)
  8058c0:	df000304 	addi	fp,sp,12
  8058c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8058c8:	e0bfff17 	ldw	r2,-4(fp)
  8058cc:	10000716 	blt	r2,zero,8058ec <close+0x38>
  8058d0:	e13fff17 	ldw	r4,-4(fp)
  8058d4:	01400304 	movi	r5,12
  8058d8:	0803de00 	call	803de0 <__mulsi3>
  8058dc:	00c02034 	movhi	r3,128
  8058e0:	18db8104 	addi	r3,r3,28164
  8058e4:	10c5883a 	add	r2,r2,r3
  8058e8:	00000106 	br	8058f0 <close+0x3c>
  8058ec:	0005883a 	mov	r2,zero
  8058f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8058f4:	e0bffd17 	ldw	r2,-12(fp)
  8058f8:	10001826 	beq	r2,zero,80595c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8058fc:	e0bffd17 	ldw	r2,-12(fp)
  805900:	10800017 	ldw	r2,0(r2)
  805904:	10800417 	ldw	r2,16(r2)
  805908:	10000626 	beq	r2,zero,805924 <close+0x70>
  80590c:	e0bffd17 	ldw	r2,-12(fp)
  805910:	10800017 	ldw	r2,0(r2)
  805914:	10800417 	ldw	r2,16(r2)
  805918:	e13ffd17 	ldw	r4,-12(fp)
  80591c:	103ee83a 	callr	r2
  805920:	00000106 	br	805928 <close+0x74>
  805924:	0005883a 	mov	r2,zero
  805928:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80592c:	e13fff17 	ldw	r4,-4(fp)
  805930:	08061a00 	call	8061a0 <alt_release_fd>
    if (rval < 0)
  805934:	e0bffe17 	ldw	r2,-8(fp)
  805938:	1000060e 	bge	r2,zero,805954 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80593c:	08058640 	call	805864 <alt_get_errno>
  805940:	e0fffe17 	ldw	r3,-8(fp)
  805944:	00c7c83a 	sub	r3,zero,r3
  805948:	10c00015 	stw	r3,0(r2)
      return -1;
  80594c:	00bfffc4 	movi	r2,-1
  805950:	00000606 	br	80596c <close+0xb8>
    }
    return 0;
  805954:	0005883a 	mov	r2,zero
  805958:	00000406 	br	80596c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80595c:	08058640 	call	805864 <alt_get_errno>
  805960:	00c01444 	movi	r3,81
  805964:	10c00015 	stw	r3,0(r2)
    return -1;
  805968:	00bfffc4 	movi	r2,-1
  }
}
  80596c:	e037883a 	mov	sp,fp
  805970:	dfc00117 	ldw	ra,4(sp)
  805974:	df000017 	ldw	fp,0(sp)
  805978:	dec00204 	addi	sp,sp,8
  80597c:	f800283a 	ret

00805980 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805980:	deffff04 	addi	sp,sp,-4
  805984:	df000015 	stw	fp,0(sp)
  805988:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80598c:	e037883a 	mov	sp,fp
  805990:	df000017 	ldw	fp,0(sp)
  805994:	dec00104 	addi	sp,sp,4
  805998:	f800283a 	ret

0080599c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80599c:	defffc04 	addi	sp,sp,-16
  8059a0:	df000315 	stw	fp,12(sp)
  8059a4:	df000304 	addi	fp,sp,12
  8059a8:	e13ffd15 	stw	r4,-12(fp)
  8059ac:	e17ffe15 	stw	r5,-8(fp)
  8059b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8059b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8059b8:	e037883a 	mov	sp,fp
  8059bc:	df000017 	ldw	fp,0(sp)
  8059c0:	dec00104 	addi	sp,sp,4
  8059c4:	f800283a 	ret

008059c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8059c8:	defffe04 	addi	sp,sp,-8
  8059cc:	dfc00115 	stw	ra,4(sp)
  8059d0:	df000015 	stw	fp,0(sp)
  8059d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8059d8:	00802034 	movhi	r2,128
  8059dc:	109be804 	addi	r2,r2,28576
  8059e0:	10800017 	ldw	r2,0(r2)
  8059e4:	10000526 	beq	r2,zero,8059fc <alt_get_errno+0x34>
  8059e8:	00802034 	movhi	r2,128
  8059ec:	109be804 	addi	r2,r2,28576
  8059f0:	10800017 	ldw	r2,0(r2)
  8059f4:	103ee83a 	callr	r2
  8059f8:	00000206 	br	805a04 <alt_get_errno+0x3c>
  8059fc:	00802034 	movhi	r2,128
  805a00:	109ca504 	addi	r2,r2,29332
}
  805a04:	e037883a 	mov	sp,fp
  805a08:	dfc00117 	ldw	ra,4(sp)
  805a0c:	df000017 	ldw	fp,0(sp)
  805a10:	dec00204 	addi	sp,sp,8
  805a14:	f800283a 	ret

00805a18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805a18:	defffa04 	addi	sp,sp,-24
  805a1c:	dfc00515 	stw	ra,20(sp)
  805a20:	df000415 	stw	fp,16(sp)
  805a24:	df000404 	addi	fp,sp,16
  805a28:	e13ffe15 	stw	r4,-8(fp)
  805a2c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805a30:	e0bffe17 	ldw	r2,-8(fp)
  805a34:	10000326 	beq	r2,zero,805a44 <alt_dev_llist_insert+0x2c>
  805a38:	e0bffe17 	ldw	r2,-8(fp)
  805a3c:	10800217 	ldw	r2,8(r2)
  805a40:	1000051e 	bne	r2,zero,805a58 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  805a44:	08059c80 	call	8059c8 <alt_get_errno>
  805a48:	00c00584 	movi	r3,22
  805a4c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805a50:	00bffa84 	movi	r2,-22
  805a54:	00001306 	br	805aa4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805a58:	e0bffe17 	ldw	r2,-8(fp)
  805a5c:	e0ffff17 	ldw	r3,-4(fp)
  805a60:	e0fffc15 	stw	r3,-16(fp)
  805a64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805a68:	e0bffd17 	ldw	r2,-12(fp)
  805a6c:	e0fffc17 	ldw	r3,-16(fp)
  805a70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805a74:	e0bffc17 	ldw	r2,-16(fp)
  805a78:	10c00017 	ldw	r3,0(r2)
  805a7c:	e0bffd17 	ldw	r2,-12(fp)
  805a80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805a84:	e0bffc17 	ldw	r2,-16(fp)
  805a88:	10800017 	ldw	r2,0(r2)
  805a8c:	e0fffd17 	ldw	r3,-12(fp)
  805a90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  805a94:	e0bffc17 	ldw	r2,-16(fp)
  805a98:	e0fffd17 	ldw	r3,-12(fp)
  805a9c:	10c00015 	stw	r3,0(r2)

  return 0;  
  805aa0:	0005883a 	mov	r2,zero
}
  805aa4:	e037883a 	mov	sp,fp
  805aa8:	dfc00117 	ldw	ra,4(sp)
  805aac:	df000017 	ldw	fp,0(sp)
  805ab0:	dec00204 	addi	sp,sp,8
  805ab4:	f800283a 	ret

00805ab8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805ab8:	defffe04 	addi	sp,sp,-8
  805abc:	dfc00115 	stw	ra,4(sp)
  805ac0:	df000015 	stw	fp,0(sp)
  805ac4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  805ac8:	0009883a 	mov	r4,zero
  805acc:	01420004 	movi	r5,2048
  805ad0:	08066540 	call	806654 <alt_icache_flush>
#endif
}
  805ad4:	e037883a 	mov	sp,fp
  805ad8:	dfc00117 	ldw	ra,4(sp)
  805adc:	df000017 	ldw	fp,0(sp)
  805ae0:	dec00204 	addi	sp,sp,8
  805ae4:	f800283a 	ret

00805ae8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805ae8:	defff904 	addi	sp,sp,-28
  805aec:	dfc00615 	stw	ra,24(sp)
  805af0:	df000515 	stw	fp,20(sp)
  805af4:	df000504 	addi	fp,sp,20
  805af8:	e13ffc15 	stw	r4,-16(fp)
  805afc:	e17ffd15 	stw	r5,-12(fp)
  805b00:	e1bffe15 	stw	r6,-8(fp)
  805b04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  805b08:	e0800217 	ldw	r2,8(fp)
  805b0c:	d8800015 	stw	r2,0(sp)
  805b10:	e13ffc17 	ldw	r4,-16(fp)
  805b14:	e17ffd17 	ldw	r5,-12(fp)
  805b18:	e1bffe17 	ldw	r6,-8(fp)
  805b1c:	e1ffff17 	ldw	r7,-4(fp)
  805b20:	0805cc00 	call	805cc0 <alt_iic_isr_register>
}  
  805b24:	e037883a 	mov	sp,fp
  805b28:	dfc00117 	ldw	ra,4(sp)
  805b2c:	df000017 	ldw	fp,0(sp)
  805b30:	dec00204 	addi	sp,sp,8
  805b34:	f800283a 	ret

00805b38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805b38:	defff904 	addi	sp,sp,-28
  805b3c:	df000615 	stw	fp,24(sp)
  805b40:	df000604 	addi	fp,sp,24
  805b44:	e13ffe15 	stw	r4,-8(fp)
  805b48:	e17fff15 	stw	r5,-4(fp)
  805b4c:	e0bfff17 	ldw	r2,-4(fp)
  805b50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b54:	0005303a 	rdctl	r2,status
  805b58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b5c:	e0fffb17 	ldw	r3,-20(fp)
  805b60:	00bfff84 	movi	r2,-2
  805b64:	1884703a 	and	r2,r3,r2
  805b68:	1001703a 	wrctl	status,r2
  
  return context;
  805b6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805b70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  805b74:	e0bffa17 	ldw	r2,-24(fp)
  805b78:	00c00044 	movi	r3,1
  805b7c:	1884983a 	sll	r2,r3,r2
  805b80:	1007883a 	mov	r3,r2
  805b84:	00802034 	movhi	r2,128
  805b88:	109ca904 	addi	r2,r2,29348
  805b8c:	10800017 	ldw	r2,0(r2)
  805b90:	1886b03a 	or	r3,r3,r2
  805b94:	00802034 	movhi	r2,128
  805b98:	109ca904 	addi	r2,r2,29348
  805b9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805ba0:	00802034 	movhi	r2,128
  805ba4:	109ca904 	addi	r2,r2,29348
  805ba8:	10800017 	ldw	r2,0(r2)
  805bac:	100170fa 	wrctl	ienable,r2
  805bb0:	e0bffc17 	ldw	r2,-16(fp)
  805bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805bb8:	e0bffd17 	ldw	r2,-12(fp)
  805bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805bc0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  805bc4:	e037883a 	mov	sp,fp
  805bc8:	df000017 	ldw	fp,0(sp)
  805bcc:	dec00104 	addi	sp,sp,4
  805bd0:	f800283a 	ret

00805bd4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  805bd4:	defff904 	addi	sp,sp,-28
  805bd8:	df000615 	stw	fp,24(sp)
  805bdc:	df000604 	addi	fp,sp,24
  805be0:	e13ffe15 	stw	r4,-8(fp)
  805be4:	e17fff15 	stw	r5,-4(fp)
  805be8:	e0bfff17 	ldw	r2,-4(fp)
  805bec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805bf0:	0005303a 	rdctl	r2,status
  805bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805bf8:	e0fffb17 	ldw	r3,-20(fp)
  805bfc:	00bfff84 	movi	r2,-2
  805c00:	1884703a 	and	r2,r3,r2
  805c04:	1001703a 	wrctl	status,r2
  
  return context;
  805c08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805c0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  805c10:	e0bffa17 	ldw	r2,-24(fp)
  805c14:	00c00044 	movi	r3,1
  805c18:	1884983a 	sll	r2,r3,r2
  805c1c:	0084303a 	nor	r2,zero,r2
  805c20:	1007883a 	mov	r3,r2
  805c24:	00802034 	movhi	r2,128
  805c28:	109ca904 	addi	r2,r2,29348
  805c2c:	10800017 	ldw	r2,0(r2)
  805c30:	1886703a 	and	r3,r3,r2
  805c34:	00802034 	movhi	r2,128
  805c38:	109ca904 	addi	r2,r2,29348
  805c3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805c40:	00802034 	movhi	r2,128
  805c44:	109ca904 	addi	r2,r2,29348
  805c48:	10800017 	ldw	r2,0(r2)
  805c4c:	100170fa 	wrctl	ienable,r2
  805c50:	e0bffc17 	ldw	r2,-16(fp)
  805c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c58:	e0bffd17 	ldw	r2,-12(fp)
  805c5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805c60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  805c64:	e037883a 	mov	sp,fp
  805c68:	df000017 	ldw	fp,0(sp)
  805c6c:	dec00104 	addi	sp,sp,4
  805c70:	f800283a 	ret

00805c74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  805c74:	defffc04 	addi	sp,sp,-16
  805c78:	df000315 	stw	fp,12(sp)
  805c7c:	df000304 	addi	fp,sp,12
  805c80:	e13ffe15 	stw	r4,-8(fp)
  805c84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805c88:	000530fa 	rdctl	r2,ienable
  805c8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805c90:	e0bfff17 	ldw	r2,-4(fp)
  805c94:	00c00044 	movi	r3,1
  805c98:	1884983a 	sll	r2,r3,r2
  805c9c:	1007883a 	mov	r3,r2
  805ca0:	e0bffd17 	ldw	r2,-12(fp)
  805ca4:	1884703a 	and	r2,r3,r2
  805ca8:	1004c03a 	cmpne	r2,r2,zero
  805cac:	10803fcc 	andi	r2,r2,255
}
  805cb0:	e037883a 	mov	sp,fp
  805cb4:	df000017 	ldw	fp,0(sp)
  805cb8:	dec00104 	addi	sp,sp,4
  805cbc:	f800283a 	ret

00805cc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805cc0:	defff504 	addi	sp,sp,-44
  805cc4:	dfc00a15 	stw	ra,40(sp)
  805cc8:	df000915 	stw	fp,36(sp)
  805ccc:	df000904 	addi	fp,sp,36
  805cd0:	e13ffc15 	stw	r4,-16(fp)
  805cd4:	e17ffd15 	stw	r5,-12(fp)
  805cd8:	e1bffe15 	stw	r6,-8(fp)
  805cdc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  805ce0:	00bffa84 	movi	r2,-22
  805ce4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  805ce8:	e0bffd17 	ldw	r2,-12(fp)
  805cec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  805cf0:	e0bff817 	ldw	r2,-32(fp)
  805cf4:	10800808 	cmpgei	r2,r2,32
  805cf8:	1000271e 	bne	r2,zero,805d98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805cfc:	0005303a 	rdctl	r2,status
  805d00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d04:	e0fffa17 	ldw	r3,-24(fp)
  805d08:	00bfff84 	movi	r2,-2
  805d0c:	1884703a 	and	r2,r3,r2
  805d10:	1001703a 	wrctl	status,r2
  
  return context;
  805d14:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  805d18:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  805d1c:	00c02034 	movhi	r3,128
  805d20:	18dd1004 	addi	r3,r3,29760
  805d24:	e0bff817 	ldw	r2,-32(fp)
  805d28:	100490fa 	slli	r2,r2,3
  805d2c:	1885883a 	add	r2,r3,r2
  805d30:	e0fffe17 	ldw	r3,-8(fp)
  805d34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  805d38:	00c02034 	movhi	r3,128
  805d3c:	18dd1004 	addi	r3,r3,29760
  805d40:	e0bff817 	ldw	r2,-32(fp)
  805d44:	100490fa 	slli	r2,r2,3
  805d48:	1885883a 	add	r2,r3,r2
  805d4c:	10800104 	addi	r2,r2,4
  805d50:	e0ffff17 	ldw	r3,-4(fp)
  805d54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805d58:	e0bffe17 	ldw	r2,-8(fp)
  805d5c:	10000526 	beq	r2,zero,805d74 <alt_iic_isr_register+0xb4>
  805d60:	e0bff817 	ldw	r2,-32(fp)
  805d64:	e13ffc17 	ldw	r4,-16(fp)
  805d68:	100b883a 	mov	r5,r2
  805d6c:	0805b380 	call	805b38 <alt_ic_irq_enable>
  805d70:	00000406 	br	805d84 <alt_iic_isr_register+0xc4>
  805d74:	e0bff817 	ldw	r2,-32(fp)
  805d78:	e13ffc17 	ldw	r4,-16(fp)
  805d7c:	100b883a 	mov	r5,r2
  805d80:	0805bd40 	call	805bd4 <alt_ic_irq_disable>
  805d84:	e0bff715 	stw	r2,-36(fp)
  805d88:	e0bff917 	ldw	r2,-28(fp)
  805d8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d90:	e0bffb17 	ldw	r2,-20(fp)
  805d94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  805d98:	e0bff717 	ldw	r2,-36(fp)
}
  805d9c:	e037883a 	mov	sp,fp
  805da0:	dfc00117 	ldw	ra,4(sp)
  805da4:	df000017 	ldw	fp,0(sp)
  805da8:	dec00204 	addi	sp,sp,8
  805dac:	f800283a 	ret

00805db0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805db0:	defff804 	addi	sp,sp,-32
  805db4:	dfc00715 	stw	ra,28(sp)
  805db8:	df000615 	stw	fp,24(sp)
  805dbc:	dc000515 	stw	r16,20(sp)
  805dc0:	df000504 	addi	fp,sp,20
  805dc4:	e13ffc15 	stw	r4,-16(fp)
  805dc8:	e17ffd15 	stw	r5,-12(fp)
  805dcc:	e1bffe15 	stw	r6,-8(fp)
  805dd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  805dd4:	e13ffd17 	ldw	r4,-12(fp)
  805dd8:	e17ffe17 	ldw	r5,-8(fp)
  805ddc:	e1bfff17 	ldw	r6,-4(fp)
  805de0:	08060480 	call	806048 <open>
  805de4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  805de8:	e0bffb17 	ldw	r2,-20(fp)
  805dec:	10002216 	blt	r2,zero,805e78 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  805df0:	04002034 	movhi	r16,128
  805df4:	841b8104 	addi	r16,r16,28164
  805df8:	e0bffb17 	ldw	r2,-20(fp)
  805dfc:	1009883a 	mov	r4,r2
  805e00:	01400304 	movi	r5,12
  805e04:	0803de00 	call	803de0 <__mulsi3>
  805e08:	8085883a 	add	r2,r16,r2
  805e0c:	10c00017 	ldw	r3,0(r2)
  805e10:	e0bffc17 	ldw	r2,-16(fp)
  805e14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  805e18:	04002034 	movhi	r16,128
  805e1c:	841b8104 	addi	r16,r16,28164
  805e20:	e0bffb17 	ldw	r2,-20(fp)
  805e24:	1009883a 	mov	r4,r2
  805e28:	01400304 	movi	r5,12
  805e2c:	0803de00 	call	803de0 <__mulsi3>
  805e30:	8085883a 	add	r2,r16,r2
  805e34:	10800104 	addi	r2,r2,4
  805e38:	10c00017 	ldw	r3,0(r2)
  805e3c:	e0bffc17 	ldw	r2,-16(fp)
  805e40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805e44:	04002034 	movhi	r16,128
  805e48:	841b8104 	addi	r16,r16,28164
  805e4c:	e0bffb17 	ldw	r2,-20(fp)
  805e50:	1009883a 	mov	r4,r2
  805e54:	01400304 	movi	r5,12
  805e58:	0803de00 	call	803de0 <__mulsi3>
  805e5c:	8085883a 	add	r2,r16,r2
  805e60:	10800204 	addi	r2,r2,8
  805e64:	10c00017 	ldw	r3,0(r2)
  805e68:	e0bffc17 	ldw	r2,-16(fp)
  805e6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  805e70:	e13ffb17 	ldw	r4,-20(fp)
  805e74:	08061a00 	call	8061a0 <alt_release_fd>
  }
} 
  805e78:	e037883a 	mov	sp,fp
  805e7c:	dfc00217 	ldw	ra,8(sp)
  805e80:	df000117 	ldw	fp,4(sp)
  805e84:	dc000017 	ldw	r16,0(sp)
  805e88:	dec00304 	addi	sp,sp,12
  805e8c:	f800283a 	ret

00805e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  805e90:	defffb04 	addi	sp,sp,-20
  805e94:	dfc00415 	stw	ra,16(sp)
  805e98:	df000315 	stw	fp,12(sp)
  805e9c:	df000304 	addi	fp,sp,12
  805ea0:	e13ffd15 	stw	r4,-12(fp)
  805ea4:	e17ffe15 	stw	r5,-8(fp)
  805ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805eac:	01002034 	movhi	r4,128
  805eb0:	211b8404 	addi	r4,r4,28176
  805eb4:	e17ffd17 	ldw	r5,-12(fp)
  805eb8:	01800044 	movi	r6,1
  805ebc:	01c07fc4 	movi	r7,511
  805ec0:	0805db00 	call	805db0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805ec4:	01002034 	movhi	r4,128
  805ec8:	211b8104 	addi	r4,r4,28164
  805ecc:	e17ffe17 	ldw	r5,-8(fp)
  805ed0:	000d883a 	mov	r6,zero
  805ed4:	01c07fc4 	movi	r7,511
  805ed8:	0805db00 	call	805db0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805edc:	01002034 	movhi	r4,128
  805ee0:	211b8704 	addi	r4,r4,28188
  805ee4:	e17fff17 	ldw	r5,-4(fp)
  805ee8:	01800044 	movi	r6,1
  805eec:	01c07fc4 	movi	r7,511
  805ef0:	0805db00 	call	805db0 <alt_open_fd>
}  
  805ef4:	e037883a 	mov	sp,fp
  805ef8:	dfc00117 	ldw	ra,4(sp)
  805efc:	df000017 	ldw	fp,0(sp)
  805f00:	dec00204 	addi	sp,sp,8
  805f04:	f800283a 	ret

00805f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805f08:	defffe04 	addi	sp,sp,-8
  805f0c:	dfc00115 	stw	ra,4(sp)
  805f10:	df000015 	stw	fp,0(sp)
  805f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805f18:	00802034 	movhi	r2,128
  805f1c:	109be804 	addi	r2,r2,28576
  805f20:	10800017 	ldw	r2,0(r2)
  805f24:	10000526 	beq	r2,zero,805f3c <alt_get_errno+0x34>
  805f28:	00802034 	movhi	r2,128
  805f2c:	109be804 	addi	r2,r2,28576
  805f30:	10800017 	ldw	r2,0(r2)
  805f34:	103ee83a 	callr	r2
  805f38:	00000206 	br	805f44 <alt_get_errno+0x3c>
  805f3c:	00802034 	movhi	r2,128
  805f40:	109ca504 	addi	r2,r2,29332
}
  805f44:	e037883a 	mov	sp,fp
  805f48:	dfc00117 	ldw	ra,4(sp)
  805f4c:	df000017 	ldw	fp,0(sp)
  805f50:	dec00204 	addi	sp,sp,8
  805f54:	f800283a 	ret

00805f58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805f58:	defffb04 	addi	sp,sp,-20
  805f5c:	dfc00415 	stw	ra,16(sp)
  805f60:	df000315 	stw	fp,12(sp)
  805f64:	dc000215 	stw	r16,8(sp)
  805f68:	df000204 	addi	fp,sp,8
  805f6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805f70:	e0bfff17 	ldw	r2,-4(fp)
  805f74:	10800217 	ldw	r2,8(r2)
  805f78:	10d00034 	orhi	r3,r2,16384
  805f7c:	e0bfff17 	ldw	r2,-4(fp)
  805f80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  805f84:	e03ffe15 	stw	zero,-8(fp)
  805f88:	00002206 	br	806014 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805f8c:	04002034 	movhi	r16,128
  805f90:	841b8104 	addi	r16,r16,28164
  805f94:	e0bffe17 	ldw	r2,-8(fp)
  805f98:	1009883a 	mov	r4,r2
  805f9c:	01400304 	movi	r5,12
  805fa0:	0803de00 	call	803de0 <__mulsi3>
  805fa4:	8085883a 	add	r2,r16,r2
  805fa8:	10c00017 	ldw	r3,0(r2)
  805fac:	e0bfff17 	ldw	r2,-4(fp)
  805fb0:	10800017 	ldw	r2,0(r2)
  805fb4:	1880141e 	bne	r3,r2,806008 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805fb8:	04002034 	movhi	r16,128
  805fbc:	841b8104 	addi	r16,r16,28164
  805fc0:	e0bffe17 	ldw	r2,-8(fp)
  805fc4:	1009883a 	mov	r4,r2
  805fc8:	01400304 	movi	r5,12
  805fcc:	0803de00 	call	803de0 <__mulsi3>
  805fd0:	8085883a 	add	r2,r16,r2
  805fd4:	10800204 	addi	r2,r2,8
  805fd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805fdc:	10000a0e 	bge	r2,zero,806008 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  805fe0:	e13ffe17 	ldw	r4,-8(fp)
  805fe4:	01400304 	movi	r5,12
  805fe8:	0803de00 	call	803de0 <__mulsi3>
  805fec:	00c02034 	movhi	r3,128
  805ff0:	18db8104 	addi	r3,r3,28164
  805ff4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805ff8:	e0bfff17 	ldw	r2,-4(fp)
  805ffc:	18800226 	beq	r3,r2,806008 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  806000:	00bffcc4 	movi	r2,-13
  806004:	00000a06 	br	806030 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  806008:	e0bffe17 	ldw	r2,-8(fp)
  80600c:	10800044 	addi	r2,r2,1
  806010:	e0bffe15 	stw	r2,-8(fp)
  806014:	00802034 	movhi	r2,128
  806018:	109be704 	addi	r2,r2,28572
  80601c:	10800017 	ldw	r2,0(r2)
  806020:	1007883a 	mov	r3,r2
  806024:	e0bffe17 	ldw	r2,-8(fp)
  806028:	18bfd82e 	bgeu	r3,r2,805f8c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80602c:	0005883a 	mov	r2,zero
}
  806030:	e037883a 	mov	sp,fp
  806034:	dfc00217 	ldw	ra,8(sp)
  806038:	df000117 	ldw	fp,4(sp)
  80603c:	dc000017 	ldw	r16,0(sp)
  806040:	dec00304 	addi	sp,sp,12
  806044:	f800283a 	ret

00806048 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  806048:	defff604 	addi	sp,sp,-40
  80604c:	dfc00915 	stw	ra,36(sp)
  806050:	df000815 	stw	fp,32(sp)
  806054:	df000804 	addi	fp,sp,32
  806058:	e13ffd15 	stw	r4,-12(fp)
  80605c:	e17ffe15 	stw	r5,-8(fp)
  806060:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  806064:	00bfffc4 	movi	r2,-1
  806068:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80606c:	00bffb44 	movi	r2,-19
  806070:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  806074:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  806078:	e13ffd17 	ldw	r4,-12(fp)
  80607c:	01402034 	movhi	r5,128
  806080:	295be504 	addi	r5,r5,28564
  806084:	08063dc0 	call	8063dc <alt_find_dev>
  806088:	e0bff815 	stw	r2,-32(fp)
  80608c:	e0bff817 	ldw	r2,-32(fp)
  806090:	1000051e 	bne	r2,zero,8060a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  806094:	e13ffd17 	ldw	r4,-12(fp)
  806098:	080646c0 	call	80646c <alt_find_file>
  80609c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8060a0:	00800044 	movi	r2,1
  8060a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8060a8:	e0bff817 	ldw	r2,-32(fp)
  8060ac:	10002a26 	beq	r2,zero,806158 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8060b0:	e13ff817 	ldw	r4,-32(fp)
  8060b4:	08065800 	call	806580 <alt_get_fd>
  8060b8:	e0bff915 	stw	r2,-28(fp)
  8060bc:	e0bff917 	ldw	r2,-28(fp)
  8060c0:	1000030e 	bge	r2,zero,8060d0 <open+0x88>
    {
      status = index;
  8060c4:	e0bff917 	ldw	r2,-28(fp)
  8060c8:	e0bffa15 	stw	r2,-24(fp)
  8060cc:	00002406 	br	806160 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  8060d0:	e13ff917 	ldw	r4,-28(fp)
  8060d4:	01400304 	movi	r5,12
  8060d8:	0803de00 	call	803de0 <__mulsi3>
  8060dc:	00c02034 	movhi	r3,128
  8060e0:	18db8104 	addi	r3,r3,28164
  8060e4:	10c5883a 	add	r2,r2,r3
  8060e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8060ec:	e0fffe17 	ldw	r3,-8(fp)
  8060f0:	00900034 	movhi	r2,16384
  8060f4:	10bfffc4 	addi	r2,r2,-1
  8060f8:	1886703a 	and	r3,r3,r2
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  806104:	e0bffb17 	ldw	r2,-20(fp)
  806108:	1000051e 	bne	r2,zero,806120 <open+0xd8>
  80610c:	e13ffc17 	ldw	r4,-16(fp)
  806110:	0805f580 	call	805f58 <alt_file_locked>
  806114:	e0bffa15 	stw	r2,-24(fp)
  806118:	e0bffa17 	ldw	r2,-24(fp)
  80611c:	10001016 	blt	r2,zero,806160 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  806120:	e0bff817 	ldw	r2,-32(fp)
  806124:	10800317 	ldw	r2,12(r2)
  806128:	10000826 	beq	r2,zero,80614c <open+0x104>
  80612c:	e0bff817 	ldw	r2,-32(fp)
  806130:	10800317 	ldw	r2,12(r2)
  806134:	e13ffc17 	ldw	r4,-16(fp)
  806138:	e17ffd17 	ldw	r5,-12(fp)
  80613c:	e1bffe17 	ldw	r6,-8(fp)
  806140:	e1ffff17 	ldw	r7,-4(fp)
  806144:	103ee83a 	callr	r2
  806148:	00000106 	br	806150 <open+0x108>
  80614c:	0005883a 	mov	r2,zero
  806150:	e0bffa15 	stw	r2,-24(fp)
  806154:	00000206 	br	806160 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  806158:	00bffb44 	movi	r2,-19
  80615c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  806160:	e0bffa17 	ldw	r2,-24(fp)
  806164:	1000080e 	bge	r2,zero,806188 <open+0x140>
  {
    alt_release_fd (index);  
  806168:	e13ff917 	ldw	r4,-28(fp)
  80616c:	08061a00 	call	8061a0 <alt_release_fd>
    ALT_ERRNO = -status;
  806170:	0805f080 	call	805f08 <alt_get_errno>
  806174:	e0fffa17 	ldw	r3,-24(fp)
  806178:	00c7c83a 	sub	r3,zero,r3
  80617c:	10c00015 	stw	r3,0(r2)
    return -1;
  806180:	00bfffc4 	movi	r2,-1
  806184:	00000106 	br	80618c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  806188:	e0bff917 	ldw	r2,-28(fp)
}
  80618c:	e037883a 	mov	sp,fp
  806190:	dfc00117 	ldw	ra,4(sp)
  806194:	df000017 	ldw	fp,0(sp)
  806198:	dec00204 	addi	sp,sp,8
  80619c:	f800283a 	ret

008061a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8061a0:	defffc04 	addi	sp,sp,-16
  8061a4:	dfc00315 	stw	ra,12(sp)
  8061a8:	df000215 	stw	fp,8(sp)
  8061ac:	dc000115 	stw	r16,4(sp)
  8061b0:	df000104 	addi	fp,sp,4
  8061b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8061b8:	e0bfff17 	ldw	r2,-4(fp)
  8061bc:	108000d0 	cmplti	r2,r2,3
  8061c0:	1000111e 	bne	r2,zero,806208 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  8061c4:	04002034 	movhi	r16,128
  8061c8:	841b8104 	addi	r16,r16,28164
  8061cc:	e0bfff17 	ldw	r2,-4(fp)
  8061d0:	1009883a 	mov	r4,r2
  8061d4:	01400304 	movi	r5,12
  8061d8:	0803de00 	call	803de0 <__mulsi3>
  8061dc:	8085883a 	add	r2,r16,r2
  8061e0:	10800204 	addi	r2,r2,8
  8061e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8061e8:	04002034 	movhi	r16,128
  8061ec:	841b8104 	addi	r16,r16,28164
  8061f0:	e0bfff17 	ldw	r2,-4(fp)
  8061f4:	1009883a 	mov	r4,r2
  8061f8:	01400304 	movi	r5,12
  8061fc:	0803de00 	call	803de0 <__mulsi3>
  806200:	8085883a 	add	r2,r16,r2
  806204:	10000015 	stw	zero,0(r2)
  }
}
  806208:	e037883a 	mov	sp,fp
  80620c:	dfc00217 	ldw	ra,8(sp)
  806210:	df000117 	ldw	fp,4(sp)
  806214:	dc000017 	ldw	r16,0(sp)
  806218:	dec00304 	addi	sp,sp,12
  80621c:	f800283a 	ret

00806220 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806220:	defffa04 	addi	sp,sp,-24
  806224:	df000515 	stw	fp,20(sp)
  806228:	df000504 	addi	fp,sp,20
  80622c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806230:	0005303a 	rdctl	r2,status
  806234:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806238:	e0fffc17 	ldw	r3,-16(fp)
  80623c:	00bfff84 	movi	r2,-2
  806240:	1884703a 	and	r2,r3,r2
  806244:	1001703a 	wrctl	status,r2
  
  return context;
  806248:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80624c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  806250:	e0bfff17 	ldw	r2,-4(fp)
  806254:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  806258:	e0bffd17 	ldw	r2,-12(fp)
  80625c:	10800017 	ldw	r2,0(r2)
  806260:	e0fffd17 	ldw	r3,-12(fp)
  806264:	18c00117 	ldw	r3,4(r3)
  806268:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80626c:	e0bffd17 	ldw	r2,-12(fp)
  806270:	10800117 	ldw	r2,4(r2)
  806274:	e0fffd17 	ldw	r3,-12(fp)
  806278:	18c00017 	ldw	r3,0(r3)
  80627c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  806280:	e0bffd17 	ldw	r2,-12(fp)
  806284:	e0fffd17 	ldw	r3,-12(fp)
  806288:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80628c:	e0bffd17 	ldw	r2,-12(fp)
  806290:	e0fffd17 	ldw	r3,-12(fp)
  806294:	10c00015 	stw	r3,0(r2)
  806298:	e0bffb17 	ldw	r2,-20(fp)
  80629c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8062a0:	e0bffe17 	ldw	r2,-8(fp)
  8062a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8062a8:	e037883a 	mov	sp,fp
  8062ac:	df000017 	ldw	fp,0(sp)
  8062b0:	dec00104 	addi	sp,sp,4
  8062b4:	f800283a 	ret

008062b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8062b8:	defffb04 	addi	sp,sp,-20
  8062bc:	dfc00415 	stw	ra,16(sp)
  8062c0:	df000315 	stw	fp,12(sp)
  8062c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8062c8:	d0a00917 	ldw	r2,-32732(gp)
  8062cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8062d0:	d0a0ca17 	ldw	r2,-31960(gp)
  8062d4:	10800044 	addi	r2,r2,1
  8062d8:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8062dc:	00002e06 	br	806398 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8062e0:	e0bffd17 	ldw	r2,-12(fp)
  8062e4:	10800017 	ldw	r2,0(r2)
  8062e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8062ec:	e0bffd17 	ldw	r2,-12(fp)
  8062f0:	10800403 	ldbu	r2,16(r2)
  8062f4:	10803fcc 	andi	r2,r2,255
  8062f8:	10000426 	beq	r2,zero,80630c <alt_tick+0x54>
  8062fc:	d0a0ca17 	ldw	r2,-31960(gp)
  806300:	1000021e 	bne	r2,zero,80630c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  806304:	e0bffd17 	ldw	r2,-12(fp)
  806308:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80630c:	e0bffd17 	ldw	r2,-12(fp)
  806310:	10800217 	ldw	r2,8(r2)
  806314:	d0e0ca17 	ldw	r3,-31960(gp)
  806318:	18801d36 	bltu	r3,r2,806390 <alt_tick+0xd8>
  80631c:	e0bffd17 	ldw	r2,-12(fp)
  806320:	10800403 	ldbu	r2,16(r2)
  806324:	10803fcc 	andi	r2,r2,255
  806328:	1000191e 	bne	r2,zero,806390 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80632c:	e0bffd17 	ldw	r2,-12(fp)
  806330:	10c00317 	ldw	r3,12(r2)
  806334:	e0bffd17 	ldw	r2,-12(fp)
  806338:	10800517 	ldw	r2,20(r2)
  80633c:	1009883a 	mov	r4,r2
  806340:	183ee83a 	callr	r3
  806344:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  806348:	e0bfff17 	ldw	r2,-4(fp)
  80634c:	1000031e 	bne	r2,zero,80635c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  806350:	e13ffd17 	ldw	r4,-12(fp)
  806354:	08062200 	call	806220 <alt_alarm_stop>
  806358:	00000d06 	br	806390 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80635c:	e0bffd17 	ldw	r2,-12(fp)
  806360:	10c00217 	ldw	r3,8(r2)
  806364:	e0bfff17 	ldw	r2,-4(fp)
  806368:	1887883a 	add	r3,r3,r2
  80636c:	e0bffd17 	ldw	r2,-12(fp)
  806370:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  806374:	e0bffd17 	ldw	r2,-12(fp)
  806378:	10c00217 	ldw	r3,8(r2)
  80637c:	d0a0ca17 	ldw	r2,-31960(gp)
  806380:	1880032e 	bgeu	r3,r2,806390 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  806384:	e0bffd17 	ldw	r2,-12(fp)
  806388:	00c00044 	movi	r3,1
  80638c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  806390:	e0bffe17 	ldw	r2,-8(fp)
  806394:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806398:	e0fffd17 	ldw	r3,-12(fp)
  80639c:	d0a00904 	addi	r2,gp,-32732
  8063a0:	18bfcf1e 	bne	r3,r2,8062e0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8063a4:	0001883a 	nop
}
  8063a8:	e037883a 	mov	sp,fp
  8063ac:	dfc00117 	ldw	ra,4(sp)
  8063b0:	df000017 	ldw	fp,0(sp)
  8063b4:	dec00204 	addi	sp,sp,8
  8063b8:	f800283a 	ret

008063bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8063bc:	deffff04 	addi	sp,sp,-4
  8063c0:	df000015 	stw	fp,0(sp)
  8063c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8063c8:	000170fa 	wrctl	ienable,zero
}
  8063cc:	e037883a 	mov	sp,fp
  8063d0:	df000017 	ldw	fp,0(sp)
  8063d4:	dec00104 	addi	sp,sp,4
  8063d8:	f800283a 	ret

008063dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8063dc:	defffa04 	addi	sp,sp,-24
  8063e0:	dfc00515 	stw	ra,20(sp)
  8063e4:	df000415 	stw	fp,16(sp)
  8063e8:	df000404 	addi	fp,sp,16
  8063ec:	e13ffe15 	stw	r4,-8(fp)
  8063f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8063f4:	e0bfff17 	ldw	r2,-4(fp)
  8063f8:	10800017 	ldw	r2,0(r2)
  8063fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  806400:	e13ffe17 	ldw	r4,-8(fp)
  806404:	08047800 	call	804780 <strlen>
  806408:	10800044 	addi	r2,r2,1
  80640c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806410:	00000d06 	br	806448 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  806414:	e0bffc17 	ldw	r2,-16(fp)
  806418:	10c00217 	ldw	r3,8(r2)
  80641c:	e0bffd17 	ldw	r2,-12(fp)
  806420:	1809883a 	mov	r4,r3
  806424:	e17ffe17 	ldw	r5,-8(fp)
  806428:	100d883a 	mov	r6,r2
  80642c:	08067000 	call	806700 <memcmp>
  806430:	1000021e 	bne	r2,zero,80643c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  806434:	e0bffc17 	ldw	r2,-16(fp)
  806438:	00000706 	br	806458 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80643c:	e0bffc17 	ldw	r2,-16(fp)
  806440:	10800017 	ldw	r2,0(r2)
  806444:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806448:	e0fffc17 	ldw	r3,-16(fp)
  80644c:	e0bfff17 	ldw	r2,-4(fp)
  806450:	18bff01e 	bne	r3,r2,806414 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  806454:	0005883a 	mov	r2,zero
}
  806458:	e037883a 	mov	sp,fp
  80645c:	dfc00117 	ldw	ra,4(sp)
  806460:	df000017 	ldw	fp,0(sp)
  806464:	dec00204 	addi	sp,sp,8
  806468:	f800283a 	ret

0080646c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80646c:	defffb04 	addi	sp,sp,-20
  806470:	dfc00415 	stw	ra,16(sp)
  806474:	df000315 	stw	fp,12(sp)
  806478:	df000304 	addi	fp,sp,12
  80647c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806480:	00802034 	movhi	r2,128
  806484:	109be304 	addi	r2,r2,28556
  806488:	10800017 	ldw	r2,0(r2)
  80648c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806490:	00003106 	br	806558 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  806494:	e0bffd17 	ldw	r2,-12(fp)
  806498:	10800217 	ldw	r2,8(r2)
  80649c:	1009883a 	mov	r4,r2
  8064a0:	08047800 	call	804780 <strlen>
  8064a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8064a8:	e0bffd17 	ldw	r2,-12(fp)
  8064ac:	10c00217 	ldw	r3,8(r2)
  8064b0:	e0bffe17 	ldw	r2,-8(fp)
  8064b4:	10bfffc4 	addi	r2,r2,-1
  8064b8:	1885883a 	add	r2,r3,r2
  8064bc:	10800003 	ldbu	r2,0(r2)
  8064c0:	10803fcc 	andi	r2,r2,255
  8064c4:	1080201c 	xori	r2,r2,128
  8064c8:	10bfe004 	addi	r2,r2,-128
  8064cc:	10800bd8 	cmpnei	r2,r2,47
  8064d0:	1000031e 	bne	r2,zero,8064e0 <alt_find_file+0x74>
    {
      len -= 1;
  8064d4:	e0bffe17 	ldw	r2,-8(fp)
  8064d8:	10bfffc4 	addi	r2,r2,-1
  8064dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8064e0:	e0bffe17 	ldw	r2,-8(fp)
  8064e4:	e0ffff17 	ldw	r3,-4(fp)
  8064e8:	1885883a 	add	r2,r3,r2
  8064ec:	10800003 	ldbu	r2,0(r2)
  8064f0:	10803fcc 	andi	r2,r2,255
  8064f4:	1080201c 	xori	r2,r2,128
  8064f8:	10bfe004 	addi	r2,r2,-128
  8064fc:	10800be0 	cmpeqi	r2,r2,47
  806500:	1000081e 	bne	r2,zero,806524 <alt_find_file+0xb8>
  806504:	e0bffe17 	ldw	r2,-8(fp)
  806508:	e0ffff17 	ldw	r3,-4(fp)
  80650c:	1885883a 	add	r2,r3,r2
  806510:	10800003 	ldbu	r2,0(r2)
  806514:	10803fcc 	andi	r2,r2,255
  806518:	1080201c 	xori	r2,r2,128
  80651c:	10bfe004 	addi	r2,r2,-128
  806520:	10000a1e 	bne	r2,zero,80654c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  806524:	e0bffd17 	ldw	r2,-12(fp)
  806528:	10c00217 	ldw	r3,8(r2)
  80652c:	e0bffe17 	ldw	r2,-8(fp)
  806530:	1809883a 	mov	r4,r3
  806534:	e17fff17 	ldw	r5,-4(fp)
  806538:	100d883a 	mov	r6,r2
  80653c:	08067000 	call	806700 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806540:	1000021e 	bne	r2,zero,80654c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  806544:	e0bffd17 	ldw	r2,-12(fp)
  806548:	00000806 	br	80656c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  80654c:	e0bffd17 	ldw	r2,-12(fp)
  806550:	10800017 	ldw	r2,0(r2)
  806554:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806558:	e0fffd17 	ldw	r3,-12(fp)
  80655c:	00802034 	movhi	r2,128
  806560:	109be304 	addi	r2,r2,28556
  806564:	18bfcb1e 	bne	r3,r2,806494 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806568:	0005883a 	mov	r2,zero
}
  80656c:	e037883a 	mov	sp,fp
  806570:	dfc00117 	ldw	ra,4(sp)
  806574:	df000017 	ldw	fp,0(sp)
  806578:	dec00204 	addi	sp,sp,8
  80657c:	f800283a 	ret

00806580 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  806580:	defffa04 	addi	sp,sp,-24
  806584:	dfc00515 	stw	ra,20(sp)
  806588:	df000415 	stw	fp,16(sp)
  80658c:	dc000315 	stw	r16,12(sp)
  806590:	df000304 	addi	fp,sp,12
  806594:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806598:	00bffa04 	movi	r2,-24
  80659c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8065a0:	e03ffd15 	stw	zero,-12(fp)
  8065a4:	00002106 	br	80662c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  8065a8:	04002034 	movhi	r16,128
  8065ac:	841b8104 	addi	r16,r16,28164
  8065b0:	e0bffd17 	ldw	r2,-12(fp)
  8065b4:	1009883a 	mov	r4,r2
  8065b8:	01400304 	movi	r5,12
  8065bc:	0803de00 	call	803de0 <__mulsi3>
  8065c0:	8085883a 	add	r2,r16,r2
  8065c4:	10800017 	ldw	r2,0(r2)
  8065c8:	1000151e 	bne	r2,zero,806620 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  8065cc:	04002034 	movhi	r16,128
  8065d0:	841b8104 	addi	r16,r16,28164
  8065d4:	e0bffd17 	ldw	r2,-12(fp)
  8065d8:	1009883a 	mov	r4,r2
  8065dc:	01400304 	movi	r5,12
  8065e0:	0803de00 	call	803de0 <__mulsi3>
  8065e4:	8085883a 	add	r2,r16,r2
  8065e8:	e0ffff17 	ldw	r3,-4(fp)
  8065ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8065f0:	00802034 	movhi	r2,128
  8065f4:	109be704 	addi	r2,r2,28572
  8065f8:	10c00017 	ldw	r3,0(r2)
  8065fc:	e0bffd17 	ldw	r2,-12(fp)
  806600:	1880040e 	bge	r3,r2,806614 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  806604:	00802034 	movhi	r2,128
  806608:	109be704 	addi	r2,r2,28572
  80660c:	e0fffd17 	ldw	r3,-12(fp)
  806610:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  806614:	e0bffd17 	ldw	r2,-12(fp)
  806618:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80661c:	00000606 	br	806638 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806620:	e0bffd17 	ldw	r2,-12(fp)
  806624:	10800044 	addi	r2,r2,1
  806628:	e0bffd15 	stw	r2,-12(fp)
  80662c:	e0bffd17 	ldw	r2,-12(fp)
  806630:	10800810 	cmplti	r2,r2,32
  806634:	103fdc1e 	bne	r2,zero,8065a8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  806638:	e0bffe17 	ldw	r2,-8(fp)
}
  80663c:	e037883a 	mov	sp,fp
  806640:	dfc00217 	ldw	ra,8(sp)
  806644:	df000117 	ldw	fp,4(sp)
  806648:	dc000017 	ldw	r16,0(sp)
  80664c:	dec00304 	addi	sp,sp,12
  806650:	f800283a 	ret

00806654 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  806654:	defffb04 	addi	sp,sp,-20
  806658:	df000415 	stw	fp,16(sp)
  80665c:	df000404 	addi	fp,sp,16
  806660:	e13ffe15 	stw	r4,-8(fp)
  806664:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  806668:	e0bfff17 	ldw	r2,-4(fp)
  80666c:	10820070 	cmpltui	r2,r2,2049
  806670:	1000021e 	bne	r2,zero,80667c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  806674:	00820004 	movi	r2,2048
  806678:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80667c:	e0fffe17 	ldw	r3,-8(fp)
  806680:	e0bfff17 	ldw	r2,-4(fp)
  806684:	1885883a 	add	r2,r3,r2
  806688:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80668c:	e0bffe17 	ldw	r2,-8(fp)
  806690:	e0bffc15 	stw	r2,-16(fp)
  806694:	00000506 	br	8066ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  806698:	e0bffc17 	ldw	r2,-16(fp)
  80669c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8066a0:	e0bffc17 	ldw	r2,-16(fp)
  8066a4:	10800804 	addi	r2,r2,32
  8066a8:	e0bffc15 	stw	r2,-16(fp)
  8066ac:	e0fffc17 	ldw	r3,-16(fp)
  8066b0:	e0bffd17 	ldw	r2,-12(fp)
  8066b4:	18bff836 	bltu	r3,r2,806698 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8066b8:	e0bffe17 	ldw	r2,-8(fp)
  8066bc:	108007cc 	andi	r2,r2,31
  8066c0:	10000226 	beq	r2,zero,8066cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8066c4:	e0bffc17 	ldw	r2,-16(fp)
  8066c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8066cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8066d0:	e037883a 	mov	sp,fp
  8066d4:	df000017 	ldw	fp,0(sp)
  8066d8:	dec00104 	addi	sp,sp,4
  8066dc:	f800283a 	ret

008066e0 <exit>:
  8066e0:	defffe04 	addi	sp,sp,-8
  8066e4:	000b883a 	mov	r5,zero
  8066e8:	dc000015 	stw	r16,0(sp)
  8066ec:	dfc00115 	stw	ra,4(sp)
  8066f0:	2021883a 	mov	r16,r4
  8066f4:	08067480 	call	806748 <__call_exitprocs>
  8066f8:	8009883a 	mov	r4,r16
  8066fc:	08069200 	call	806920 <_exit>

00806700 <memcmp>:
  806700:	30000d26 	beq	r6,zero,806738 <memcmp+0x38>
  806704:	20c00003 	ldbu	r3,0(r4)
  806708:	28800003 	ldbu	r2,0(r5)
  80670c:	18800c1e 	bne	r3,r2,806740 <memcmp+0x40>
  806710:	31bfff84 	addi	r6,r6,-2
  806714:	01ffffc4 	movi	r7,-1
  806718:	00000406 	br	80672c <memcmp+0x2c>
  80671c:	20c00003 	ldbu	r3,0(r4)
  806720:	28800003 	ldbu	r2,0(r5)
  806724:	31bfffc4 	addi	r6,r6,-1
  806728:	1880051e 	bne	r3,r2,806740 <memcmp+0x40>
  80672c:	21000044 	addi	r4,r4,1
  806730:	29400044 	addi	r5,r5,1
  806734:	31fff91e 	bne	r6,r7,80671c <memcmp+0x1c>
  806738:	0005883a 	mov	r2,zero
  80673c:	f800283a 	ret
  806740:	1885c83a 	sub	r2,r3,r2
  806744:	f800283a 	ret

00806748 <__call_exitprocs>:
  806748:	00802034 	movhi	r2,128
  80674c:	109be104 	addi	r2,r2,28548
  806750:	10800017 	ldw	r2,0(r2)
  806754:	defff204 	addi	sp,sp,-56
  806758:	df000c15 	stw	fp,48(sp)
  80675c:	d8800015 	stw	r2,0(sp)
  806760:	10800c04 	addi	r2,r2,48
  806764:	dd400915 	stw	r21,36(sp)
  806768:	dfc00d15 	stw	ra,52(sp)
  80676c:	ddc00b15 	stw	r23,44(sp)
  806770:	dd800a15 	stw	r22,40(sp)
  806774:	dd000815 	stw	r20,32(sp)
  806778:	dcc00715 	stw	r19,28(sp)
  80677c:	dc800615 	stw	r18,24(sp)
  806780:	dc400515 	stw	r17,20(sp)
  806784:	dc000415 	stw	r16,16(sp)
  806788:	d9000115 	stw	r4,4(sp)
  80678c:	2839883a 	mov	fp,r5
  806790:	d8800215 	stw	r2,8(sp)
  806794:	057fffc4 	movi	r21,-1
  806798:	d8800017 	ldw	r2,0(sp)
  80679c:	dd800217 	ldw	r22,8(sp)
  8067a0:	15c00c17 	ldw	r23,48(r2)
  8067a4:	b8001b26 	beq	r23,zero,806814 <__call_exitprocs+0xcc>
  8067a8:	b9000117 	ldw	r4,4(r23)
  8067ac:	bd002217 	ldw	r20,136(r23)
  8067b0:	243fffc4 	addi	r16,r4,-1
  8067b4:	80001416 	blt	r16,zero,806808 <__call_exitprocs+0xc0>
  8067b8:	244007c4 	addi	r17,r4,31
  8067bc:	21000044 	addi	r4,r4,1
  8067c0:	8c63883a 	add	r17,r17,r17
  8067c4:	8427883a 	add	r19,r16,r16
  8067c8:	2109883a 	add	r4,r4,r4
  8067cc:	8c63883a 	add	r17,r17,r17
  8067d0:	9ce7883a 	add	r19,r19,r19
  8067d4:	2109883a 	add	r4,r4,r4
  8067d8:	a463883a 	add	r17,r20,r17
  8067dc:	a4e7883a 	add	r19,r20,r19
  8067e0:	b925883a 	add	r18,r23,r4
  8067e4:	e0001726 	beq	fp,zero,806844 <__call_exitprocs+0xfc>
  8067e8:	a0000226 	beq	r20,zero,8067f4 <__call_exitprocs+0xac>
  8067ec:	89400017 	ldw	r5,0(r17)
  8067f0:	2f001426 	beq	r5,fp,806844 <__call_exitprocs+0xfc>
  8067f4:	843fffc4 	addi	r16,r16,-1
  8067f8:	8c7fff04 	addi	r17,r17,-4
  8067fc:	9cffff04 	addi	r19,r19,-4
  806800:	94bfff04 	addi	r18,r18,-4
  806804:	857ff71e 	bne	r16,r21,8067e4 <__call_exitprocs+0x9c>
  806808:	00800034 	movhi	r2,0
  80680c:	10800004 	addi	r2,r2,0
  806810:	1000311e 	bne	r2,zero,8068d8 <__call_exitprocs+0x190>
  806814:	dfc00d17 	ldw	ra,52(sp)
  806818:	df000c17 	ldw	fp,48(sp)
  80681c:	ddc00b17 	ldw	r23,44(sp)
  806820:	dd800a17 	ldw	r22,40(sp)
  806824:	dd400917 	ldw	r21,36(sp)
  806828:	dd000817 	ldw	r20,32(sp)
  80682c:	dcc00717 	ldw	r19,28(sp)
  806830:	dc800617 	ldw	r18,24(sp)
  806834:	dc400517 	ldw	r17,20(sp)
  806838:	dc000417 	ldw	r16,16(sp)
  80683c:	dec00e04 	addi	sp,sp,56
  806840:	f800283a 	ret
  806844:	b9000117 	ldw	r4,4(r23)
  806848:	92000017 	ldw	r8,0(r18)
  80684c:	213fffc4 	addi	r4,r4,-1
  806850:	24001a26 	beq	r4,r16,8068bc <__call_exitprocs+0x174>
  806854:	90000015 	stw	zero,0(r18)
  806858:	403fe626 	beq	r8,zero,8067f4 <__call_exitprocs+0xac>
  80685c:	ba400117 	ldw	r9,4(r23)
  806860:	a0001226 	beq	r20,zero,8068ac <__call_exitprocs+0x164>
  806864:	00800044 	movi	r2,1
  806868:	1408983a 	sll	r4,r2,r16
  80686c:	a1404017 	ldw	r5,256(r20)
  806870:	214a703a 	and	r5,r4,r5
  806874:	28000d26 	beq	r5,zero,8068ac <__call_exitprocs+0x164>
  806878:	a1404117 	ldw	r5,260(r20)
  80687c:	2148703a 	and	r4,r4,r5
  806880:	2000101e 	bne	r4,zero,8068c4 <__call_exitprocs+0x17c>
  806884:	99400017 	ldw	r5,0(r19)
  806888:	d9000117 	ldw	r4,4(sp)
  80688c:	da400315 	stw	r9,12(sp)
  806890:	403ee83a 	callr	r8
  806894:	da400317 	ldw	r9,12(sp)
  806898:	b9000117 	ldw	r4,4(r23)
  80689c:	227fbe1e 	bne	r4,r9,806798 <__call_exitprocs+0x50>
  8068a0:	b1000017 	ldw	r4,0(r22)
  8068a4:	25ffd326 	beq	r4,r23,8067f4 <__call_exitprocs+0xac>
  8068a8:	003fbb06 	br	806798 <__call_exitprocs+0x50>
  8068ac:	da400315 	stw	r9,12(sp)
  8068b0:	403ee83a 	callr	r8
  8068b4:	da400317 	ldw	r9,12(sp)
  8068b8:	003ff706 	br	806898 <__call_exitprocs+0x150>
  8068bc:	bc000115 	stw	r16,4(r23)
  8068c0:	003fe506 	br	806858 <__call_exitprocs+0x110>
  8068c4:	99000017 	ldw	r4,0(r19)
  8068c8:	da400315 	stw	r9,12(sp)
  8068cc:	403ee83a 	callr	r8
  8068d0:	da400317 	ldw	r9,12(sp)
  8068d4:	003ff006 	br	806898 <__call_exitprocs+0x150>
  8068d8:	b9000117 	ldw	r4,4(r23)
  8068dc:	20000e1e 	bne	r4,zero,806918 <__call_exitprocs+0x1d0>
  8068e0:	b9000017 	ldw	r4,0(r23)
  8068e4:	20000826 	beq	r4,zero,806908 <__call_exitprocs+0x1c0>
  8068e8:	b1000015 	stw	r4,0(r22)
  8068ec:	a0000226 	beq	r20,zero,8068f8 <__call_exitprocs+0x1b0>
  8068f0:	a009883a 	mov	r4,r20
  8068f4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  8068f8:	b809883a 	mov	r4,r23
  8068fc:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  806900:	b5c00017 	ldw	r23,0(r22)
  806904:	003fa706 	br	8067a4 <__call_exitprocs+0x5c>
  806908:	0007883a 	mov	r3,zero
  80690c:	b82d883a 	mov	r22,r23
  806910:	182f883a 	mov	r23,r3
  806914:	003fa306 	br	8067a4 <__call_exitprocs+0x5c>
  806918:	b8c00017 	ldw	r3,0(r23)
  80691c:	003ffb06 	br	80690c <__call_exitprocs+0x1c4>

00806920 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806920:	defffc04 	addi	sp,sp,-16
  806924:	df000315 	stw	fp,12(sp)
  806928:	df000304 	addi	fp,sp,12
  80692c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  806930:	0001883a 	nop
  806934:	e0bfff17 	ldw	r2,-4(fp)
  806938:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  80693c:	e0bffd17 	ldw	r2,-12(fp)
  806940:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806944:	e0bffe17 	ldw	r2,-8(fp)
  806948:	10000226 	beq	r2,zero,806954 <_exit+0x34>
    ALT_SIM_FAIL();
  80694c:	002af070 	cmpltui	zero,zero,43969
  806950:	00000106 	br	806958 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  806954:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806958:	003fff06 	br	806958 <_exit+0x38>
